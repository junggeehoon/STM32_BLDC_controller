
Six_step_position.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ebc  08007ebc  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec4  08007ec4  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec4  08007ec4  00008ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ec8  08007ec8  00008ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007ecc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00000458  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115b4  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e4  00000000  00000000  0001a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd6  00000000  00000000  0001d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020de5  00000000  00000000  0001e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c86  00000000  00000000  0003f393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce415  00000000  00000000  00051019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f42e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040cc  00000000  00000000  0011f474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00123540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c7c 	.word	0x08007c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007c7c 	.word	0x08007c7c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <control_table_init>:

// Define the global instance of our control table
volatile ControlTable_t control_table;

void control_table_init(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	control_table.model_number = DXL_MODEL_NUMBER;
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <control_table_init+0xb4>)
 8000dc6:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000dca:	801a      	strh	r2, [r3, #0]
	control_table.firmware_version = DXL_FIRMWARE_VERSION;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <control_table_init+0xb4>)
 8000dce:	2226      	movs	r2, #38	@ 0x26
 8000dd0:	719a      	strb	r2, [r3, #6]
	control_table.operating_mode = CURRENT_CONTROL;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <control_table_init+0xb4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	72da      	strb	r2, [r3, #11]
	control_table.id = DXL_ID;
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <control_table_init+0xb4>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	71da      	strb	r2, [r3, #7]
	control_table.baud_rate = 2;
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <control_table_init+0xb4>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	721a      	strb	r2, [r3, #8]
	control_table.torque_enable = 0;
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <control_table_init+0xb4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	control_table.led = 0;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <control_table_init+0xb4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	control_table.realtime_tick = 0;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <control_table_init+0xb4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

//	control_table.present_position = 2048;

	control_table.current_p_gain = 9800;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <control_table_init+0xb4>)
 8000dfe:	f242 6248 	movw	r2, #9800	@ 0x2648
 8000e02:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	control_table.current_i_gain = 180;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <control_table_init+0xb4>)
 8000e08:	22b4      	movs	r2, #180	@ 0xb4
 8000e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

	control_table.velocity_p_gain = 160;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <control_table_init+0xb4>)
 8000e10:	22a0      	movs	r2, #160	@ 0xa0
 8000e12:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	control_table.velocity_i_gain = 300;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <control_table_init+0xb4>)
 8000e18:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

	control_table.position_p_gain = 90;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <control_table_init+0xb4>)
 8000e22:	225a      	movs	r2, #90	@ 0x5a
 8000e24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	control_table.position_d_gain = 4;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <control_table_init+0xb4>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	control_table.position_i_gain = 10;
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <control_table_init+0xb4>)
 8000e32:	220a      	movs	r2, #10
 8000e34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	control_table.pwm_limit = 600;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <control_table_init+0xb4>)
 8000e3a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000e3e:	849a      	strh	r2, [r3, #36]	@ 0x24
	control_table.velocity_limit = 131;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <control_table_init+0xb4>)
 8000e42:	2283      	movs	r2, #131	@ 0x83
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
	control_table.current_limit = 2000;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <control_table_init+0xb4>)
 8000e48:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e4c:	84da      	strh	r2, [r3, #38]	@ 0x26

	control_table.goal_pwm = 0;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <control_table_init+0xb4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	control_table.goal_current = 0;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <control_table_init+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
	control_table.goal_velocity = 0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <control_table_init+0xb4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	669a      	str	r2, [r3, #104]	@ 0x68
	control_table.goal_position = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <control_table_init+0xb4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	2000002c 	.word	0x2000002c

08000e78 <process_packet>:
static void handle_read(uint8_t id, const uint8_t* params, uint16_t param_len);
static void handle_write(uint8_t id, const uint8_t* params, uint16_t param_len);


bool process_packet(uint8_t* packetBuffer, uint16_t packetLength)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
    uint16_t totalPacketSize = 7 + packetLength;
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	3307      	adds	r3, #7
 8000e88:	82fb      	strh	r3, [r7, #22]
    uint16_t received_crc = (uint16_t)(packetBuffer[totalPacketSize - 1] << 8 | packetBuffer[totalPacketSize - 2]);
 8000e8a:	8afb      	ldrh	r3, [r7, #22]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	8afb      	ldrh	r3, [r7, #22]
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	82bb      	strh	r3, [r7, #20]
    uint16_t calculated_crc = update_crc(0, packetBuffer, totalPacketSize - 2);
 8000eac:	8afb      	ldrh	r3, [r7, #22]
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f984 	bl	80011c4 <update_crc>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	827b      	strh	r3, [r7, #18]

    // CRC validation
    if (received_crc != calculated_crc) {
 8000ec0:	8aba      	ldrh	r2, [r7, #20]
 8000ec2:	8a7b      	ldrh	r3, [r7, #18]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d001      	beq.n	8000ecc <process_packet+0x54>
        return false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e042      	b.n	8000f52 <process_packet+0xda>
    }

    uint8_t id = packetBuffer[4];
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	747b      	strb	r3, [r7, #17]
    uint8_t instruction = packetBuffer[7];
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	79db      	ldrb	r3, [r3, #7]
 8000ed6:	743b      	strb	r3, [r7, #16]
    uint8_t* params = &packetBuffer[8]; 	// Instruction parameters start at index 8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3308      	adds	r3, #8
 8000edc:	60fb      	str	r3, [r7, #12]
    uint16_t param_len = packetLength - 3;  // Length of param field = Total Len - Inst(1) - CRC(2)
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	817b      	strh	r3, [r7, #10]


    if (id == DXL_ID)
 8000ee4:	7c7b      	ldrb	r3, [r7, #17]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d121      	bne.n	8000f2e <process_packet+0xb6>
    {
        switch (instruction)
 8000eea:	7c3b      	ldrb	r3, [r7, #16]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d016      	beq.n	8000f1e <process_packet+0xa6>
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	dc2a      	bgt.n	8000f4a <process_packet+0xd2>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d002      	beq.n	8000efe <process_packet+0x86>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d008      	beq.n	8000f0e <process_packet+0x96>
            case WRITE:
                handle_write(id, params, param_len);
                return true;

            default:
                break;
 8000efc:	e025      	b.n	8000f4a <process_packet+0xd2>
                handle_ping(id, params, param_len);
 8000efe:	897a      	ldrh	r2, [r7, #10]
 8000f00:	7c7b      	ldrb	r3, [r7, #17]
 8000f02:	68f9      	ldr	r1, [r7, #12]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f828 	bl	8000f5a <handle_ping>
                return true;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e021      	b.n	8000f52 <process_packet+0xda>
                handle_read(id, params, param_len);
 8000f0e:	897a      	ldrh	r2, [r7, #10]
 8000f10:	7c7b      	ldrb	r3, [r7, #17]
 8000f12:	68f9      	ldr	r1, [r7, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f839 	bl	8000f8c <handle_read>
                return true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e019      	b.n	8000f52 <process_packet+0xda>
                handle_write(id, params, param_len);
 8000f1e:	897a      	ldrh	r2, [r7, #10]
 8000f20:	7c7b      	ldrb	r3, [r7, #17]
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f86d 	bl	8001004 <handle_write>
                return true;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e011      	b.n	8000f52 <process_packet+0xda>
        }
    }

    else if (id == BROADCAST_ID)
 8000f2e:	7c7b      	ldrb	r3, [r7, #17]
 8000f30:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f32:	d10d      	bne.n	8000f50 <process_packet+0xd8>
    {
        switch (instruction)
 8000f34:	7c3b      	ldrb	r3, [r7, #16]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d109      	bne.n	8000f4e <process_packet+0xd6>
        {
            case PING:
                handle_ping(id, params, param_len);
 8000f3a:	897a      	ldrh	r2, [r7, #10]
 8000f3c:	7c7b      	ldrb	r3, [r7, #17]
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f80a 	bl	8000f5a <handle_ping>
                return true;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e003      	b.n	8000f52 <process_packet+0xda>
                break;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <process_packet+0xd8>

            default:
                break;
 8000f4e:	bf00      	nop
        }
    }

    return false;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <handle_ping>:
//==============================================================================
// Instruction Handlers (Implement your logic here)
//==============================================================================

static void handle_ping(uint8_t id, const uint8_t* params, uint16_t param_len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	6039      	str	r1, [r7, #0]
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	4613      	mov	r3, r2
 8000f68:	80bb      	strh	r3, [r7, #4]
    uint8_t response_params[3];
    response_params[0] = DXL_MODEL_NUMBER & 0xFF;
 8000f6a:	23b0      	movs	r3, #176	@ 0xb0
 8000f6c:	733b      	strb	r3, [r7, #12]
    response_params[1] = (DXL_MODEL_NUMBER >> 8) & 0xFF;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	737b      	strb	r3, [r7, #13]
    response_params[2] = DXL_FIRMWARE_VERSION;
 8000f72:	2326      	movs	r3, #38	@ 0x26
 8000f74:	73bb      	strb	r3, [r7, #14]
    send_status_packet(id, NO_ERR, response_params, 3);
 8000f76:	f107 020c 	add.w	r2, r7, #12
 8000f7a:	79f8      	ldrb	r0, [r7, #7]
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f000 f8a2 	bl	80010c8 <send_status_packet>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <handle_read>:

static void handle_read(uint8_t id, const uint8_t* params, uint16_t param_len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	80bb      	strh	r3, [r7, #4]
	// Reverse Little-Endian order
	uint16_t read_address = (params[1] << 8) | params[0]; // Address High Byte + Address Low Byte
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	81fb      	strh	r3, [r7, #14]
	uint16_t read_length  = (params[3] << 8) | params[2]; // Length High Byte + Length Low Byte
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3303      	adds	r3, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	81bb      	strh	r3, [r7, #12]

	// Address is out of range, send an error packet
	if ((read_address + read_length) > sizeof(ControlTable_t))
 8000fce:	89fa      	ldrh	r2, [r7, #14]
 8000fd0:	89bb      	ldrh	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2be7      	cmp	r3, #231	@ 0xe7
 8000fd6:	d906      	bls.n	8000fe6 <handle_read+0x5a>
	{
		send_status_packet(id, INSTRUCTION_ERR, NULL, 0);
 8000fd8:	79f8      	ldrb	r0, [r7, #7]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	f000 f872 	bl	80010c8 <send_status_packet>
		return;
 8000fe4:	e009      	b.n	8000ffa <handle_read+0x6e>
	}

	uint8_t* data_to_send = (uint8_t*)&control_table + read_address;
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <handle_read+0x74>)
 8000fea:	4413      	add	r3, r2
 8000fec:	60bb      	str	r3, [r7, #8]
	send_status_packet(id, NO_ERR, data_to_send, read_length);
 8000fee:	89bb      	ldrh	r3, [r7, #12]
 8000ff0:	79f8      	ldrb	r0, [r7, #7]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f000 f867 	bl	80010c8 <send_status_packet>
}
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000002c 	.word	0x2000002c

08001004 <handle_write>:

static void handle_write(uint8_t id, const uint8_t* params, uint16_t param_len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	80bb      	strh	r3, [r7, #4]
	uint16_t write_address = (params[1] << 8) | params[0];
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b21b      	sxth	r3, r3
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	82fb      	strh	r3, [r7, #22]
	uint16_t write_length = param_len - 2;
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	3b02      	subs	r3, #2
 8001030:	82bb      	strh	r3, [r7, #20]

	if ((write_address + write_length) > sizeof(ControlTable_t)) {
 8001032:	8afa      	ldrh	r2, [r7, #22]
 8001034:	8abb      	ldrh	r3, [r7, #20]
 8001036:	4413      	add	r3, r2
 8001038:	2be7      	cmp	r3, #231	@ 0xe7
 800103a:	d906      	bls.n	800104a <handle_write+0x46>
		send_status_packet(id, INSTRUCTION_ERR, NULL, 0);
 800103c:	79f8      	ldrb	r0, [r7, #7]
 800103e:	2300      	movs	r3, #0
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	f000 f840 	bl	80010c8 <send_status_packet>
		return;
 8001048:	e038      	b.n	80010bc <handle_write+0xb8>
	}

	// Handle torque enable
	if (write_address == offsetof(ControlTable_t, torque_enable) && write_length == 1)
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	2b40      	cmp	r3, #64	@ 0x40
 800104e:	d10f      	bne.n	8001070 <handle_write+0x6c>
 8001050:	8abb      	ldrh	r3, [r7, #20]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10c      	bne.n	8001070 <handle_write+0x6c>
	{
		uint8_t torque_value = params[2];
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3302      	adds	r3, #2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	74fb      	strb	r3, [r7, #19]

		if (torque_value == 1) {
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <handle_write+0x66>
			torque_enable();
 8001064:	f000 fd74 	bl	8001b50 <torque_enable>
	{
 8001068:	e022      	b.n	80010b0 <handle_write+0xac>
		} else {
			torque_disable();
 800106a:	f000 fda3 	bl	8001bb4 <torque_disable>
	{
 800106e:	e01f      	b.n	80010b0 <handle_write+0xac>
		}
	}
	// Handle operating mode
	else if (write_address == offsetof(ControlTable_t, operating_mode) && write_length == 1)
 8001070:	8afb      	ldrh	r3, [r7, #22]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d10c      	bne.n	8001090 <handle_write+0x8c>
 8001076:	8abb      	ldrh	r3, [r7, #20]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d109      	bne.n	8001090 <handle_write+0x8c>
	{
		uint8_t new_mode = params[2];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3302      	adds	r3, #2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	74bb      	strb	r3, [r7, #18]
		control_table.operating_mode = new_mode;
 8001084:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <handle_write+0xc0>)
 8001086:	7cbb      	ldrb	r3, [r7, #18]
 8001088:	72d3      	strb	r3, [r2, #11]
		reset_pid_controllers();
 800108a:	f000 fd3d 	bl	8001b08 <reset_pid_controllers>
	{
 800108e:	e00f      	b.n	80010b0 <handle_write+0xac>
	}

	else
	{
		if (write_length > 0) {
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <handle_write+0xac>
		    uint8_t* dest = (uint8_t*)&control_table + write_address;
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <handle_write+0xc0>)
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
		    const uint8_t* src = &params[2];
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
		    memcpy(dest, src, write_length); // The line in question
 80010a4:	8abb      	ldrh	r3, [r7, #20]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f006 fdd8 	bl	8007c60 <memcpy>
		}
	}

    send_status_packet(id, NO_ERR, NULL, 0);
 80010b0:	79f8      	ldrb	r0, [r7, #7]
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	f000 f806 	bl	80010c8 <send_status_packet>
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000002c 	.word	0x2000002c

080010c8 <send_status_packet>:

/**
 * @brief Constructs and sends a generic Status Packet.
 */
static void send_status_packet(uint8_t id, uint8_t error, uint8_t* params, uint16_t param_len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	603a      	str	r2, [r7, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	460b      	mov	r3, r1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	4613      	mov	r3, r2
 80010dc:	80bb      	strh	r3, [r7, #4]
    uint16_t packet_len_field = 1 + 1 + param_len + 2; // Instruction + Error + Params + CRC
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	81bb      	strh	r3, [r7, #12]

    txBuffer[0] = 0xFF;
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <send_status_packet+0xc4>)
 80010e6:	22ff      	movs	r2, #255	@ 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
    txBuffer[1] = 0xFF;
 80010ea:	4b28      	ldr	r3, [pc, #160]	@ (800118c <send_status_packet+0xc4>)
 80010ec:	22ff      	movs	r2, #255	@ 0xff
 80010ee:	705a      	strb	r2, [r3, #1]
    txBuffer[2] = 0xFD;
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <send_status_packet+0xc4>)
 80010f2:	22fd      	movs	r2, #253	@ 0xfd
 80010f4:	709a      	strb	r2, [r3, #2]
    txBuffer[3] = 0x00;
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <send_status_packet+0xc4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
    txBuffer[4] = id;
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <send_status_packet+0xc4>)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	7113      	strb	r3, [r2, #4]
    txBuffer[5] = packet_len_field & 0xFF;
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <send_status_packet+0xc4>)
 8001108:	715a      	strb	r2, [r3, #5]
    txBuffer[6] = (packet_len_field >> 8) & 0xFF;
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	b29b      	uxth	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <send_status_packet+0xc4>)
 8001114:	719a      	strb	r2, [r3, #6]
    txBuffer[7] = STATUS;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <send_status_packet+0xc4>)
 8001118:	2255      	movs	r2, #85	@ 0x55
 800111a:	71da      	strb	r2, [r3, #7]
    txBuffer[8] = error;
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <send_status_packet+0xc4>)
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	7213      	strb	r3, [r2, #8]

    for (uint16_t i = 0; i < param_len; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	81fb      	strh	r3, [r7, #14]
 8001126:	e00a      	b.n	800113e <send_status_packet+0x76>
        txBuffer[9 + i] = params[i];
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	441a      	add	r2, r3
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	3309      	adds	r3, #9
 8001132:	7811      	ldrb	r1, [r2, #0]
 8001134:	4a15      	ldr	r2, [pc, #84]	@ (800118c <send_status_packet+0xc4>)
 8001136:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < param_len; i++) {
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	3301      	adds	r3, #1
 800113c:	81fb      	strh	r3, [r7, #14]
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	d3f0      	bcc.n	8001128 <send_status_packet+0x60>
    }

    uint16_t crc_calc_len = 9 + param_len;
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	3309      	adds	r3, #9
 800114a:	817b      	strh	r3, [r7, #10]
    uint16_t crc = update_crc(0, txBuffer, crc_calc_len);
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	461a      	mov	r2, r3
 8001150:	490e      	ldr	r1, [pc, #56]	@ (800118c <send_status_packet+0xc4>)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f836 	bl	80011c4 <update_crc>
 8001158:	4603      	mov	r3, r0
 800115a:	813b      	strh	r3, [r7, #8]
    txBuffer[crc_calc_len] = crc & 0xFF;
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	893a      	ldrh	r2, [r7, #8]
 8001160:	b2d1      	uxtb	r1, r2
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <send_status_packet+0xc4>)
 8001164:	54d1      	strb	r1, [r2, r3]
    txBuffer[crc_calc_len + 1] = (crc >> 8) & 0xFF;
 8001166:	893b      	ldrh	r3, [r7, #8]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29a      	uxth	r2, r3
 800116c:	897b      	ldrh	r3, [r7, #10]
 800116e:	3301      	adds	r3, #1
 8001170:	b2d1      	uxtb	r1, r2
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <send_status_packet+0xc4>)
 8001174:	54d1      	strb	r1, [r2, r3]

    RS485_Transmit(txBuffer, crc_calc_len + 2);
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	3302      	adds	r3, #2
 800117a:	b29b      	uxth	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	4803      	ldr	r0, [pc, #12]	@ (800118c <send_status_packet+0xc4>)
 8001180:	f000 f806 	bl	8001190 <RS485_Transmit>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000114 	.word	0x20000114

08001190 <RS485_Transmit>:

void RS485_Transmit(uint8_t *pData, uint16_t size) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
    RS485_TX_ENABLE();
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <RS485_Transmit+0x2c>)
 80011a4:	f003 fb70 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_UART_Transmit_IT(&huart1, pData, size);
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	461a      	mov	r2, r3
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <RS485_Transmit+0x30>)
 80011b0:	f005 fdc6 	bl	8006d40 <HAL_UART_Transmit_IT>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020400 	.word	0x40020400
 80011c0:	2000037c 	.word	0x2000037c

080011c4 <update_crc>:

unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011d0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80011d4:	6019      	str	r1, [r3, #0]
 80011d6:	4611      	mov	r1, r2
 80011d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011dc:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80011e0:	4602      	mov	r2, r0
 80011e2:	801a      	strh	r2, [r3, #0]
 80011e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011e8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80011ec:	460a      	mov	r2, r1
 80011ee:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 80011f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011f8:	4a28      	ldr	r2, [pc, #160]	@ (800129c <update_crc+0xd8>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	4611      	mov	r1, r2
 80011fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001202:	461a      	mov	r2, r3
 8001204:	f006 fd2c 	bl	8007c60 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8001208:	2300      	movs	r3, #0
 800120a:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 800120e:	e031      	b.n	8001274 <update_crc+0xb0>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001210:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001214:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8001222:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8001226:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800122a:	6809      	ldr	r1, [r1, #0]
 800122c:	440a      	add	r2, r1
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4053      	eors	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800123a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800123e:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b21a      	sxth	r2, r3
 800124a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 800124e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001252:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001256:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4053      	eors	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001264:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001268:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 800126a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800126e:	3301      	adds	r3, #1
 8001270:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8001274:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001278:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800127c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3c4      	bcc.n	8001210 <update_crc+0x4c>
    }

    return crc_accum;
 8001286:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800128a:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800128e:	881b      	ldrh	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	08007c94 	.word	0x08007c94

080012a0 <current_pi_controller>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t current_pi_controller(void)
{
 80012a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
    // Error in amperes
    float current_error = (fabs(control_table.goal_current) - fabs(control_table.present_current)) / GAIN_SCALER;
 80012a8:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <current_pi_controller+0x1a0>)
 80012aa:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	@ 0x66
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8db 	bl	800046c <__aeabi_i2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <current_pi_controller+0x1a0>)
 80012c2:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8cf 	bl	800046c <__aeabi_i2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4690      	mov	r8, r2
 80012d4:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80012d8:	4642      	mov	r2, r8
 80012da:	464b      	mov	r3, r9
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ff76 	bl	80001d0 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b54      	ldr	r3, [pc, #336]	@ (8001444 <current_pi_controller+0x1a4>)
 80012f2:	f7ff fa4f 	bl	8000794 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fb79 	bl	80009f4 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	613b      	str	r3, [r7, #16]

    // Integral
    current_integral += current_error * ADC_DT;
 8001306:	edd7 7a04 	vldr	s15, [r7, #16]
 800130a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001448 <current_pi_controller+0x1a8>
 800130e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001312:	4b4e      	ldr	r3, [pc, #312]	@ (800144c <current_pi_controller+0x1ac>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <current_pi_controller+0x1ac>)
 800131e:	edc3 7a00 	vstr	s15, [r3]

    // Integral anti-windup
    if (current_integral > 50.0f) {
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <current_pi_controller+0x1ac>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001450 <current_pi_controller+0x1b0>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dd03      	ble.n	800133e <current_pi_controller+0x9e>
    	current_integral = 50.0f;
 8001336:	4b45      	ldr	r3, [pc, #276]	@ (800144c <current_pi_controller+0x1ac>)
 8001338:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <current_pi_controller+0x1b4>)
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e00c      	b.n	8001358 <current_pi_controller+0xb8>
    } else if (current_integral < -50.0f) {
 800133e:	4b43      	ldr	r3, [pc, #268]	@ (800144c <current_pi_controller+0x1ac>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001458 <current_pi_controller+0x1b8>
 8001348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	d502      	bpl.n	8001358 <current_pi_controller+0xb8>
    	current_integral = -50.0f;
 8001352:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <current_pi_controller+0x1ac>)
 8001354:	4a41      	ldr	r2, [pc, #260]	@ (800145c <current_pi_controller+0x1bc>)
 8001356:	601a      	str	r2, [r3, #0]
    }

    // PI output
    float p_term = current_error * (control_table.current_p_gain / GAIN_SCALER);
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <current_pi_controller+0x1a0>)
 800135a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800135e:	b29b      	uxth	r3, r3
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001460 <current_pi_controller+0x1c0>
 800136c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001370:	ed97 7a04 	vldr	s14, [r7, #16]
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	edc7 7a03 	vstr	s15, [r7, #12]
    float i_term = current_integral * (control_table.current_i_gain / GAIN_SCALER);
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <current_pi_controller+0x1a0>)
 800137e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001382:	b29b      	uxth	r3, r3
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001460 <current_pi_controller+0x1c0>
 8001390:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001394:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <current_pi_controller+0x1ac>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	edc7 7a02 	vstr	s15, [r7, #8]
    float pi_output = p_term + i_term;
 80013a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert target voltage to PWM duty cycle
    float pid = (pi_output / V_BUS) * PWM_MAX_PULSE;
 80013b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b6:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013be:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001464 <current_pi_controller+0x1c4>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Saturate
    if (pid > control_table.pwm_limit) {
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <current_pi_controller+0x1a0>)
 80013cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd09      	ble.n	80013fa <current_pi_controller+0x15a>
    	pid = control_table.pwm_limit;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <current_pi_controller+0x1a0>)
 80013e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	edc7 7a05 	vstr	s15, [r7, #20]
 80013f8:	e009      	b.n	800140e <current_pi_controller+0x16e>
    } else if (pid < 0.0f) {
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d502      	bpl.n	800140e <current_pi_controller+0x16e>
    	pid = 0.0f;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
    }

    if (pid < 30.0f) {
 800140e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001412:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d502      	bpl.n	8001426 <current_pi_controller+0x186>
    	pid = 0.0f;
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
    }

    return (uint16_t) pid;
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142e:	ee17 3a90 	vmov	r3, s15
 8001432:	b29b      	uxth	r3, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143e:	bf00      	nop
 8001440:	2000002c 	.word	0x2000002c
 8001444:	408f4000 	.word	0x408f4000
 8001448:	380bcf65 	.word	0x380bcf65
 800144c:	20000444 	.word	0x20000444
 8001450:	42480000 	.word	0x42480000
 8001454:	42480000 	.word	0x42480000
 8001458:	c2480000 	.word	0xc2480000
 800145c:	c2480000 	.word	0xc2480000
 8001460:	447a0000 	.word	0x447a0000
 8001464:	44960000 	.word	0x44960000

08001468 <velocity_pid_controller>:

float velocity_pid_controller(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
	// Error
	float velocity_error = VELOCITY_SCALER * (control_table.goal_velocity - control_table.present_velocity);
 800146e:	4b52      	ldr	r3, [pc, #328]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001470:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001472:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80015bc <velocity_pid_controller+0x154>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	edc7 7a02 	vstr	s15, [r7, #8]

	// P term
	float p_term = (control_table.velocity_p_gain / GAIN_SCALER) * velocity_error;
 800148e:	4b4a      	ldr	r3, [pc, #296]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001490:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001494:	b29b      	uxth	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80015c0 <velocity_pid_controller+0x158>
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	edc7 7a01 	vstr	s15, [r7, #4]

	// Integral
	velocity_integral += velocity_error * CONTROL_LOOP_DT;
 80014b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80015c4 <velocity_pid_controller+0x15c>
 80014ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014be:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	4b3f      	ldr	r3, [pc, #252]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]

	// Integral anti-windup
	if (velocity_integral > 100.0f) velocity_integral  = 100.0f;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80015cc <velocity_pid_controller+0x164>
 80014d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	dd02      	ble.n	80014e8 <velocity_pid_controller+0x80>
 80014e2:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014e4:	4a3a      	ldr	r2, [pc, #232]	@ (80015d0 <velocity_pid_controller+0x168>)
 80014e6:	601a      	str	r2, [r3, #0]
	if (velocity_integral < -100.0f) velocity_integral = -100.0f;
 80014e8:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80015d4 <velocity_pid_controller+0x16c>
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d502      	bpl.n	8001502 <velocity_pid_controller+0x9a>
 80014fc:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <velocity_pid_controller+0x160>)
 80014fe:	4a36      	ldr	r2, [pc, #216]	@ (80015d8 <velocity_pid_controller+0x170>)
 8001500:	601a      	str	r2, [r3, #0]

	// I term
	float i_term = (control_table.velocity_i_gain / GAIN_SCALER) * velocity_integral;
 8001502:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001504:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001508:	b29b      	uxth	r3, r3
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80015c0 <velocity_pid_controller+0x158>
 8001516:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800151a:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <velocity_pid_controller+0x160>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a00 	vstr	s15, [r7]

	float desired_current = (p_term + i_term) * GAIN_SCALER;
 8001528:	ed97 7a01 	vldr	s14, [r7, #4]
 800152c:	edd7 7a00 	vldr	s15, [r7]
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80015c0 <velocity_pid_controller+0x158>
 8001538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153c:	edc7 7a03 	vstr	s15, [r7, #12]

	// Saturate
	if (desired_current > control_table.current_limit) {
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001542:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001544:	b29b      	uxth	r3, r3
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	dd09      	ble.n	8001570 <velocity_pid_controller+0x108>
		desired_current = control_table.current_limit;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <velocity_pid_controller+0x150>)
 800155e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001560:	b29b      	uxth	r3, r3
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	edc7 7a03 	vstr	s15, [r7, #12]
 800156e:	e018      	b.n	80015a2 <velocity_pid_controller+0x13a>
	} else if (desired_current < -control_table.current_limit) {
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001572:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001574:	b29b      	uxth	r3, r3
 8001576:	425b      	negs	r3, r3
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ed97 7a03 	vldr	s14, [r7, #12]
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d509      	bpl.n	80015a2 <velocity_pid_controller+0x13a>
		desired_current = -control_table.current_limit;
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <velocity_pid_controller+0x150>)
 8001590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001592:	b29b      	uxth	r3, r3
 8001594:	425b      	negs	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159e:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return desired_current;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
}
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000002c 	.word	0x2000002c
 80015bc:	3e6a6000 	.word	0x3e6a6000
 80015c0:	447a0000 	.word	0x447a0000
 80015c4:	3a83126f 	.word	0x3a83126f
 80015c8:	2000044c 	.word	0x2000044c
 80015cc:	42c80000 	.word	0x42c80000
 80015d0:	42c80000 	.word	0x42c80000
 80015d4:	c2c80000 	.word	0xc2c80000
 80015d8:	c2c80000 	.word	0xc2c80000

080015dc <position_pid_controller>:

float position_pid_controller(void) {
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0

    float angle_error = control_table.goal_position - control_table.present_position;
 80015e2:	4b52      	ldr	r3, [pc, #328]	@ (800172c <position_pid_controller+0x150>)
 80015e4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80015e6:	4b51      	ldr	r3, [pc, #324]	@ (800172c <position_pid_controller+0x150>)
 80015e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	edc7 7a04 	vstr	s15, [r7, #16]

    float p_term = (control_table.position_p_gain / GAIN_SCALER) * angle_error;
 80015fa:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <position_pid_controller+0x150>)
 80015fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001600:	b29b      	uxth	r3, r3
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001730 <position_pid_controller+0x154>
 800160e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001612:	ed97 7a04 	vldr	s14, [r7, #16]
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]
    angle_integral += angle_error * CONTROL_LOOP_DT;
 800161e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001622:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001734 <position_pid_controller+0x158>
 8001626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800162a:	4b43      	ldr	r3, [pc, #268]	@ (8001738 <position_pid_controller+0x15c>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <position_pid_controller+0x15c>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
    float i_term = (control_table.position_i_gain / GAIN_SCALER) * angle_integral;
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <position_pid_controller+0x150>)
 800163c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001640:	b29b      	uxth	r3, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001730 <position_pid_controller+0x154>
 800164e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001652:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <position_pid_controller+0x15c>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	edc7 7a02 	vstr	s15, [r7, #8]

    float derivative = (angle_error - previous_angle_error) / CONTROL_LOOP_DT;
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <position_pid_controller+0x160>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed97 7a04 	vldr	s14, [r7, #16]
 800166a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166e:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001734 <position_pid_controller+0x158>
 8001672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001676:	edc7 7a01 	vstr	s15, [r7, #4]

    float d_term = (control_table.position_d_gain / GAIN_SCALER) * derivative;
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <position_pid_controller+0x150>)
 800167c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001680:	b29b      	uxth	r3, r3
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001730 <position_pid_controller+0x154>
 800168e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169a:	edc7 7a00 	vstr	s15, [r7]
    previous_angle_error = angle_error;
 800169e:	4a27      	ldr	r2, [pc, #156]	@ (800173c <position_pid_controller+0x160>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6013      	str	r3, [r2, #0]
    float desired_speed = p_term + i_term + d_term;
 80016a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	ed97 7a00 	vldr	s14, [r7]
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	edc7 7a05 	vstr	s15, [r7, #20]

    // Saturate
    if (desired_speed > control_table.velocity_limit) {
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <position_pid_controller+0x150>)
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd08      	ble.n	80016e8 <position_pid_controller+0x10c>
    	desired_speed = control_table.velocity_limit;
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <position_pid_controller+0x150>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	edc7 7a05 	vstr	s15, [r7, #20]
 80016e6:	e016      	b.n	8001716 <position_pid_controller+0x13a>
    } else if (desired_speed < -control_table.velocity_limit) {
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <position_pid_controller+0x150>)
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	425b      	negs	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d508      	bpl.n	8001716 <position_pid_controller+0x13a>
    	desired_speed = -control_table.velocity_limit;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <position_pid_controller+0x150>)
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	425b      	negs	r3, r3
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001712:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return desired_speed;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	ee07 3a90 	vmov	s15, r3
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000002c 	.word	0x2000002c
 8001730:	447a0000 	.word	0x447a0000
 8001734:	3a83126f 	.word	0x3a83126f
 8001738:	20000454 	.word	0x20000454
 800173c:	20000450 	.word	0x20000450

08001740 <convert_adc_to_current>:

void convert_adc_to_current(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
    // Calculate the signed difference from the calibrated zero-current ADC value
    int32_t adc_delta_a = (int32_t)adc_cur_a - (int32_t)current_a_offset_adc;
 8001746:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <convert_adc_to_current+0xa0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <convert_adc_to_current+0xa4>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    int32_t adc_delta_b = (int32_t)adc_cur_b - (int32_t)current_b_offset_adc;
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <convert_adc_to_current+0xa8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <convert_adc_to_current+0xac>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	613b      	str	r3, [r7, #16]
    int32_t adc_delta_c = (int32_t)adc_cur_c - (int32_t)current_c_offset_adc;
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <convert_adc_to_current+0xb0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <convert_adc_to_current+0xb4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	60fb      	str	r3, [r7, #12]

    // Convert the ADC count difference directly to current
    // I = (ADC_delta / ADC_Resolution) * V_ref / (Gain * R_shunt)
    float volts_per_adc_count = ADC_VREF / ADC_RESOLUTION;
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <convert_adc_to_current+0xb8>)
 8001778:	60bb      	str	r3, [r7, #8]
    float conversion_factor = volts_per_adc_count / (AD8417_GAIN * SHUNT_RESISTOR);
 800177a:	ed97 7a02 	vldr	s14, [r7, #8]
 800177e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80017fc <convert_adc_to_current+0xbc>
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	edc7 7a01 	vstr	s15, [r7, #4]

    current_a = (float)adc_delta_a * conversion_factor;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	edd7 7a01 	vldr	s15, [r7, #4]
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <convert_adc_to_current+0xc0>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
    current_b = (float)adc_delta_b * conversion_factor;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <convert_adc_to_current+0xc4>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
    current_c = (float)adc_delta_c * conversion_factor;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <convert_adc_to_current+0xc8>)
 80017ce:	edc3 7a00 	vstr	s15, [r3]
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000042c 	.word	0x2000042c
 80017e4:	2000043c 	.word	0x2000043c
 80017e8:	20000428 	.word	0x20000428
 80017ec:	2000043e 	.word	0x2000043e
 80017f0:	20000424 	.word	0x20000424
 80017f4:	20000440 	.word	0x20000440
 80017f8:	3a533333 	.word	0x3a533333
 80017fc:	3d75c290 	.word	0x3d75c290
 8001800:	20000430 	.word	0x20000430
 8001804:	20000434 	.word	0x20000434
 8001808:	20000438 	.word	0x20000438

0800180c <calibrate_current_sensors>:

void calibrate_current_sensors(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
    uint32_t offset_a_sum = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    uint32_t offset_b_sum = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
    uint32_t offset_c_sum = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

    HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001824:	483a      	ldr	r0, [pc, #232]	@ (8001910 <calibrate_current_sensors+0x104>)
 8001826:	f003 f82f 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800182a:	200a      	movs	r0, #10
 800182c:	f001 fce2 	bl	80031f4 <HAL_Delay>

    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e049      	b.n	80018ca <calibrate_current_sensors+0xbe>
    {
        // Read Phase C (ADC1_IN3)
        ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
        sConfig.Channel = ADC_CHANNEL_3;
 8001842:	2303      	movs	r3, #3
 8001844:	603b      	str	r3, [r7, #0]
        sConfig.Rank = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4831      	ldr	r0, [pc, #196]	@ (8001914 <calibrate_current_sensors+0x108>)
 8001850:	f002 f804 	bl	800385c <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 8001854:	482f      	ldr	r0, [pc, #188]	@ (8001914 <calibrate_current_sensors+0x108>)
 8001856:	f001 fd35 	bl	80032c4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 800185a:	210a      	movs	r1, #10
 800185c:	482d      	ldr	r0, [pc, #180]	@ (8001914 <calibrate_current_sensors+0x108>)
 800185e:	f001 fe36 	bl	80034ce <HAL_ADC_PollForConversion>
        offset_c_sum += HAL_ADC_GetValue(&hadc1);
 8001862:	482c      	ldr	r0, [pc, #176]	@ (8001914 <calibrate_current_sensors+0x108>)
 8001864:	f001 ffce 	bl	8003804 <HAL_ADC_GetValue>
 8001868:	4602      	mov	r2, r0
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]

        // Read Phase B (ADC1_IN14)
        sConfig.Channel = ADC_CHANNEL_14;
 8001870:	230e      	movs	r3, #14
 8001872:	603b      	str	r3, [r7, #0]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4826      	ldr	r0, [pc, #152]	@ (8001914 <calibrate_current_sensors+0x108>)
 800187a:	f001 ffef 	bl	800385c <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 800187e:	4825      	ldr	r0, [pc, #148]	@ (8001914 <calibrate_current_sensors+0x108>)
 8001880:	f001 fd20 	bl	80032c4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8001884:	210a      	movs	r1, #10
 8001886:	4823      	ldr	r0, [pc, #140]	@ (8001914 <calibrate_current_sensors+0x108>)
 8001888:	f001 fe21 	bl	80034ce <HAL_ADC_PollForConversion>
        offset_b_sum += HAL_ADC_GetValue(&hadc1);
 800188c:	4821      	ldr	r0, [pc, #132]	@ (8001914 <calibrate_current_sensors+0x108>)
 800188e:	f001 ffb9 	bl	8003804 <HAL_ADC_GetValue>
 8001892:	4602      	mov	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	4413      	add	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]

        // Read Phase A (ADC1_IN15)
        sConfig.Channel = ADC_CHANNEL_15;
 800189a:	230f      	movs	r3, #15
 800189c:	603b      	str	r3, [r7, #0]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <calibrate_current_sensors+0x108>)
 80018a4:	f001 ffda 	bl	800385c <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 80018a8:	481a      	ldr	r0, [pc, #104]	@ (8001914 <calibrate_current_sensors+0x108>)
 80018aa:	f001 fd0b 	bl	80032c4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 80018ae:	210a      	movs	r1, #10
 80018b0:	4818      	ldr	r0, [pc, #96]	@ (8001914 <calibrate_current_sensors+0x108>)
 80018b2:	f001 fe0c 	bl	80034ce <HAL_ADC_PollForConversion>
        offset_a_sum += HAL_ADC_GetValue(&hadc1);
 80018b6:	4817      	ldr	r0, [pc, #92]	@ (8001914 <calibrate_current_sensors+0x108>)
 80018b8:	f001 ffa4 	bl	8003804 <HAL_ADC_GetValue>
 80018bc:	4602      	mov	r2, r0
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3301      	adds	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018d0:	dbb1      	blt.n	8001836 <calibrate_current_sensors+0x2a>
    }
    HAL_ADC_Stop(&hadc1);
 80018d2:	4810      	ldr	r0, [pc, #64]	@ (8001914 <calibrate_current_sensors+0x108>)
 80018d4:	f001 fdc8 	bl	8003468 <HAL_ADC_Stop>

    // Calculate the average offset
    current_a_offset_adc = offset_a_sum / CALIBRATION_SAMPLES;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <calibrate_current_sensors+0x10c>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	09db      	lsrs	r3, r3, #7
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <calibrate_current_sensors+0x110>)
 80018e6:	801a      	strh	r2, [r3, #0]
    current_b_offset_adc = offset_b_sum / CALIBRATION_SAMPLES;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <calibrate_current_sensors+0x10c>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <calibrate_current_sensors+0x114>)
 80018f6:	801a      	strh	r2, [r3, #0]
    current_c_offset_adc = offset_c_sum / CALIBRATION_SAMPLES;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <calibrate_current_sensors+0x10c>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	09db      	lsrs	r3, r3, #7
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <calibrate_current_sensors+0x118>)
 8001906:	801a      	strh	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020800 	.word	0x40020800
 8001914:	20000214 	.word	0x20000214
 8001918:	10624dd3 	.word	0x10624dd3
 800191c:	2000043c 	.word	0x2000043c
 8001920:	2000043e 	.word	0x2000043e
 8001924:	20000440 	.word	0x20000440

08001928 <calculate_speed_from_capture>:


void calculate_speed_from_capture(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
    static float filtered_velocity_raw = 0.0f;
    static uint32_t last_valid_period_tick = 0;

    float pulse_period_s = latest_pulse_period_s;
 800192e:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <calculate_speed_from_capture+0x128>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]

    if (pulse_period_s > 0.0f) {
 8001934:	edd7 7a05 	vldr	s15, [r7, #20]
 8001938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	dd08      	ble.n	8001954 <calculate_speed_from_capture+0x2c>
        last_valid_period_tick = HAL_GetTick();
 8001942:	f001 fc4b 	bl	80031dc <HAL_GetTick>
 8001946:	4603      	mov	r3, r0
 8001948:	4a42      	ldr	r2, [pc, #264]	@ (8001a54 <calculate_speed_from_capture+0x12c>)
 800194a:	6013      	str	r3, [r2, #0]
        latest_pulse_period_s = 0.0f;
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <calculate_speed_from_capture+0x128>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GetTick() - last_valid_period_tick > 100) {
 8001954:	f001 fc42 	bl	80031dc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <calculate_speed_from_capture+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	@ 0x64
 8001962:	d91c      	bls.n	800199e <calculate_speed_from_capture+0x76>
        control_table.present_velocity = 0;
 8001964:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <calculate_speed_from_capture+0x130>)
 8001966:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8001970:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800197a:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8001984:	f893 2083 	ldrb.w	r2, [r3, #131]	@ 0x83
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
        filtered_velocity_raw = 0.0f;
 800198e:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <calculate_speed_from_capture+0x134>)
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
        is_first_capture = 1;
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <calculate_speed_from_capture+0x138>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
        return;
 800199c:	e054      	b.n	8001a48 <calculate_speed_from_capture+0x120>
    }

    if (pulse_period_s > 0.0f)
 800199e:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd4d      	ble.n	8001a48 <calculate_speed_from_capture+0x120>
    {
        float speed_rps = (1.0f / (ENCODER_PPR * 4.0f)) / pulse_period_s;
 80019ac:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001a64 <calculate_speed_from_capture+0x13c>
 80019b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b8:	edc7 7a04 	vstr	s15, [r7, #16]
        float new_speed_rpm = speed_rps * 60.0f;
 80019bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001a68 <calculate_speed_from_capture+0x140>
 80019c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c8:	edc7 7a03 	vstr	s15, [r7, #12]
        float new_velocity_raw = new_speed_rpm / VELOCITY_SCALER;
 80019cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001a6c <calculate_speed_from_capture+0x144>
 80019d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d8:	edc7 7a02 	vstr	s15, [r7, #8]

        const float alpha = 0.8f;
 80019dc:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <calculate_speed_from_capture+0x148>)
 80019de:	607b      	str	r3, [r7, #4]
        filtered_velocity_raw = (alpha * filtered_velocity_raw) + ((1.0f - alpha) * new_velocity_raw);
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <calculate_speed_from_capture+0x134>)
 80019e2:	ed93 7a00 	vldr	s14, [r3]
 80019e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80019fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <calculate_speed_from_capture+0x134>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]

        int8_t dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <calculate_speed_from_capture+0x14c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d101      	bne.n	8001a1e <calculate_speed_from_capture+0xf6>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e001      	b.n	8001a22 <calculate_speed_from_capture+0xfa>
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	70fb      	strb	r3, [r7, #3]

        control_table.present_velocity = (int32_t)(filtered_velocity_raw * dir);
 8001a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <calculate_speed_from_capture+0x134>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 2a90 	vmov	r2, s15
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <calculate_speed_from_capture+0x130>)
 8001a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
}
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000414 	.word	0x20000414
 8001a54:	2000045c 	.word	0x2000045c
 8001a58:	2000002c 	.word	0x2000002c
 8001a5c:	20000460 	.word	0x20000460
 8001a60:	20000000 	.word	0x20000000
 8001a64:	38800000 	.word	0x38800000
 8001a68:	42700000 	.word	0x42700000
 8001a6c:	3e6a6000 	.word	0x3e6a6000
 8001a70:	3f4ccccd 	.word	0x3f4ccccd
 8001a74:	200002a4 	.word	0x200002a4

08001a78 <update_angle_from_encoder>:

void update_angle_from_encoder(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
	int32_t current_position = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) / 4;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <update_angle_from_encoder+0x2c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da00      	bge.n	8001a8a <update_angle_from_encoder+0x12>
 8001a88:	3303      	adds	r3, #3
 8001a8a:	109b      	asrs	r3, r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
	control_table.present_position = current_position;
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <update_angle_from_encoder+0x30>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200002a4 	.word	0x200002a4
 8001aa8:	2000002c 	.word	0x2000002c

08001aac <read_hall_sensors>:


uint8_t read_hall_sensors(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	uint8_t hall_state = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	hall_state = HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin);	// Read Hall A (MSB)
 8001ab6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aba:	4812      	ldr	r0, [pc, #72]	@ (8001b04 <read_hall_sensors+0x58>)
 8001abc:	f002 fecc 	bl	8004858 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
	hall_state <<= 1;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
	hall_state |= HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin);	// Read Hall B
 8001aca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ace:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <read_hall_sensors+0x58>)
 8001ad0:	f002 fec2 	bl	8004858 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	71fb      	strb	r3, [r7, #7]
	hall_state <<= 1;
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	71fb      	strb	r3, [r7, #7]
	hall_state |= HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin);	// Read Hall C (LSB)
 8001ae4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae8:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <read_hall_sensors+0x58>)
 8001aea:	f002 feb5 	bl	8004858 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]

	return hall_state;	// A -> B -> C
 8001af8:	79fb      	ldrb	r3, [r7, #7]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020800 	.word	0x40020800

08001b08 <reset_pid_controllers>:

void reset_pid_controllers(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	current_integral = 0;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <reset_pid_controllers+0x38>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
	velocity_integral = 0;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <reset_pid_controllers+0x3c>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
	angle_integral = 0;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <reset_pid_controllers+0x40>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

	previous_velocity_error = 0.0f;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <reset_pid_controllers+0x44>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
	velocity_integral = 0.0f;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <reset_pid_controllers+0x3c>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000444 	.word	0x20000444
 8001b44:	2000044c 	.word	0x2000044c
 8001b48:	20000454 	.word	0x20000454
 8001b4c:	20000448 	.word	0x20000448

08001b50 <torque_enable>:

void torque_enable(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	control_table.torque_enable = 1;
 8001b56:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <torque_enable+0x50>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	reset_pid_controllers();
 8001b5e:	f7ff ffd3 	bl	8001b08 <reset_pid_controllers>

	direction = STOPPED;
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <torque_enable+0x54>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	701a      	strb	r2, [r3, #0]

    // Enable main driver.
    HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b6e:	480e      	ldr	r0, [pc, #56]	@ (8001ba8 <torque_enable+0x58>)
 8001b70:	f002 fe8a 	bl	8004888 <HAL_GPIO_WritePin>

    // Read initial hall state and set initial commutation
    uint8_t initial_hall_state = read_hall_sensors();
 8001b74:	f7ff ff9a 	bl	8001aac <read_hall_sensors>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
    sector = hall_to_sector_map_CW[initial_hall_state & 0x07];
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <torque_enable+0x5c>)
 8001b84:	5cd2      	ldrb	r2, [r2, r3]
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <torque_enable+0x60>)
 8001b88:	701a      	strb	r2, [r3, #0]
    sixStepCommutation(sector, 0);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <torque_enable+0x60>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f8d3 	bl	8001d3c <sixStepCommutation>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000002c 	.word	0x2000002c
 8001ba4:	20000458 	.word	0x20000458
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	08007e94 	.word	0x08007e94
 8001bb0:	200003c4 	.word	0x200003c4

08001bb4 <torque_disable>:

void torque_disable(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	control_table.torque_enable = 0;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <torque_disable+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// Disable main driver.
	HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc6:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <torque_disable+0x44>)
 8001bc8:	f002 fe5e 	bl	8004888 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bd2:	480a      	ldr	r0, [pc, #40]	@ (8001bfc <torque_disable+0x48>)
 8001bd4:	f002 fe58 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <torque_disable+0x48>)
 8001be0:	f002 fe52 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bea:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <torque_disable+0x48>)
 8001bec:	f002 fe4c 	bl	8004888 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000002c 	.word	0x2000002c
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <SetPhase_PWM>:
 * @brief Turns the High-Side ON (with PWM) and the Low-Side OFF.
 * @param phase: The motor phase (PHASE_A, PHASE_B, or PHASE_C).
 * @param pwm_duty: The PWM duty cycle value.
 */
void SetPhase_PWM(BldcPhase phase, uint16_t pwm_duty)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	460a      	mov	r2, r1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	80bb      	strh	r3, [r7, #4]
    switch(phase)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d01c      	beq.n	8001c50 <SetPhase_PWM+0x50>
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	dc25      	bgt.n	8001c66 <SetPhase_PWM+0x66>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <SetPhase_PWM+0x24>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d00b      	beq.n	8001c3a <SetPhase_PWM+0x3a>
        case PHASE_C:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_duty);
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
            break;
    }
}
 8001c22:	e020      	b.n	8001c66 <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <SetPhase_PWM+0x70>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	88ba      	ldrh	r2, [r7, #4]
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c32:	4810      	ldr	r0, [pc, #64]	@ (8001c74 <SetPhase_PWM+0x74>)
 8001c34:	f002 fe28 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001c38:	e015      	b.n	8001c66 <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_duty);
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <SetPhase_PWM+0x70>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	88ba      	ldrh	r2, [r7, #4]
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c48:	480a      	ldr	r0, [pc, #40]	@ (8001c74 <SetPhase_PWM+0x74>)
 8001c4a:	f002 fe1d 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001c4e:	e00a      	b.n	8001c66 <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_duty);
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <SetPhase_PWM+0x70>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	88ba      	ldrh	r2, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <SetPhase_PWM+0x74>)
 8001c60:	f002 fe12 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001c64:	bf00      	nop
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000025c 	.word	0x2000025c
 8001c74:	40020400 	.word	0x40020400

08001c78 <SetPhase_GND>:
/**
 * @brief Turns the High-Side OFF and the Low-Side ON.
 * @param phase: The motor phase.
 */
void SetPhase_GND(BldcPhase phase)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
    switch(phase)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d01c      	beq.n	8001cc2 <SetPhase_GND+0x4a>
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	dc25      	bgt.n	8001cd8 <SetPhase_GND+0x60>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <SetPhase_GND+0x1e>
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d00b      	beq.n	8001cac <SetPhase_GND+0x34>
        case PHASE_C:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
            break;
    }
}
 8001c94:	e020      	b.n	8001cd8 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <SetPhase_GND+0x68>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca4:	480f      	ldr	r0, [pc, #60]	@ (8001ce4 <SetPhase_GND+0x6c>)
 8001ca6:	f002 fdef 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001caa:	e015      	b.n	8001cd8 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <SetPhase_GND+0x68>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cba:	480a      	ldr	r0, [pc, #40]	@ (8001ce4 <SetPhase_GND+0x6c>)
 8001cbc:	f002 fde4 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001cc0:	e00a      	b.n	8001cd8 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <SetPhase_GND+0x68>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd0:	4804      	ldr	r0, [pc, #16]	@ (8001ce4 <SetPhase_GND+0x6c>)
 8001cd2:	f002 fdd9 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001cd6:	bf00      	nop
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000025c 	.word	0x2000025c
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <SetPhase_FLOAT>:
 * @brief Disconnects a phase (High-Z).
 * @note Turns BOTH the High-Side and Low-Side OFF.
 * @param phase: The motor phase (PHASE_A, PHASE_B, or PHASE_C).
 */
void SetPhase_FLOAT(BldcPhase phase)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
    switch(phase)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d014      	beq.n	8001d22 <SetPhase_FLOAT+0x3a>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	dc19      	bgt.n	8001d30 <SetPhase_FLOAT+0x48>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <SetPhase_FLOAT+0x1e>
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d007      	beq.n	8001d14 <SetPhase_FLOAT+0x2c>
            break;
        case PHASE_C:
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
            break;
    }
}
 8001d04:	e014      	b.n	8001d30 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0c:	480a      	ldr	r0, [pc, #40]	@ (8001d38 <SetPhase_FLOAT+0x50>)
 8001d0e:	f002 fdbb 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001d12:	e00d      	b.n	8001d30 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d1a:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <SetPhase_FLOAT+0x50>)
 8001d1c:	f002 fdb4 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001d20:	e006      	b.n	8001d30 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d28:	4803      	ldr	r0, [pc, #12]	@ (8001d38 <SetPhase_FLOAT+0x50>)
 8001d2a:	f002 fdad 	bl	8004888 <HAL_GPIO_WritePin>
            break;
 8001d2e:	bf00      	nop
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40020400 	.word	0x40020400

08001d3c <sixStepCommutation>:

void sixStepCommutation(uint8_t sector, uint16_t pwm_duty_cycle) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	460a      	mov	r2, r1
 8001d46:	71fb      	strb	r3, [r7, #7]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	80bb      	strh	r3, [r7, #4]
	switch (sector) {
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d857      	bhi.n	8001e04 <sixStepCommutation+0xc8>
 8001d54:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <sixStepCommutation+0x20>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001d8d 	.word	0x08001d8d
 8001d64:	08001da5 	.word	0x08001da5
 8001d68:	08001dbd 	.word	0x08001dbd
 8001d6c:	08001dd5 	.word	0x08001dd5
 8001d70:	08001ded 	.word	0x08001ded
		case SECTOR_1: // Hall state: 5
			SetPhase_PWM(PHASE_B, pwm_duty_cycle);
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	4619      	mov	r1, r3
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff ff41 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_C);
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7ff ff7a 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_A);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ffaf 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001d8a:	e045      	b.n	8001e18 <sixStepCommutation+0xdc>

		case SECTOR_2: // Hall state: 4
			SetPhase_PWM(PHASE_B, pwm_duty_cycle);
 8001d8c:	88bb      	ldrh	r3, [r7, #4]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff ff35 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_A);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff ff6e 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_C);
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7ff ffa3 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001da2:	e039      	b.n	8001e18 <sixStepCommutation+0xdc>

		case SECTOR_3: // Hall state: 6
			SetPhase_PWM(PHASE_C, pwm_duty_cycle);
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff ff29 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_A);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff ff62 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_B);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff ff97 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001dba:	e02d      	b.n	8001e18 <sixStepCommutation+0xdc>

		case SECTOR_4: // Hall state: 2
			SetPhase_PWM(PHASE_C, pwm_duty_cycle);
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7ff ff1d 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_B);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff ff56 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_A);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff ff8b 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001dd2:	e021      	b.n	8001e18 <sixStepCommutation+0xdc>

		case SECTOR_5: // Hall state: 3
			SetPhase_PWM(PHASE_A, pwm_duty_cycle);
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff ff11 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_B);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff ff4a 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_C);
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff ff7f 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001dea:	e015      	b.n	8001e18 <sixStepCommutation+0xdc>

		case SECTOR_6: // Hall state: 1
			SetPhase_PWM(PHASE_A, pwm_duty_cycle);
 8001dec:	88bb      	ldrh	r3, [r7, #4]
 8001dee:	4619      	mov	r1, r3
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ff05 	bl	8001c00 <SetPhase_PWM>
			SetPhase_GND(PHASE_C);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f7ff ff3e 	bl	8001c78 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_B);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff ff73 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001e02:	e009      	b.n	8001e18 <sixStepCommutation+0xdc>

		default:
			SetPhase_FLOAT(PHASE_A);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff ff6f 	bl	8001ce8 <SetPhase_FLOAT>
			SetPhase_FLOAT(PHASE_B);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff ff6c 	bl	8001ce8 <SetPhase_FLOAT>
			SetPhase_FLOAT(PHASE_C);
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff ff69 	bl	8001ce8 <SetPhase_FLOAT>
			break;
 8001e16:	bf00      	nop
	}
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <getActivePhaseCurrent>:

void getActivePhaseCurrent(void)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	float current_magnitude = 0.0f;
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]

	switch (sector) {
 8001e2c:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <getActivePhaseCurrent+0xe8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d82c      	bhi.n	8001e90 <getActivePhaseCurrent+0x70>
 8001e36:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <getActivePhaseCurrent+0x1c>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e7d 	.word	0x08001e7d
 8001e40:	08001e55 	.word	0x08001e55
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e69 	.word	0x08001e69
 8001e4c:	08001e69 	.word	0x08001e69
 8001e50:	08001e7d 	.word	0x08001e7d
			case SECTOR_2:
			case SECTOR_3:
				current_magnitude = current_a * GAIN_SCALER;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <getActivePhaseCurrent+0xec>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001f10 <getActivePhaseCurrent+0xf0>
 8001e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e62:	edc7 7a01 	vstr	s15, [r7, #4]
				break;
 8001e66:	e01f      	b.n	8001ea8 <getActivePhaseCurrent+0x88>

			case SECTOR_4:
			case SECTOR_5:
				current_magnitude = current_b * GAIN_SCALER;
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <getActivePhaseCurrent+0xf4>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001f10 <getActivePhaseCurrent+0xf0>
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	edc7 7a01 	vstr	s15, [r7, #4]
				break;
 8001e7a:	e015      	b.n	8001ea8 <getActivePhaseCurrent+0x88>

			case SECTOR_1:
			case SECTOR_6:
				current_magnitude = current_c * GAIN_SCALER;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <getActivePhaseCurrent+0xf8>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001f10 <getActivePhaseCurrent+0xf0>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	edc7 7a01 	vstr	s15, [r7, #4]
				break;
 8001e8e:	e00b      	b.n	8001ea8 <getActivePhaseCurrent+0x88>

			default:
				control_table.present_current = 0.0f;
 8001e90:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <getActivePhaseCurrent+0xfc>)
 8001e92:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001e9c:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
				break;
 8001ea6:	bf00      	nop
		}

	if (direction == CW) {
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <getActivePhaseCurrent+0x100>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <getActivePhaseCurrent+0xbe>
		control_table.present_current = -fabs(current_magnitude);
 8001eb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb4:	eef0 7ae7 	vabs.f32	s15, s15
 8001eb8:	ee17 0a90 	vmov	r0, s15
 8001ebc:	f7fe fae8 	bl	8000490 <__aeabi_f2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001eca:	4620      	mov	r0, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	f7fe fd49 	bl	8000964 <__aeabi_d2iz>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <getActivePhaseCurrent+0xfc>)
 8001ed8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	} else if (direction == CCW) {
		control_table.present_current = fabs(current_magnitude);
	}
}
 8001edc:	e00f      	b.n	8001efe <getActivePhaseCurrent+0xde>
	} else if (direction == CCW) {
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <getActivePhaseCurrent+0x100>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10b      	bne.n	8001efe <getActivePhaseCurrent+0xde>
		control_table.present_current = fabs(current_magnitude);
 8001ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eea:	eef0 7ae7 	vabs.f32	s15, s15
 8001eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef2:	ee17 3a90 	vmov	r3, s15
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <getActivePhaseCurrent+0xfc>)
 8001efa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003c4 	.word	0x200003c4
 8001f0c:	20000430 	.word	0x20000430
 8001f10:	447a0000 	.word	0x447a0000
 8001f14:	20000434 	.word	0x20000434
 8001f18:	20000438 	.word	0x20000438
 8001f1c:	2000002c 	.word	0x2000002c
 8001f20:	20000458 	.word	0x20000458

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f28:	f001 f8f2 	bl	8003110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2c:	f000 f87a 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f30:	f000 fb60 	bl	80025f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001f34:	f000 f972 	bl	800221c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f38:	f000 fa38 	bl	80023ac <MX_TIM2_Init>
  MX_ADC1_Init();
 8001f3c:	f000 f8da 	bl	80020f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001f40:	f000 fa88 	bl	8002454 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f44:	f000 fb2c 	bl	80025a0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001f48:	f000 faf4 	bl	8002534 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialize control table variables
  control_table_init();
 8001f4c:	f7fe ff38 	bl	8000dc0 <control_table_init>

  // Start as receive mode
  RS485_RX_ENABLE();
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f56:	4828      	ldr	r0, [pc, #160]	@ (8001ff8 <main+0xd4>)
 8001f58:	f002 fc96 	bl	8004888 <HAL_GPIO_WritePin>

  // Read one bytes of data in the interrupt mode
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4927      	ldr	r1, [pc, #156]	@ (8001ffc <main+0xd8>)
 8001f60:	4827      	ldr	r0, [pc, #156]	@ (8002000 <main+0xdc>)
 8001f62:	f004 ff23 	bl	8006dac <HAL_UART_Receive_IT>

  // Calibrate current adc offset
  calibrate_current_sensors();
 8001f66:	f7ff fc51 	bl	800180c <calibrate_current_sensors>

  torque_enable();
 8001f6a:	f7ff fdf1 	bl	8001b50 <torque_enable>

  // Start timer1
  HAL_TIM_Base_Start(&htim1);
 8001f6e:	4825      	ldr	r0, [pc, #148]	@ (8002004 <main+0xe0>)
 8001f70:	f003 f94c 	bl	800520c <HAL_TIM_Base_Start>

  // Start three phase PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f74:	2100      	movs	r1, #0
 8001f76:	4823      	ldr	r0, [pc, #140]	@ (8002004 <main+0xe0>)
 8001f78:	f003 fa7a 	bl	8005470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4821      	ldr	r0, [pc, #132]	@ (8002004 <main+0xe0>)
 8001f80:	f003 fa76 	bl	8005470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001f84:	2108      	movs	r1, #8
 8001f86:	481f      	ldr	r0, [pc, #124]	@ (8002004 <main+0xe0>)
 8001f88:	f003 fa72 	bl	8005470 <HAL_TIM_PWM_Start>

  // Start ADC interrupt timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001f8c:	210c      	movs	r1, #12
 8001f8e:	481d      	ldr	r0, [pc, #116]	@ (8002004 <main+0xe0>)
 8001f90:	f003 fa6e 	bl	8005470 <HAL_TIM_PWM_Start>

  // ADC injected mode with interrupt
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001f94:	481c      	ldr	r0, [pc, #112]	@ (8002008 <main+0xe4>)
 8001f96:	f001 fe7f 	bl	8003c98 <HAL_ADCEx_InjectedStart_IT>

  // Start Timer2 as Encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001f9a:	213c      	movs	r1, #60	@ 0x3c
 8001f9c:	481b      	ldr	r0, [pc, #108]	@ (800200c <main+0xe8>)
 8001f9e:	f003 fd57 	bl	8005a50 <HAL_TIM_Encoder_Start>

  // Start Timer3 for input capture timer
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	481a      	ldr	r0, [pc, #104]	@ (8002010 <main+0xec>)
 8001fa6:	f003 fb85 	bl	80056b4 <HAL_TIM_IC_Start_IT>

  // Start Timer4 for velocity loop
  HAL_TIM_Base_Start_IT(&htim6);
 8001faa:	481a      	ldr	r0, [pc, #104]	@ (8002014 <main+0xf0>)
 8001fac:	f003 f996 	bl	80052dc <HAL_TIM_Base_Start_IT>

  torque_disable();
 8001fb0:	f7ff fe00 	bl	8001bb4 <torque_disable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(FAULT_GPIO_Port, FAULT_Pin) == GPIO_PIN_RESET) {
 8001fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fb8:	480f      	ldr	r0, [pc, #60]	@ (8001ff8 <main+0xd4>)
 8001fba:	f002 fc4d 	bl	8004858 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <main+0xaa>
		  motor_fault = 1;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <main+0xf4>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
		  torque_disable();
 8001fca:	f7ff fdf3 	bl	8001bb4 <torque_disable>
	  }

	  if (control_table.led == 1) {
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <main+0xf8>)
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d106      	bne.n	8001fe8 <main+0xc4>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe0:	480f      	ldr	r0, [pc, #60]	@ (8002020 <main+0xfc>)
 8001fe2:	f002 fc51 	bl	8004888 <HAL_GPIO_WritePin>
 8001fe6:	e7e5      	b.n	8001fb4 <main+0x90>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fee:	480c      	ldr	r0, [pc, #48]	@ (8002020 <main+0xfc>)
 8001ff0:	f002 fc4a 	bl	8004888 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(FAULT_GPIO_Port, FAULT_Pin) == GPIO_PIN_RESET) {
 8001ff4:	e7de      	b.n	8001fb4 <main+0x90>
 8001ff6:	bf00      	nop
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	200003c6 	.word	0x200003c6
 8002000:	2000037c 	.word	0x2000037c
 8002004:	2000025c 	.word	0x2000025c
 8002008:	20000214 	.word	0x20000214
 800200c:	200002a4 	.word	0x200002a4
 8002010:	200002ec 	.word	0x200002ec
 8002014:	20000334 	.word	0x20000334
 8002018:	200003c5 	.word	0x200003c5
 800201c:	2000002c 	.word	0x2000002c
 8002020:	40020800 	.word	0x40020800

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	@ 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	2230      	movs	r2, #48	@ 0x30
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f005 fde8 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <SystemClock_Config+0xc8>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	4a26      	ldr	r2, [pc, #152]	@ (80020ec <SystemClock_Config+0xc8>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	@ 0x40
 8002058:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <SystemClock_Config+0xc8>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <SystemClock_Config+0xcc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a20      	ldr	r2, [pc, #128]	@ (80020f0 <SystemClock_Config+0xcc>)
 800206e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <SystemClock_Config+0xcc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002084:	2301      	movs	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002088:	2310      	movs	r3, #16
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208c:	2302      	movs	r3, #2
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002094:	2308      	movs	r3, #8
 8002096:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002098:	2348      	movs	r3, #72	@ 0x48
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800209c:	2302      	movs	r3, #2
 800209e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020a0:	2304      	movs	r3, #4
 80020a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fc07 	bl	80048bc <HAL_RCC_OscConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020b4:	f000 fdae 	bl	8002c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b8:	230f      	movs	r3, #15
 80020ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fe69 	bl	8004dac <HAL_RCC_ClockConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020e0:	f000 fd98 	bl	8002c14 <Error_Handler>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3750      	adds	r7, #80	@ 0x50
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000

080020f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	@ 0x30
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	f107 0320 	add.w	r3, r7, #32
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2220      	movs	r2, #32
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fd7a 	bl	8007c08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002114:	4b3e      	ldr	r3, [pc, #248]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002116:	4a3f      	ldr	r2, [pc, #252]	@ (8002214 <MX_ADC1_Init+0x120>)
 8002118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800211a:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <MX_ADC1_Init+0x11c>)
 800211c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002128:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <MX_ADC1_Init+0x11c>)
 800212a:	2201      	movs	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002130:	2200      	movs	r2, #0
 8002132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <MX_ADC1_Init+0x11c>)
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002142:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002144:	4a34      	ldr	r2, [pc, #208]	@ (8002218 <MX_ADC1_Init+0x124>)
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <MX_ADC1_Init+0x11c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800214e:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002150:	2201      	movs	r2, #1
 8002152:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215c:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <MX_ADC1_Init+0x11c>)
 800215e:	2201      	movs	r2, #1
 8002160:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002162:	482b      	ldr	r0, [pc, #172]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002164:	f001 f86a 	bl	800323c <HAL_ADC_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800216e:	f000 fd51 	bl	8002c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002172:	230f      	movs	r3, #15
 8002174:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800217a:	2301      	movs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	4619      	mov	r1, r3
 8002184:	4822      	ldr	r0, [pc, #136]	@ (8002210 <MX_ADC1_Init+0x11c>)
 8002186:	f001 fb69 	bl	800385c <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002190:	f000 fd40 	bl	8002c14 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002194:	2303      	movs	r3, #3
 8002196:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002198:	2301      	movs	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800219c:	2303      	movs	r3, #3
 800219e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES;
 80021a0:	2302      	movs	r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80021a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021a8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80021aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ae:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	4619      	mov	r1, r3
 80021c0:	4813      	ldr	r0, [pc, #76]	@ (8002210 <MX_ADC1_Init+0x11c>)
 80021c2:	f001 fe73 	bl	8003eac <HAL_ADCEx_InjectedConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80021cc:	f000 fd22 	bl	8002c14 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80021d0:	230e      	movs	r3, #14
 80021d2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	@ (8002210 <MX_ADC1_Init+0x11c>)
 80021de:	f001 fe65 	bl	8003eac <HAL_ADCEx_InjectedConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80021e8:	f000 fd14 	bl	8002c14 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 80021ec:	230f      	movs	r3, #15
 80021ee:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80021f0:	2303      	movs	r3, #3
 80021f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_ADC1_Init+0x11c>)
 80021fa:	f001 fe57 	bl	8003eac <HAL_ADCEx_InjectedConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002204:	f000 fd06 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000214 	.word	0x20000214
 8002214:	40012000 	.word	0x40012000
 8002218:	0f000001 	.word	0x0f000001

0800221c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b096      	sub	sp, #88	@ 0x58
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f005 fcd7 	bl	8007c08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800225a:	4b52      	ldr	r3, [pc, #328]	@ (80023a4 <MX_TIM1_Init+0x188>)
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <MX_TIM1_Init+0x18c>)
 800225e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002266:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002268:	2220      	movs	r2, #32
 800226a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1200-1;
 800226c:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <MX_TIM1_Init+0x188>)
 800226e:	f240 42af 	movw	r2, #1199	@ 0x4af
 8002272:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800227a:	4b4a      	ldr	r3, [pc, #296]	@ (80023a4 <MX_TIM1_Init+0x188>)
 800227c:	2200      	movs	r2, #0
 800227e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b48      	ldr	r3, [pc, #288]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002286:	4847      	ldr	r0, [pc, #284]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002288:	f002 ff70 	bl	800516c <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002292:	f000 fcbf 	bl	8002c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800229a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80022a0:	4619      	mov	r1, r3
 80022a2:	4840      	ldr	r0, [pc, #256]	@ (80023a4 <MX_TIM1_Init+0x188>)
 80022a4:	f003 feb0 	bl	8006008 <HAL_TIM_ConfigClockSource>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ae:	f000 fcb1 	bl	8002c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022b2:	483c      	ldr	r0, [pc, #240]	@ (80023a4 <MX_TIM1_Init+0x188>)
 80022b4:	f003 f882 	bl	80053bc <HAL_TIM_PWM_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022be:	f000 fca9 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022c2:	2320      	movs	r3, #32
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022ce:	4619      	mov	r1, r3
 80022d0:	4834      	ldr	r0, [pc, #208]	@ (80023a4 <MX_TIM1_Init+0x188>)
 80022d2:	f004 fc03 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022dc:	f000 fc9a 	bl	8002c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e0:	2360      	movs	r3, #96	@ 0x60
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	4619      	mov	r1, r3
 8002304:	4827      	ldr	r0, [pc, #156]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002306:	f003 fdbd 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002310:	f000 fc80 	bl	8002c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002318:	2204      	movs	r2, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4821      	ldr	r0, [pc, #132]	@ (80023a4 <MX_TIM1_Init+0x188>)
 800231e:	f003 fdb1 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002328:	f000 fc74 	bl	8002c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	2208      	movs	r2, #8
 8002332:	4619      	mov	r1, r3
 8002334:	481b      	ldr	r0, [pc, #108]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002336:	f003 fda5 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002340:	f000 fc68 	bl	8002c14 <Error_Handler>
  }
  sConfigOC.Pulse = 1199;
 8002344:	f240 43af 	movw	r3, #1199	@ 0x4af
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800234e:	220c      	movs	r2, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4814      	ldr	r0, [pc, #80]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002354:	f003 fd96 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800235e:	f000 fc59 	bl	8002c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002376:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800237a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002386:	f004 fc25 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8002390:	f000 fc40 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <MX_TIM1_Init+0x188>)
 8002396:	f000 fd9d 	bl	8002ed4 <HAL_TIM_MspPostInit>

}
 800239a:	bf00      	nop
 800239c:	3758      	adds	r7, #88	@ 0x58
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000025c 	.word	0x2000025c
 80023a8:	40010000 	.word	0x40010000

080023ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	@ 0x30
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f005 fc24 	bl	8007c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023de:	f04f 32ff 	mov.w	r2, #4294967295
 80023e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_TIM2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023f0:	2303      	movs	r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	4619      	mov	r1, r3
 800241a:	480d      	ldr	r0, [pc, #52]	@ (8002450 <MX_TIM2_Init+0xa4>)
 800241c:	f003 fa72 	bl	8005904 <HAL_TIM_Encoder_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002426:	f000 fbf5 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	@ (8002450 <MX_TIM2_Init+0xa4>)
 8002438:	f004 fb50 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002442:	f000 fbe7 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	@ 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200002a4 	.word	0x200002a4

08002454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0318 	add.w	r3, r7, #24
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <MX_TIM3_Init+0xd8>)
 8002480:	4a2b      	ldr	r2, [pc, #172]	@ (8002530 <MX_TIM3_Init+0xdc>)
 8002482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <MX_TIM3_Init+0xd8>)
 8002486:	2247      	movs	r2, #71	@ 0x47
 8002488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248a:	4b28      	ldr	r3, [pc, #160]	@ (800252c <MX_TIM3_Init+0xd8>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002490:	4b26      	ldr	r3, [pc, #152]	@ (800252c <MX_TIM3_Init+0xd8>)
 8002492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002498:	4b24      	ldr	r3, [pc, #144]	@ (800252c <MX_TIM3_Init+0xd8>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <MX_TIM3_Init+0xd8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024a4:	4821      	ldr	r0, [pc, #132]	@ (800252c <MX_TIM3_Init+0xd8>)
 80024a6:	f002 fe61 	bl	800516c <HAL_TIM_Base_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 fbb0 	bl	8002c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ba:	f107 0318 	add.w	r3, r7, #24
 80024be:	4619      	mov	r1, r3
 80024c0:	481a      	ldr	r0, [pc, #104]	@ (800252c <MX_TIM3_Init+0xd8>)
 80024c2:	f003 fda1 	bl	8006008 <HAL_TIM_ConfigClockSource>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024cc:	f000 fba2 	bl	8002c14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80024d0:	4816      	ldr	r0, [pc, #88]	@ (800252c <MX_TIM3_Init+0xd8>)
 80024d2:	f003 f895 	bl	8005600 <HAL_TIM_IC_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024dc:	f000 fb9a 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4619      	mov	r1, r3
 80024ee:	480f      	ldr	r0, [pc, #60]	@ (800252c <MX_TIM3_Init+0xd8>)
 80024f0:	f004 faf4 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80024fa:	f000 fb8b 	bl	8002c14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002502:	2301      	movs	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_TIM3_Init+0xd8>)
 8002516:	f003 fc19 	bl	8005d4c <HAL_TIM_IC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002520:	f000 fb78 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	@ 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200002ec 	.word	0x200002ec
 8002530:	40000400 	.word	0x40000400

08002534 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253a:	463b      	mov	r3, r7
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_TIM6_Init+0x64>)
 8002544:	4a15      	ldr	r2, [pc, #84]	@ (800259c <MX_TIM6_Init+0x68>)
 8002546:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720-1;
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <MX_TIM6_Init+0x64>)
 800254a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800254e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_TIM6_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <MX_TIM6_Init+0x64>)
 8002558:	2263      	movs	r2, #99	@ 0x63
 800255a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_TIM6_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002562:	480d      	ldr	r0, [pc, #52]	@ (8002598 <MX_TIM6_Init+0x64>)
 8002564:	f002 fe02 	bl	800516c <HAL_TIM_Base_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800256e:	f000 fb51 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	4806      	ldr	r0, [pc, #24]	@ (8002598 <MX_TIM6_Init+0x64>)
 8002580:	f004 faac 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800258a:	f000 fb43 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000334 	.word	0x20000334
 800259c:	40001000 	.word	0x40001000

080025a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	@ (80025f0 <MX_USART1_UART_Init+0x50>)
 80025a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025c6:	220c      	movs	r2, #12
 80025c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <MX_USART1_UART_Init+0x4c>)
 80025d8:	f004 fb62 	bl	8006ca0 <HAL_UART_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025e2:	f000 fb17 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000037c 	.word	0x2000037c
 80025f0:	40011000 	.word	0x40011000

080025f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a37      	ldr	r2, [pc, #220]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a29      	ldr	r2, [pc, #164]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b27      	ldr	r3, [pc, #156]	@ (80026f0 <MX_GPIO_Init+0xfc>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVE_EN3_Pin|LED_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8002664:	4823      	ldr	r0, [pc, #140]	@ (80026f4 <MX_GPIO_Init+0x100>)
 8002666:	f002 f90f 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INL1_EN1_Pin|INL2_EN2_Pin|INL3_EN3_Pin|RS485_TX_EN_Pin, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002670:	4821      	ldr	r0, [pc, #132]	@ (80026f8 <MX_GPIO_Init+0x104>)
 8002672:	f002 f909 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRIVE_EN3_Pin LED_Pin */
  GPIO_InitStruct.Pin = DRIVE_EN3_Pin|LED_Pin;
 8002676:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800267a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	4619      	mov	r1, r3
 800268e:	4819      	ldr	r0, [pc, #100]	@ (80026f4 <MX_GPIO_Init+0x100>)
 8002690:	f001 ff46 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8002694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <MX_GPIO_Init+0x104>)
 80026aa:	f001 ff39 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : INL1_EN1_Pin INL2_EN2_Pin INL3_EN3_Pin RS485_TX_EN_Pin */
  GPIO_InitStruct.Pin = INL1_EN1_Pin|INL2_EN2_Pin|INL3_EN3_Pin|RS485_TX_EN_Pin;
 80026ae:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80026b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4619      	mov	r1, r3
 80026c6:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <MX_GPIO_Init+0x104>)
 80026c8:	f001 ff2a 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80026cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <MX_GPIO_Init+0x100>)
 80026e2:	f001 ff1d 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020400 	.word	0x40020400

080026fc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// After TX complete, switch back to RX mode
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_UART_TxCpltCallback+0x30>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10a      	bne.n	8002724 <HAL_UART_TxCpltCallback+0x28>
        RS485_RX_ENABLE();
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002714:	4806      	ldr	r0, [pc, #24]	@ (8002730 <HAL_UART_TxCpltCallback+0x34>)
 8002716:	f002 f8b7 	bl	8004888 <HAL_GPIO_WritePin>
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 800271a:	2201      	movs	r2, #1
 800271c:	4905      	ldr	r1, [pc, #20]	@ (8002734 <HAL_UART_TxCpltCallback+0x38>)
 800271e:	4806      	ldr	r0, [pc, #24]	@ (8002738 <HAL_UART_TxCpltCallback+0x3c>)
 8002720:	f004 fb44 	bl	8006dac <HAL_UART_Receive_IT>
    }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40011000 	.word	0x40011000
 8002730:	40020400 	.word	0x40020400
 8002734:	200003c6 	.word	0x200003c6
 8002738:	2000037c 	.word	0x2000037c

0800273c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_UART_RxCpltCallback+0x19c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	f040 80c0 	bne.w	80028d0 <HAL_UART_RxCpltCallback+0x194>

    	switch (rxState)
 8002750:	4b62      	ldr	r3, [pc, #392]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b04      	cmp	r3, #4
 8002756:	f200 80a9 	bhi.w	80028ac <HAL_UART_RxCpltCallback+0x170>
 800275a:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <HAL_UART_RxCpltCallback+0x24>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002775 	.word	0x08002775
 8002764:	0800279d 	.word	0x0800279d
 8002768:	080027d1 	.word	0x080027d1
 800276c:	08002805 	.word	0x08002805
 8002770:	08002839 	.word	0x08002839
    	{
    		case STATE_WAIT_HEADER_1:
    			if (rxByte == 0xFF) {
 8002774:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2bff      	cmp	r3, #255	@ 0xff
 800277a:	f040 80a1 	bne.w	80028c0 <HAL_UART_RxCpltCallback+0x184>
    				packetBuffer[packetIndex++] = rxByte;
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	b291      	uxth	r1, r2
 8002786:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002788:	8011      	strh	r1, [r2, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b54      	ldr	r3, [pc, #336]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 800278e:	7819      	ldrb	r1, [r3, #0]
 8002790:	4b55      	ldr	r3, [pc, #340]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002792:	5499      	strb	r1, [r3, r2]
    				rxState = STATE_WAIT_HEADER_2;
 8002794:	4b51      	ldr	r3, [pc, #324]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    			}
    			break;
 800279a:	e091      	b.n	80028c0 <HAL_UART_RxCpltCallback+0x184>
    		case STATE_WAIT_HEADER_2:
    			if (rxByte == 0xFF) {
 800279c:	4b50      	ldr	r3, [pc, #320]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2bff      	cmp	r3, #255	@ 0xff
 80027a2:	d10e      	bne.n	80027c2 <HAL_UART_RxCpltCallback+0x86>
					packetBuffer[packetIndex++] = rxByte;
 80027a4:	4b4f      	ldr	r3, [pc, #316]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	b291      	uxth	r1, r2
 80027ac:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027ae:	8011      	strh	r1, [r2, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b4b      	ldr	r3, [pc, #300]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80027b4:	7819      	ldrb	r1, [r3, #0]
 80027b6:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 80027b8:	5499      	strb	r1, [r3, r2]
					rxState = STATE_WAIT_HEADER_3;
 80027ba:	4b48      	ldr	r3, [pc, #288]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
				} else {
					rxState = STATE_WAIT_HEADER_1;
                    packetIndex = 0;
				}
    			break;
 80027c0:	e081      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
					rxState = STATE_WAIT_HEADER_1;
 80027c2:	4b46      	ldr	r3, [pc, #280]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
                    packetIndex = 0;
 80027c8:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
    			break;
 80027ce:	e07a      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
    		case STATE_WAIT_HEADER_3:
    			if (rxByte == 0xFD) {
 80027d0:	4b43      	ldr	r3, [pc, #268]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2bfd      	cmp	r3, #253	@ 0xfd
 80027d6:	d10e      	bne.n	80027f6 <HAL_UART_RxCpltCallback+0xba>
					packetBuffer[packetIndex++] = rxByte;
 80027d8:	4b42      	ldr	r3, [pc, #264]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	b291      	uxth	r1, r2
 80027e0:	4a40      	ldr	r2, [pc, #256]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027e2:	8011      	strh	r1, [r2, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80027e8:	7819      	ldrb	r1, [r3, #0]
 80027ea:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 80027ec:	5499      	strb	r1, [r3, r2]
					rxState = STATE_WAIT_RESERVED;
 80027ee:	4b3b      	ldr	r3, [pc, #236]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80027f0:	2203      	movs	r2, #3
 80027f2:	701a      	strb	r2, [r3, #0]
				} else {
					rxState = STATE_WAIT_HEADER_1;
                    packetIndex = 0;
				}
    			break;
 80027f4:	e067      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
					rxState = STATE_WAIT_HEADER_1;
 80027f6:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
                    packetIndex = 0;
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	801a      	strh	r2, [r3, #0]
    			break;
 8002802:	e060      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
    		case STATE_WAIT_RESERVED:
    			if (rxByte == 0x00) {
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <HAL_UART_RxCpltCallback+0xee>
					packetBuffer[packetIndex++] = rxByte;
 800280c:	4b35      	ldr	r3, [pc, #212]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	b291      	uxth	r1, r2
 8002814:	4a33      	ldr	r2, [pc, #204]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002816:	8011      	strh	r1, [r2, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 800281c:	7819      	ldrb	r1, [r3, #0]
 800281e:	4b32      	ldr	r3, [pc, #200]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002820:	5499      	strb	r1, [r3, r2]
					rxState = STATE_RECEIVE_DATA;
 8002822:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 8002824:	2204      	movs	r2, #4
 8002826:	701a      	strb	r2, [r3, #0]
				} else {
					rxState = STATE_WAIT_HEADER_1;
                    packetIndex = 0;
				}
    			break;
 8002828:	e04d      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
					rxState = STATE_WAIT_HEADER_1;
 800282a:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
                    packetIndex = 0;
 8002830:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]
    			break;
 8002836:	e046      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
    		case STATE_RECEIVE_DATA:
                packetBuffer[packetIndex++] = rxByte;
 8002838:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	b291      	uxth	r1, r2
 8002840:	4a28      	ldr	r2, [pc, #160]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002842:	8011      	strh	r1, [r2, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b26      	ldr	r3, [pc, #152]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8002848:	7819      	ldrb	r1, [r3, #0]
 800284a:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 800284c:	5499      	strb	r1, [r3, r2]

                // Combines length into a single 16-bit number
                if (packetIndex == 7) {
 800284e:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	2b07      	cmp	r3, #7
 8002854:	d10c      	bne.n	8002870 <HAL_UART_RxCpltCallback+0x134>
                    packetLength = (uint16_t)(packetBuffer[6] << 8 | packetBuffer[5]);
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002858:	799b      	ldrb	r3, [r3, #6]
 800285a:	b21b      	sxth	r3, r3
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21a      	sxth	r2, r3
 8002860:	4b21      	ldr	r3, [pc, #132]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	b21b      	sxth	r3, r3
 8002866:	4313      	orrs	r3, r2
 8002868:	b21b      	sxth	r3, r3
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <HAL_UART_RxCpltCallback+0x1b0>)
 800286e:	801a      	strh	r2, [r3, #0]
                }

                // Total size = Header(4) + ID(1) + Len(2) + Length Value = 7 + packetLength
                if (packetIndex >= 7 && (packetIndex == (7 + packetLength))) {
 8002870:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d925      	bls.n	80028c4 <HAL_UART_RxCpltCallback+0x188>
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_UART_RxCpltCallback+0x1b0>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3307      	adds	r3, #7
 8002884:	429a      	cmp	r2, r3
 8002886:	d11d      	bne.n	80028c4 <HAL_UART_RxCpltCallback+0x188>
                	bool tx_started = process_packet(packetBuffer, packetLength);
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <HAL_UART_RxCpltCallback+0x1b0>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	4816      	ldr	r0, [pc, #88]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002890:	f7fe faf2 	bl	8000e78 <process_packet>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
                	packetIndex = 0;
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800289a:	2200      	movs	r2, #0
 800289c:	801a      	strh	r2, [r3, #0]
                	rxState = STATE_WAIT_HEADER_1;
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
                	// Stop listening while transmitting
                	if (tx_started) {
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_UART_RxCpltCallback+0x188>
                		return;
 80028aa:	e011      	b.n	80028d0 <HAL_UART_RxCpltCallback+0x194>
                	}
                }
                break;
    		default:
    			rxState = STATE_WAIT_HEADER_1;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_UART_RxCpltCallback+0x1a0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
    			packetIndex = 0;
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	801a      	strh	r2, [r3, #0]
    			packetLength = 0;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_UART_RxCpltCallback+0x1b0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	801a      	strh	r2, [r3, #0]
    			break;
 80028be:	e002      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
    			break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x18a>
                break;
 80028c4:	bf00      	nop

    	}
    	HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80028c6:	2201      	movs	r2, #1
 80028c8:	4905      	ldr	r1, [pc, #20]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80028ca:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <HAL_UART_RxCpltCallback+0x1b4>)
 80028cc:	f004 fa6e 	bl	8006dac <HAL_UART_Receive_IT>
    }
}
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40011000 	.word	0x40011000
 80028dc:	2000040c 	.word	0x2000040c
 80028e0:	200003c6 	.word	0x200003c6
 80028e4:	20000408 	.word	0x20000408
 80028e8:	200003c8 	.word	0x200003c8
 80028ec:	2000040a 	.word	0x2000040a
 80028f0:	2000037c 	.word	0x2000037c

080028f4 <HAL_ADCEx_InjectedConvCpltCallback>:

// ADC call back
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

	adc_cur_c = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1); // CH3 (PA3)
 80028fc:	2101      	movs	r1, #1
 80028fe:	4845      	ldr	r0, [pc, #276]	@ (8002a14 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8002900:	f001 fa9c 	bl	8003e3c <HAL_ADCEx_InjectedGetValue>
 8002904:	4603      	mov	r3, r0
 8002906:	4a44      	ldr	r2, [pc, #272]	@ (8002a18 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8002908:	6013      	str	r3, [r2, #0]
	adc_cur_b = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2); // CH14 (PC4)
 800290a:	2102      	movs	r1, #2
 800290c:	4841      	ldr	r0, [pc, #260]	@ (8002a14 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 800290e:	f001 fa95 	bl	8003e3c <HAL_ADCEx_InjectedGetValue>
 8002912:	4603      	mov	r3, r0
 8002914:	4a41      	ldr	r2, [pc, #260]	@ (8002a1c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8002916:	6013      	str	r3, [r2, #0]
	adc_cur_a = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3); // CH15 (PC5)
 8002918:	2103      	movs	r1, #3
 800291a:	483e      	ldr	r0, [pc, #248]	@ (8002a14 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 800291c:	f001 fa8e 	bl	8003e3c <HAL_ADCEx_InjectedGetValue>
 8002920:	4603      	mov	r3, r0
 8002922:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8002924:	6013      	str	r3, [r2, #0]
	convert_adc_to_current();
 8002926:	f7fe ff0b 	bl	8001740 <convert_adc_to_current>
	getActivePhaseCurrent();
 800292a:	f7ff fa79 	bl	8001e20 <getActivePhaseCurrent>

	if (motor_fault || !control_table.torque_enable) {
 800292e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d169      	bne.n	8002a0a <HAL_ADCEx_InjectedConvCpltCallback+0x116>
 8002936:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_ADCEx_InjectedConvCpltCallback+0x116>
		return;
	}

	uint16_t pwm_duty = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	81fb      	strh	r3, [r7, #14]
	if (control_table.operating_mode == PWM_CONTROL) {
 8002946:	4b38      	ldr	r3, [pc, #224]	@ (8002a28 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002948:	7adb      	ldrb	r3, [r3, #11]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b10      	cmp	r3, #16
 800294e:	d11f      	bne.n	8002990 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>
		if (control_table.goal_pwm >= 0) {
 8002950:	4b35      	ldr	r3, [pc, #212]	@ (8002a28 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002952:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 8002956:	b21b      	sxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	db03      	blt.n	8002964 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
			direction = CCW;
 800295c:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e002      	b.n	800296a <HAL_ADCEx_InjectedConvCpltCallback+0x76>
		} else {
			direction = CW;
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
		}
		pwm_duty = (uint16_t) fabs(control_table.goal_pwm);
 800296a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 800296c:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	@ 0x64
 8002970:	b21b      	sxth	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fd7a 	bl	800046c <__aeabi_i2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002982:	4620      	mov	r0, r4
 8002984:	4629      	mov	r1, r5
 8002986:	f7fe f815 	bl	80009b4 <__aeabi_d2uiz>
 800298a:	4603      	mov	r3, r0
 800298c:	81fb      	strh	r3, [r7, #14]
 800298e:	e003      	b.n	8002998 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>
	} else {
		pwm_duty = current_pi_controller();
 8002990:	f7fe fc86 	bl	80012a0 <current_pi_controller>
 8002994:	4603      	mov	r3, r0
 8002996:	81fb      	strh	r3, [r7, #14]
	}

	control_table.present_pwm = pwm_duty;
 8002998:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800299c:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 800299e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c

	uint8_t hall_state = read_hall_sensors();
 80029a2:	f7ff f883 	bl	8001aac <read_hall_sensors>
 80029a6:	4603      	mov	r3, r0
 80029a8:	737b      	strb	r3, [r7, #13]

	if (direction == CW) {
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>
	    sector = hall_to_sector_map_CW[hall_state & 0x07];
 80029b2:	7b7b      	ldrb	r3, [r7, #13]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 80029ba:	5cd2      	ldrb	r2, [r2, r3]
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80029be:	701a      	strb	r2, [r3, #0]
		sixStepCommutation(sector, pwm_duty);
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f9b7 	bl	8001d3c <sixStepCommutation>
 80029ce:	e01d      	b.n	8002a0c <HAL_ADCEx_InjectedConvCpltCallback+0x118>
	} else if (direction == CCW) {
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10e      	bne.n	80029f6 <HAL_ADCEx_InjectedConvCpltCallback+0x102>
	    sector = hall_to_sector_map_CCW[hall_state & 0x07];
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 80029e0:	5cd2      	ldrb	r2, [r2, r3]
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80029e4:	701a      	strb	r2, [r3, #0]
	    sixStepCommutation(sector, pwm_duty);
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	89fa      	ldrh	r2, [r7, #14]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f9a4 	bl	8001d3c <sixStepCommutation>
 80029f4:	e00a      	b.n	8002a0c <HAL_ADCEx_InjectedConvCpltCallback+0x118>
	} else {
	    SetPhase_FLOAT(PHASE_A);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7ff f976 	bl	8001ce8 <SetPhase_FLOAT>
	    SetPhase_FLOAT(PHASE_B);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7ff f973 	bl	8001ce8 <SetPhase_FLOAT>
	    SetPhase_FLOAT(PHASE_C);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f7ff f970 	bl	8001ce8 <SetPhase_FLOAT>
 8002a08:	e000      	b.n	8002a0c <HAL_ADCEx_InjectedConvCpltCallback+0x118>
		return;
 8002a0a:	bf00      	nop
	}
}
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000214 	.word	0x20000214
 8002a18:	20000424 	.word	0x20000424
 8002a1c:	20000428 	.word	0x20000428
 8002a20:	2000042c 	.word	0x2000042c
 8002a24:	200003c5 	.word	0x200003c5
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	20000458 	.word	0x20000458
 8002a30:	08007e94 	.word	0x08007e94
 8002a34:	200003c4 	.word	0x200003c4
 8002a38:	08007e9c 	.word	0x08007e9c

08002a3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a49      	ldr	r2, [pc, #292]	@ (8002b70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 808d 	bne.w	8002b6a <HAL_TIM_PeriodElapsedCallback+0x12e>
  {
	counter++;
 8002a50:	4b48      	ldr	r3, [pc, #288]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4a47      	ldr	r2, [pc, #284]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002a58:	6013      	str	r3, [r2, #0]
	control_table.realtime_tick = counter % 32768;
 8002a5a:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	4b44      	ldr	r3, [pc, #272]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002a68:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    calculate_speed_from_capture();
 8002a6c:	f7fe ff5c 	bl	8001928 <calculate_speed_from_capture>
    update_angle_from_encoder();
 8002a70:	f7ff f802 	bl	8001a78 <update_angle_from_encoder>

    if (!control_table.torque_enable) {
 8002a74:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d120      	bne.n	8002ac2 <HAL_TIM_PeriodElapsedCallback+0x86>
        control_table.goal_current = 0;
 8002a80:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002a82:	f893 2066 	ldrb.w	r2, [r3, #102]	@ 0x66
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8002a8c:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        control_table.goal_velocity = 0;
 8002a96:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002a98:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8002aa2:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8002aac:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8002ab6:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
        return;
 8002ac0:	e053      	b.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x12e>
    }

    float current_target = 0.0f;
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

        switch(control_table.operating_mode)
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002aca:	7adb      	ldrb	r3, [r3, #11]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	dc4a      	bgt.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	da04      	bge.n	8002ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d00a      	beq.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0xb8>
                current_target = control_table.goal_current;
                break;

            case PWM_CONTROL:
            default:
                return;
 8002ade:	e043      	b.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x12c>
                control_table.goal_velocity = position_pid_controller();
 8002ae0:	f7fe fd7c 	bl	80015dc <position_pid_controller>
 8002ae4:	eef0 7a40 	vmov.f32	s15, s0
 8002ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aec:	ee17 2a90 	vmov	r2, s15
 8002af0:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002af2:	669a      	str	r2, [r3, #104]	@ 0x68
                current_target = velocity_pid_controller();
 8002af4:	f7fe fcb8 	bl	8001468 <velocity_pid_controller>
 8002af8:	ed87 0a03 	vstr	s0, [r7, #12]
                break;
 8002afc:	e00a      	b.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0xd8>
                current_target = control_table.goal_current;
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b00:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	@ 0x66
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0e:	edc7 7a03 	vstr	s15, [r7, #12]
                break;
 8002b12:	bf00      	nop
        }

        if (current_target > CURRENT_DEADPOINT) {
 8002b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b18:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b7c <HAL_TIM_PeriodElapsedCallback+0x140>
 8002b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	dd03      	ble.n	8002b2e <HAL_TIM_PeriodElapsedCallback+0xf2>
            direction = CCW;
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e011      	b.n	8002b52 <HAL_TIM_PeriodElapsedCallback+0x116>
        } else if (current_target < -CURRENT_DEADPOINT) {
 8002b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b32:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002b84 <HAL_TIM_PeriodElapsedCallback+0x148>
 8002b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d503      	bpl.n	8002b48 <HAL_TIM_PeriodElapsedCallback+0x10c>
            direction = CW;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e004      	b.n	8002b52 <HAL_TIM_PeriodElapsedCallback+0x116>
        } else {
        	direction = STOPPED;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
        	reset_pid_controllers();
 8002b4e:	f7fe ffdb 	bl	8001b08 <reset_pid_controllers>
        }

        control_table.goal_current = current_target;
 8002b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	ee17 3a90 	vmov	r3, s15
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8002b66:	e000      	b.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x12e>
                return;
 8002b68:	bf00      	nop
  }
}
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40001000 	.word	0x40001000
 8002b74:	20000410 	.word	0x20000410
 8002b78:	2000002c 	.word	0x2000002c
 8002b7c:	3dcccccd 	.word	0x3dcccccd
 8002b80:	20000458 	.word	0x20000458
 8002b84:	bdcccccd 	.word	0xbdcccccd

08002b88 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a18      	ldr	r2, [pc, #96]	@ (8002bf8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12a      	bne.n	8002bf0 <HAL_TIM_IC_CaptureCallback+0x68>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7f1b      	ldrb	r3, [r3, #28]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d126      	bne.n	8002bf0 <HAL_TIM_IC_CaptureCallback+0x68>
  {
    ic_capture2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f003 faf7 	bl	8006198 <HAL_TIM_ReadCapturedValue>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8002bae:	6013      	str	r3, [r2, #0]
    capture_diff = ic_capture2 - ic_capture1;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002bbc:	6013      	str	r3, [r2, #0]
    ic_capture1 = ic_capture2;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002c00 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002bc4:	6013      	str	r3, [r2, #0]

    if (!is_first_capture)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <HAL_TIM_IC_CaptureCallback+0x62>
    {
      latest_pulse_period_s = (float)capture_diff / CAPTURE_TIMER_CLK_FREQ;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bdc:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002c0c <HAL_TIM_IC_CaptureCallback+0x84>
 8002be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002be6:	edc3 7a00 	vstr	s15, [r3]
    }
    is_first_capture = 0;
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	2000041c 	.word	0x2000041c
 8002c00:	20000418 	.word	0x20000418
 8002c04:	20000420 	.word	0x20000420
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	49742400 	.word	0x49742400
 8002c10:	20000414 	.word	0x20000414

08002c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <Error_Handler+0x8>

08002c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a08      	ldr	r2, [pc, #32]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <HAL_ADC_MspInit+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d149      	bne.n	8002d26 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <HAL_ADC_MspInit+0xc4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cea:	2303      	movs	r3, #3
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480f      	ldr	r0, [pc, #60]	@ (8002d38 <HAL_ADC_MspInit+0xc8>)
 8002cfa:	f001 fc11 	bl	8004520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cfe:	2330      	movs	r3, #48	@ 0x30
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	2303      	movs	r3, #3
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480a      	ldr	r0, [pc, #40]	@ (8002d3c <HAL_ADC_MspInit+0xcc>)
 8002d12:	f001 fc05 	bl	8004520 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2012      	movs	r0, #18
 8002d1c:	f001 fb37 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d20:	2012      	movs	r0, #18
 8002d22:	f001 fb50 	bl	80043c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	@ 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40012000 	.word	0x40012000
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020800 	.word	0x40020800

08002d40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <HAL_TIM_Base_MspInit+0xf4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a33      	ldr	r2, [pc, #204]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d7e:	e054      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2d      	ldr	r2, [pc, #180]	@ (8002e3c <HAL_TIM_Base_MspInit+0xfc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d134      	bne.n	8002df4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9a:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc2:	2340      	movs	r3, #64	@ 0x40
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4818      	ldr	r0, [pc, #96]	@ (8002e40 <HAL_TIM_Base_MspInit+0x100>)
 8002dde:	f001 fb9f 	bl	8004520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	201d      	movs	r0, #29
 8002de8:	f001 fad1 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dec:	201d      	movs	r0, #29
 8002dee:	f001 faea 	bl	80043c6 <HAL_NVIC_EnableIRQ>
}
 8002df2:	e01a      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a12      	ldr	r2, [pc, #72]	@ (8002e44 <HAL_TIM_Base_MspInit+0x104>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_TIM_Base_MspInit+0xf8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	2036      	movs	r0, #54	@ 0x36
 8002e20:	f001 fab5 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e24:	2036      	movs	r0, #54	@ 0x36
 8002e26:	f001 face 	bl	80043c6 <HAL_NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3730      	adds	r7, #48	@ 0x30
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40001000 	.word	0x40001000

08002e48 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d12b      	bne.n	8002ec2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4804      	ldr	r0, [pc, #16]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ebe:	f001 fb2f 	bl	8004520 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	@ 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <HAL_TIM_MspPostInit+0x68>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d11e      	bne.n	8002f34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_TIM_MspPostInit+0x6c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <HAL_TIM_MspPostInit+0x6c>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_TIM_MspPostInit+0x6c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002f12:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002f16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4805      	ldr	r0, [pc, #20]	@ (8002f44 <HAL_TIM_MspPostInit+0x70>)
 8002f30:	f001 faf6 	bl	8004520 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <HAL_UART_MspInit+0x94>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d133      	bne.n	8002fd2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f7a:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_UART_MspInit+0x98>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fa2:	23c0      	movs	r3, #192	@ 0xc0
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <HAL_UART_MspInit+0x9c>)
 8002fbe:	f001 faaf 	bl	8004520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2025      	movs	r0, #37	@ 0x25
 8002fc8:	f001 f9e1 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fcc:	2025      	movs	r0, #37	@ 0x25
 8002fce:	f001 f9fa 	bl	80043c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	@ 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40011000 	.word	0x40011000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <NMI_Handler+0x4>

08002ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <HardFault_Handler+0x4>

08002ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <MemManage_Handler+0x4>

08003000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <UsageFault_Handler+0x4>

08003010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303e:	f000 f8b9 	bl	80031b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800304c:	4802      	ldr	r0, [pc, #8]	@ (8003058 <ADC_IRQHandler+0x10>)
 800304e:	f000 fac9 	bl	80035e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000214 	.word	0x20000214

0800305c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <TIM3_IRQHandler+0x10>)
 8003062:	f002 fd83 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200002ec 	.word	0x200002ec

08003070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003074:	4802      	ldr	r0, [pc, #8]	@ (8003080 <USART1_IRQHandler+0x10>)
 8003076:	f003 febf 	bl	8006df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000037c 	.word	0x2000037c

08003084 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <TIM6_DAC_IRQHandler+0x10>)
 800308a:	f002 fd6f 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000334 	.word	0x20000334

08003098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <SystemInit+0x20>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <SystemInit+0x20>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <Reset_Handler>:
 80030bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030f4 <LoopFillZerobss+0xe>
 80030c0:	f7ff ffea 	bl	8003098 <SystemInit>
 80030c4:	480c      	ldr	r0, [pc, #48]	@ (80030f8 <LoopFillZerobss+0x12>)
 80030c6:	490d      	ldr	r1, [pc, #52]	@ (80030fc <LoopFillZerobss+0x16>)
 80030c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003100 <LoopFillZerobss+0x1a>)
 80030ca:	2300      	movs	r3, #0
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:
 80030ce:	58d4      	ldr	r4, [r2, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:
 80030d4:	18c4      	adds	r4, r0, r3
 80030d6:	428c      	cmp	r4, r1
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <LoopFillZerobss+0x1e>)
 80030dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003108 <LoopFillZerobss+0x22>)
 80030de:	2300      	movs	r3, #0
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:
 80030e6:	42a2      	cmp	r2, r4
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>
 80030ea:	f004 fd95 	bl	8007c18 <__libc_init_array>
 80030ee:	f7fe ff19 	bl	8001f24 <main>
 80030f2:	4770      	bx	lr
 80030f4:	20020000 	.word	0x20020000
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000010 	.word	0x20000010
 8003100:	08007ecc 	.word	0x08007ecc
 8003104:	20000010 	.word	0x20000010
 8003108:	20000468 	.word	0x20000468

0800310c <CAN1_RX0_IRQHandler>:
 800310c:	e7fe      	b.n	800310c <CAN1_RX0_IRQHandler>
	...

08003110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003114:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <HAL_Init+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <HAL_Init+0x40>)
 800311a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800311e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_Init+0x40>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <HAL_Init+0x40>)
 8003126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800312a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a07      	ldr	r2, [pc, #28]	@ (8003150 <HAL_Init+0x40>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f001 f91d 	bl	8004378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800313e:	200f      	movs	r0, #15
 8003140:	f000 f808 	bl	8003154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003144:	f7ff fd6c 	bl	8002c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_InitTick+0x54>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_InitTick+0x58>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f001 f935 	bl	80043e2 <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e00e      	b.n	80031a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d80a      	bhi.n	800319e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f001 f8fd 	bl	800438e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003194:	4a06      	ldr	r2, [pc, #24]	@ (80031b0 <HAL_InitTick+0x5c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000004 	.word	0x20000004
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	20000008 	.word	0x20000008

080031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000000c 	.word	0x2000000c
 80031d8:	20000464 	.word	0x20000464

080031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000464 	.word	0x20000464

080031f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d005      	beq.n	800321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_Delay+0x44>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800321a:	bf00      	nop
 800321c:	f7ff ffde 	bl	80031dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f7      	bhi.n	800321c <HAL_Delay+0x28>
  {
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	2000000c 	.word	0x2000000c

0800323c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e033      	b.n	80032ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fd08 	bl	8002c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d118      	bne.n	80032ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003282:	f023 0302 	bic.w	r3, r3, #2
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fc06 	bl	8003aa0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80032aa:	e001      	b.n	80032b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Start+0x1a>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0b2      	b.n	8003444 <HAL_ADC_Start+0x180>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d018      	beq.n	8003326 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003304:	4b52      	ldr	r3, [pc, #328]	@ (8003450 <HAL_ADC_Start+0x18c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_ADC_Start+0x190>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9a      	lsrs	r2, r3, #18
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003318:	e002      	b.n	8003320 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3b01      	subs	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f9      	bne.n	800331a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d17a      	bne.n	800342a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800335e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003372:	d106      	bne.n	8003382 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	f023 0206 	bic.w	r2, r3, #6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003380:	e002      	b.n	8003388 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003390:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_ADC_Start+0x194>)
 8003392:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800339c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12a      	bne.n	8003400 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2b      	ldr	r2, [pc, #172]	@ (800345c <HAL_ADC_Start+0x198>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d015      	beq.n	80033e0 <HAL_ADC_Start+0x11c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a29      	ldr	r2, [pc, #164]	@ (8003460 <HAL_ADC_Start+0x19c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_Start+0x106>
 80033be:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <HAL_ADC_Start+0x194>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a25      	ldr	r2, [pc, #148]	@ (8003464 <HAL_ADC_Start+0x1a0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d136      	bne.n	8003442 <HAL_ADC_Start+0x17e>
 80033d4:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <HAL_ADC_Start+0x194>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d130      	bne.n	8003442 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d129      	bne.n	8003442 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	e020      	b.n	8003442 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a15      	ldr	r2, [pc, #84]	@ (800345c <HAL_ADC_Start+0x198>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d11b      	bne.n	8003442 <HAL_ADC_Start+0x17e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d114      	bne.n	8003442 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e00b      	b.n	8003442 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	20000004 	.word	0x20000004
 8003454:	431bde83 	.word	0x431bde83
 8003458:	40012300 	.word	0x40012300
 800345c:	40012000 	.word	0x40012000
 8003460:	40012100 	.word	0x40012100
 8003464:	40012200 	.word	0x40012200

08003468 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ADC_Stop+0x16>
 800347a:	2302      	movs	r3, #2
 800347c:	e021      	b.n	80034c2 <HAL_ADC_Stop+0x5a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d113      	bne.n	8003514 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fa:	d10b      	bne.n	8003514 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e063      	b.n	80035dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7ff fe62 	bl	80031dc <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800351a:	e021      	b.n	8003560 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d01d      	beq.n	8003560 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_ADC_PollForConversion+0x6c>
 800352a:	f7ff fe57 	bl	80031dc <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d212      	bcs.n	8003560 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d00b      	beq.n	8003560 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e03d      	b.n	80035dc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d1d6      	bne.n	800351c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0212 	mvn.w	r2, #18
 8003576:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d123      	bne.n	80035da <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11f      	bne.n	80035da <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d111      	bne.n	80035da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d049      	beq.n	80036ae <HAL_ADC_IRQHandler+0xca>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12b      	bne.n	800369e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364a:	2b00      	cmp	r3, #0
 800364c:	d127      	bne.n	800369e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0220 	bic.w	r2, r2, #32
 8003678:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8bd 	bl	800381e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0212 	mvn.w	r2, #18
 80036ac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d057      	beq.n	8003774 <HAL_ADC_IRQHandler+0x190>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d054      	beq.n	8003774 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d139      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003708:	2b00      	cmp	r3, #0
 800370a:	d12b      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003716:	2b00      	cmp	r3, #0
 8003718:	d124      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d119      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800373e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff f8c5 	bl	80028f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 020c 	mvn.w	r2, #12
 8003772:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003782:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <HAL_ADC_IRQHandler+0x1d6>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d014      	beq.n	80037ba <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10d      	bne.n	80037ba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f841 	bl	8003832 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0201 	mvn.w	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <HAL_ADC_IRQHandler+0x218>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0220 	mvn.w	r2, #32
 80037ea:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f82a 	bl	8003846 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0220 	mvn.w	r2, #32
 80037fa:	601a      	str	r2, [r3, #0]
  }
}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x1c>
 8003874:	2302      	movs	r3, #2
 8003876:	e105      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x228>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b09      	cmp	r3, #9
 8003886:	d925      	bls.n	80038d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68d9      	ldr	r1, [r3, #12]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	3b1e      	subs	r3, #30
 800389e:	2207      	movs	r2, #7
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43da      	mvns	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	400a      	ands	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4403      	add	r3, r0
 80038c6:	3b1e      	subs	r3, #30
 80038c8:	409a      	lsls	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e022      	b.n	800391a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6919      	ldr	r1, [r3, #16]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	2207      	movs	r2, #7
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	400a      	ands	r2, r1
 80038f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	4603      	mov	r3, r0
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4403      	add	r3, r0
 8003910:	409a      	lsls	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d824      	bhi.n	800396c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	3b05      	subs	r3, #5
 8003934:	221f      	movs	r2, #31
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	400a      	ands	r2, r1
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	4618      	mov	r0, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	3b05      	subs	r3, #5
 800395e:	fa00 f203 	lsl.w	r2, r0, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	635a      	str	r2, [r3, #52]	@ 0x34
 800396a:	e04c      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d824      	bhi.n	80039be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	3b23      	subs	r3, #35	@ 0x23
 8003986:	221f      	movs	r2, #31
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43da      	mvns	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	400a      	ands	r2, r1
 8003994:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	3b23      	subs	r3, #35	@ 0x23
 80039b0:	fa00 f203 	lsl.w	r2, r0, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80039bc:	e023      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b41      	subs	r3, #65	@ 0x41
 80039d0:	221f      	movs	r2, #31
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b41      	subs	r3, #65	@ 0x41
 80039fa:	fa00 f203 	lsl.w	r2, r0, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_ADC_ConfigChannel+0x234>)
 8003a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	@ (8003a94 <HAL_ADC_ConfigChannel+0x238>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x1cc>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b12      	cmp	r3, #18
 8003a1a:	d105      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_ADC_ConfigChannel+0x238>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d123      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x21e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d003      	beq.n	8003a42 <HAL_ADC_ConfigChannel+0x1e6>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b11      	cmp	r3, #17
 8003a40:	d11b      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d111      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <HAL_ADC_ConfigChannel+0x23c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a10      	ldr	r2, [pc, #64]	@ (8003a9c <HAL_ADC_ConfigChannel+0x240>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9a      	lsrs	r2, r3, #18
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a6c:	e002      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f9      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40012300 	.word	0x40012300
 8003a94:	40012000 	.word	0x40012000
 8003a98:	20000004 	.word	0x20000004
 8003a9c:	431bde83 	.word	0x431bde83

08003aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aa8:	4b79      	ldr	r3, [pc, #484]	@ (8003c90 <ADC_Init+0x1f0>)
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	4a58      	ldr	r2, [pc, #352]	@ (8003c94 <ADC_Init+0x1f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6899      	ldr	r1, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e00f      	b.n	8003b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0202 	bic.w	r2, r2, #2
 8003bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7e1b      	ldrb	r3, [r3, #24]
 8003bb8:	005a      	lsls	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01b      	beq.n	8003c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	035a      	lsls	r2, r3, #13
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	e007      	b.n	8003c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	051a      	lsls	r2, r3, #20
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c56:	025a      	lsls	r2, r3, #9
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	029a      	lsls	r2, r3, #10
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40012300 	.word	0x40012300
 8003c94:	0f000001 	.word	0x0f000001

08003c98 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_ADCEx_InjectedStart_IT+0x22>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0b2      	b.n	8003e20 <HAL_ADCEx_InjectedStart_IT+0x188>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d018      	beq.n	8003d02 <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce0:	4b52      	ldr	r3, [pc, #328]	@ (8003e2c <HAL_ADCEx_InjectedStart_IT+0x194>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	@ (8003e30 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9a      	lsrs	r2, r3, #18
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003cf4:	e002      	b.n	8003cfc <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f9      	bne.n	8003cf6 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d17a      	bne.n	8003e06 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0204 	mvn.w	r2, #4
 8003d46:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d56:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d58:	4b36      	ldr	r3, [pc, #216]	@ (8003e34 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8003d5a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d124      	bne.n	8003db2 <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d041      	beq.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d03e      	beq.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	e035      	b.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d11a      	bne.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d017      	beq.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d014      	beq.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e00b      	b.n	8003e1e <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000004 	.word	0x20000004
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	40012300 	.word	0x40012300
 8003e38:	40012000 	.word	0x40012000

08003e3c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0204 	mvn.w	r2, #4
 8003e52:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d81f      	bhi.n	8003e9c <HAL_ADCEx_InjectedGetValue+0x60>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <HAL_ADCEx_InjectedGetValue+0x28>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e75 	.word	0x08003e75
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003e86:	e00a      	b.n	8003e9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003e90:	e005      	b.n	8003e9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003e9a:	e000      	b.n	8003e9e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8003e9c:	bf00      	nop
  }
  return tmp;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e17d      	b.n	80041c0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d925      	bls.n	8003f20 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68d9      	ldr	r1, [r3, #12]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3b1e      	subs	r3, #30
 8003eea:	2207      	movs	r2, #7
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68d9      	ldr	r1, [r3, #12]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4403      	add	r3, r0
 8003f12:	3b1e      	subs	r3, #30
 8003f14:	409a      	lsls	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e022      	b.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	2207      	movs	r2, #7
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4403      	add	r3, r0
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	051a      	lsls	r2, r3, #20
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	3303      	adds	r3, #3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	221f      	movs	r2, #31
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	400a      	ands	r2, r1
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3303      	adds	r3, #3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	4a74      	ldr	r2, [pc, #464]	@ (80041cc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800400c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800402e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	e00f      	b.n	8004064 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004062:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	7d5b      	ldrb	r3, [r3, #21]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	e007      	b.n	800408e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	7d1b      	ldrb	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e007      	b.n	80040b8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040b6:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d02e      	beq.n	800411e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d840      	bhi.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <HAL_ADCEx_InjectedConfigChannel+0x222>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d014      	beq.n	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80040cc:	e03b      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80040dc:	f023 030f 	bic.w	r3, r3, #15
 80040e0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6959      	ldr	r1, [r3, #20]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	615a      	str	r2, [r3, #20]
      break;
 80040f4:	e03b      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004104:	f023 030f 	bic.w	r3, r3, #15
 8004108:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6999      	ldr	r1, [r3, #24]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	619a      	str	r2, [r3, #24]
      break;
 800411c:	e027      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800412c:	f023 030f 	bic.w	r3, r3, #15
 8004130:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	61da      	str	r2, [r3, #28]
      break;
 8004144:	e013      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004154:	f023 030f 	bic.w	r3, r3, #15
 8004158:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a19      	ldr	r1, [r3, #32]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	621a      	str	r2, [r3, #32]
      break;
 800416c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800416e:	4b18      	ldr	r3, [pc, #96]	@ (80041d0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b12      	cmp	r3, #18
 8004182:	d105      	bne.n	8004190 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0f      	ldr	r2, [pc, #60]	@ (80041d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d003      	beq.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b11      	cmp	r3, #17
 80041a8:	d105      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	000f0001 	.word	0x000f0001
 80041d0:	40012300 	.word	0x40012300
 80041d4:	40012000 	.word	0x40012000

080041d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <__NVIC_SetPriorityGrouping+0x44>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041f4:	4013      	ands	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	@ (800421c <__NVIC_SetPriorityGrouping+0x44>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__NVIC_GetPriorityGrouping+0x18>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 0307 	and.w	r3, r3, #7
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	db0b      	blt.n	8004266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	f003 021f 	and.w	r2, r3, #31
 8004254:	4907      	ldr	r1, [pc, #28]	@ (8004274 <__NVIC_EnableIRQ+0x38>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2001      	movs	r0, #1
 800425e:	fa00 f202 	lsl.w	r2, r0, r2
 8004262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000e100 	.word	0xe000e100

08004278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	db0a      	blt.n	80042a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	490c      	ldr	r1, [pc, #48]	@ (80042c4 <__NVIC_SetPriority+0x4c>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	0112      	lsls	r2, r2, #4
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	440b      	add	r3, r1
 800429c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a0:	e00a      	b.n	80042b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4908      	ldr	r1, [pc, #32]	@ (80042c8 <__NVIC_SetPriority+0x50>)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3b04      	subs	r3, #4
 80042b0:	0112      	lsls	r2, r2, #4
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	440b      	add	r3, r1
 80042b6:	761a      	strb	r2, [r3, #24]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f1c3 0307 	rsb	r3, r3, #7
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	bf28      	it	cs
 80042ea:	2304      	movcs	r3, #4
 80042ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d902      	bls.n	80042fc <NVIC_EncodePriority+0x30>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3b03      	subs	r3, #3
 80042fa:	e000      	b.n	80042fe <NVIC_EncodePriority+0x32>
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	401a      	ands	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004314:	f04f 31ff 	mov.w	r1, #4294967295
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	43d9      	mvns	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	4313      	orrs	r3, r2
         );
}
 8004326:	4618      	mov	r0, r3
 8004328:	3724      	adds	r7, #36	@ 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004344:	d301      	bcc.n	800434a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004346:	2301      	movs	r3, #1
 8004348:	e00f      	b.n	800436a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434a:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <SysTick_Config+0x40>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004352:	210f      	movs	r1, #15
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	f7ff ff8e 	bl	8004278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <SysTick_Config+0x40>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004362:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <SysTick_Config+0x40>)
 8004364:	2207      	movs	r2, #7
 8004366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	e000e010 	.word	0xe000e010

08004378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff29 	bl	80041d8 <__NVIC_SetPriorityGrouping>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a0:	f7ff ff3e 	bl	8004220 <__NVIC_GetPriorityGrouping>
 80043a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7ff ff8e 	bl	80042cc <NVIC_EncodePriority>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff5d 	bl	8004278 <__NVIC_SetPriority>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff31 	bl	800423c <__NVIC_EnableIRQ>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ffa2 	bl	8004334 <SysTick_Config>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7fe fee8 	bl	80031dc <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d008      	beq.n	800442c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	@ 0x80
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e052      	b.n	80044d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0216 	bic.w	r2, r2, #22
 800443a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800444a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_DMA_Abort+0x62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0208 	bic.w	r2, r2, #8
 800446a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800447c:	e013      	b.n	80044a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800447e:	f7fe fead 	bl	80031dc <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b05      	cmp	r3, #5
 800448a:	d90c      	bls.n	80044a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e015      	b.n	80044d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e4      	bne.n	800447e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	223f      	movs	r2, #63	@ 0x3f
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e00c      	b.n	8004512 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2205      	movs	r2, #5
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e16b      	b.n	8004814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800453c:	2201      	movs	r2, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	f040 815a 	bne.w	800480e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d005      	beq.n	8004572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800456e:	2b02      	cmp	r3, #2
 8004570:	d130      	bne.n	80045d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 0201 	and.w	r2, r3, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d017      	beq.n	8004610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d123      	bne.n	8004664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	220f      	movs	r2, #15
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80b4 	beq.w	800480e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b60      	ldr	r3, [pc, #384]	@ (800482c <HAL_GPIO_Init+0x30c>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	4a5f      	ldr	r2, [pc, #380]	@ (800482c <HAL_GPIO_Init+0x30c>)
 80046b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046b6:	4b5d      	ldr	r3, [pc, #372]	@ (800482c <HAL_GPIO_Init+0x30c>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004830 <HAL_GPIO_Init+0x310>)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a52      	ldr	r2, [pc, #328]	@ (8004834 <HAL_GPIO_Init+0x314>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d02b      	beq.n	8004746 <HAL_GPIO_Init+0x226>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a51      	ldr	r2, [pc, #324]	@ (8004838 <HAL_GPIO_Init+0x318>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d025      	beq.n	8004742 <HAL_GPIO_Init+0x222>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a50      	ldr	r2, [pc, #320]	@ (800483c <HAL_GPIO_Init+0x31c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <HAL_GPIO_Init+0x21e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4f      	ldr	r2, [pc, #316]	@ (8004840 <HAL_GPIO_Init+0x320>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_Init+0x21a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4e      	ldr	r2, [pc, #312]	@ (8004844 <HAL_GPIO_Init+0x324>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_Init+0x216>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4d      	ldr	r2, [pc, #308]	@ (8004848 <HAL_GPIO_Init+0x328>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_Init+0x212>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4c      	ldr	r2, [pc, #304]	@ (800484c <HAL_GPIO_Init+0x32c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <HAL_GPIO_Init+0x330>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_Init+0x20a>
 8004726:	2307      	movs	r3, #7
 8004728:	e00e      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800472a:	2308      	movs	r3, #8
 800472c:	e00c      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800472e:	2306      	movs	r3, #6
 8004730:	e00a      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004732:	2305      	movs	r3, #5
 8004734:	e008      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800473a:	2303      	movs	r3, #3
 800473c:	e004      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004746:	2300      	movs	r3, #0
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f002 0203 	and.w	r2, r2, #3
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4093      	lsls	r3, r2
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004758:	4935      	ldr	r1, [pc, #212]	@ (8004830 <HAL_GPIO_Init+0x310>)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004766:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <HAL_GPIO_Init+0x334>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478a:	4a32      	ldr	r2, [pc, #200]	@ (8004854 <HAL_GPIO_Init+0x334>)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004790:	4b30      	ldr	r3, [pc, #192]	@ (8004854 <HAL_GPIO_Init+0x334>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b4:	4a27      	ldr	r2, [pc, #156]	@ (8004854 <HAL_GPIO_Init+0x334>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ba:	4b26      	ldr	r3, [pc, #152]	@ (8004854 <HAL_GPIO_Init+0x334>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047de:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_GPIO_Init+0x334>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <HAL_GPIO_Init+0x334>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004808:	4a12      	ldr	r2, [pc, #72]	@ (8004854 <HAL_GPIO_Init+0x334>)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	f67f ae90 	bls.w	800453c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40013800 	.word	0x40013800
 8004834:	40020000 	.word	0x40020000
 8004838:	40020400 	.word	0x40020400
 800483c:	40020800 	.word	0x40020800
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40021000 	.word	0x40021000
 8004848:	40021400 	.word	0x40021400
 800484c:	40021800 	.word	0x40021800
 8004850:	40021c00 	.word	0x40021c00
 8004854:	40013c00 	.word	0x40013c00

08004858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e001      	b.n	800487a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a4:	e003      	b.n	80048ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	041a      	lsls	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e267      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d075      	beq.n	80049c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048da:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d00c      	beq.n	8004900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b85      	ldr	r3, [pc, #532]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d112      	bne.n	8004918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b82      	ldr	r3, [pc, #520]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048fe:	d10b      	bne.n	8004918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	4b7e      	ldr	r3, [pc, #504]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05b      	beq.n	80049c4 <HAL_RCC_OscConfig+0x108>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d157      	bne.n	80049c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e242      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d106      	bne.n	8004930 <HAL_RCC_OscConfig+0x74>
 8004922:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a75      	ldr	r2, [pc, #468]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xb0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x98>
 800493a:	4b70      	ldr	r3, [pc, #448]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6f      	ldr	r2, [pc, #444]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b6d      	ldr	r3, [pc, #436]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6c      	ldr	r2, [pc, #432]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xb0>
 8004954:	4b69      	ldr	r3, [pc, #420]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a68      	ldr	r2, [pc, #416]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b66      	ldr	r3, [pc, #408]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fe fc32 	bl	80031dc <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fe fc2e 	bl	80031dc <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e207      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b5b      	ldr	r3, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xc0>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe fc1e 	bl	80031dc <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fe fc1a 	bl	80031dc <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1f3      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b51      	ldr	r3, [pc, #324]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0xe8>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049d2:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b47      	ldr	r3, [pc, #284]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b44      	ldr	r3, [pc, #272]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x152>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1c7      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4937      	ldr	r1, [pc, #220]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e03a      	b.n	8004a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b34      	ldr	r3, [pc, #208]	@ (8004b00 <HAL_RCC_OscConfig+0x244>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fe fbd3 	bl	80031dc <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fe fbcf 	bl	80031dc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1a8      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4925      	ldr	r1, [pc, #148]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_RCC_OscConfig+0x244>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fe fbb2 	bl	80031dc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fe fbae 	bl	80031dc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e187      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d036      	beq.n	8004b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aae:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <HAL_RCC_OscConfig+0x248>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fe fb92 	bl	80031dc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fe fb8e 	bl	80031dc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e167      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCC_OscConfig+0x240>)
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x200>
 8004ada:	e01b      	b.n	8004b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004adc:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_OscConfig+0x248>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae2:	f7fe fb7b 	bl	80031dc <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aea:	f7fe fb77 	bl	80031dc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d907      	bls.n	8004b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e150      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	42470000 	.word	0x42470000
 8004b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	4b88      	ldr	r3, [pc, #544]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ea      	bne.n	8004aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8097 	beq.w	8004c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b81      	ldr	r3, [pc, #516]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	4b7d      	ldr	r3, [pc, #500]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b42:	4b7a      	ldr	r3, [pc, #488]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b52:	4b77      	ldr	r3, [pc, #476]	@ (8004d30 <HAL_RCC_OscConfig+0x474>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5e:	4b74      	ldr	r3, [pc, #464]	@ (8004d30 <HAL_RCC_OscConfig+0x474>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a73      	ldr	r2, [pc, #460]	@ (8004d30 <HAL_RCC_OscConfig+0x474>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe fb37 	bl	80031dc <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fe fb33 	bl	80031dc <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e10c      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCC_OscConfig+0x474>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2ea>
 8004b98:	4b64      	ldr	r3, [pc, #400]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a63      	ldr	r2, [pc, #396]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x324>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x30c>
 8004bae:	4b5f      	ldr	r3, [pc, #380]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bba:	4b5c      	ldr	r3, [pc, #368]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0x324>
 8004bc8:	4b58      	ldr	r3, [pc, #352]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a57      	ldr	r2, [pc, #348]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	4b55      	ldr	r3, [pc, #340]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4a54      	ldr	r2, [pc, #336]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fe faf8 	bl	80031dc <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fe faf4 	bl	80031dc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0cb      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x334>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c14:	f7fe fae2 	bl	80031dc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fade 	bl	80031dc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0b5      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	4b3e      	ldr	r3, [pc, #248]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b39      	ldr	r3, [pc, #228]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	4a38      	ldr	r2, [pc, #224]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a1 	beq.w	8004d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5a:	4b34      	ldr	r3, [pc, #208]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d05c      	beq.n	8004d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d141      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b31      	ldr	r3, [pc, #196]	@ (8004d34 <HAL_RCC_OscConfig+0x478>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe fab2 	bl	80031dc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fe faae 	bl	80031dc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e087      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	491b      	ldr	r1, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x478>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fe fa87 	bl	80031dc <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe fa83 	bl	80031dc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e05c      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce4:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x416>
 8004cf0:	e054      	b.n	8004d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <HAL_RCC_OscConfig+0x478>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fa70 	bl	80031dc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fe fa6c 	bl	80031dc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e045      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCC_OscConfig+0x470>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x444>
 8004d1e:	e03d      	b.n	8004d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e038      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40007000 	.word	0x40007000
 8004d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d38:	4b1b      	ldr	r3, [pc, #108]	@ (8004da8 <HAL_RCC_OscConfig+0x4ec>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d028      	beq.n	8004d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d121      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11a      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	3b01      	subs	r3, #1
 8004d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800

08004dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0cc      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b68      	ldr	r3, [pc, #416]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d90c      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b65      	ldr	r3, [pc, #404]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b8      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a58      	ldr	r2, [pc, #352]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b50      	ldr	r3, [pc, #320]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	494d      	ldr	r1, [pc, #308]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d044      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b47      	ldr	r3, [pc, #284]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d119      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e06f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e067      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8a:	4b37      	ldr	r3, [pc, #220]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 0203 	bic.w	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4934      	ldr	r1, [pc, #208]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e9c:	f7fe f99e 	bl	80031dc <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea2:	e00a      	b.n	8004eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea4:	f7fe f99a 	bl	80031dc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e04f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	4b2b      	ldr	r3, [pc, #172]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 020c 	and.w	r2, r3, #12
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d1eb      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b25      	ldr	r3, [pc, #148]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d20c      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e032      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f00:	4b19      	ldr	r3, [pc, #100]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4916      	ldr	r1, [pc, #88]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f1e:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	490e      	ldr	r1, [pc, #56]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f32:	f000 f821 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	490a      	ldr	r1, [pc, #40]	@ (8004f6c <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	5ccb      	ldrb	r3, [r1, r3]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a09      	ldr	r2, [pc, #36]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f4e:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f8fe 	bl	8003154 <HAL_InitTick>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023c00 	.word	0x40023c00
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	08007ea4 	.word	0x08007ea4
 8004f70:	20000004 	.word	0x20000004
 8004f74:	20000008 	.word	0x20000008

08004f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b090      	sub	sp, #64	@ 0x40
 8004f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f90:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	f200 80a1 	bhi.w	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x34>
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004faa:	e09b      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b53      	ldr	r3, [pc, #332]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 8004fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fb0:	e09b      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fb2:	4b53      	ldr	r3, [pc, #332]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fb6:	e098      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d028      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fce:	4b4a      	ldr	r3, [pc, #296]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4b47      	ldr	r3, [pc, #284]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fe4:	fb03 f201 	mul.w	r2, r3, r1
 8004fe8:	2300      	movs	r3, #0
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a43      	ldr	r2, [pc, #268]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ffe:	4413      	add	r3, r2
 8005000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	2200      	movs	r2, #0
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	61fa      	str	r2, [r7, #28]
 800500a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800500e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005012:	f7fb fd3f 	bl	8000a94 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4613      	mov	r3, r2
 800501c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800501e:	e053      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005020:	4b35      	ldr	r3, [pc, #212]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	2200      	movs	r2, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	617a      	str	r2, [r7, #20]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005032:	f04f 0b00 	mov.w	fp, #0
 8005036:	4652      	mov	r2, sl
 8005038:	465b      	mov	r3, fp
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	0159      	lsls	r1, r3, #5
 8005044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005048:	0150      	lsls	r0, r2, #5
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ebb2 080a 	subs.w	r8, r2, sl
 8005052:	eb63 090b 	sbc.w	r9, r3, fp
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800506a:	ebb2 0408 	subs.w	r4, r2, r8
 800506e:	eb63 0509 	sbc.w	r5, r3, r9
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	00eb      	lsls	r3, r5, #3
 800507c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005080:	00e2      	lsls	r2, r4, #3
 8005082:	4614      	mov	r4, r2
 8005084:	461d      	mov	r5, r3
 8005086:	eb14 030a 	adds.w	r3, r4, sl
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	eb45 030b 	adc.w	r3, r5, fp
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509e:	4629      	mov	r1, r5
 80050a0:	028b      	lsls	r3, r1, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a8:	4621      	mov	r1, r4
 80050aa:	028a      	lsls	r2, r1, #10
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	2200      	movs	r2, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	60fa      	str	r2, [r7, #12]
 80050b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050bc:	f7fb fcea 	bl	8000a94 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80050d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050e2:	e002      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3740      	adds	r7, #64	@ 0x40
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	017d7840 	.word	0x017d7840

08005104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	@ (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000004 	.word	0x20000004

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005120:	f7ff fff0 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4903      	ldr	r1, [pc, #12]	@ (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40023800 	.word	0x40023800
 8005140:	08007eb4 	.word	0x08007eb4

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005148:	f7ff ffdc 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0b5b      	lsrs	r3, r3, #13
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	08007eb4 	.word	0x08007eb4

0800516c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd fdd4 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f001 f856 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e046      	b.n	80052b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a23      	ldr	r2, [pc, #140]	@ (80052c0 <HAL_TIM_Base_Start+0xb4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523e:	d01d      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_TIM_Base_Start+0xb8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <HAL_TIM_Base_Start+0xbc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_TIM_Base_Start+0xc0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_TIM_Base_Start+0xc4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_TIM_Base_Start+0xc8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIM_Base_Start+0x70>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_TIM_Base_Start+0xcc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d111      	bne.n	80052a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b06      	cmp	r3, #6
 800528c:	d010      	beq.n	80052b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	e007      	b.n	80052b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800

080052dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e04e      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a23      	ldr	r2, [pc, #140]	@ (80053a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	@ (80053a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	@ (80053ac <HAL_TIM_Base_Start_IT+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	@ (80053b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d010      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e007      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800

080053bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e041      	b.n	8005452 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f839 	bl	800545a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 ff2e 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_TIM_PWM_Start+0x24>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e022      	b.n	80054da <HAL_TIM_PWM_Start+0x6a>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d109      	bne.n	80054ae <HAL_TIM_PWM_Start+0x3e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	bf14      	ite	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	2300      	moveq	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e015      	b.n	80054da <HAL_TIM_PWM_Start+0x6a>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d109      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x58>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e008      	b.n	80054da <HAL_TIM_PWM_Start+0x6a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e07c      	b.n	80055dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x82>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f0:	e013      	b.n	800551a <HAL_TIM_PWM_Start+0xaa>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start+0x92>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005500:	e00b      	b.n	800551a <HAL_TIM_PWM_Start+0xaa>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005510:	e003      	b.n	800551a <HAL_TIM_PWM_Start+0xaa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fab4 	bl	8006a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2d      	ldr	r2, [pc, #180]	@ (80055e4 <HAL_TIM_PWM_Start+0x174>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_PWM_Start+0xcc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2c      	ldr	r2, [pc, #176]	@ (80055e8 <HAL_TIM_PWM_Start+0x178>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <HAL_TIM_PWM_Start+0xd0>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_TIM_PWM_Start+0xd2>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a22      	ldr	r2, [pc, #136]	@ (80055e4 <HAL_TIM_PWM_Start+0x174>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005568:	d01d      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ec <HAL_TIM_PWM_Start+0x17c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <HAL_TIM_PWM_Start+0x180>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <HAL_TIM_PWM_Start+0x184>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a16      	ldr	r2, [pc, #88]	@ (80055e8 <HAL_TIM_PWM_Start+0x178>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <HAL_TIM_PWM_Start+0x188>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x136>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <HAL_TIM_PWM_Start+0x18c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d111      	bne.n	80055ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b06      	cmp	r3, #6
 80055b6:	d010      	beq.n	80055da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	e007      	b.n	80055da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40001800 	.word	0x40001800

08005600 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e041      	b.n	8005696 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f839 	bl	800569e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f000 fe0c 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_IC_Start_IT+0x1e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e013      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x46>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_IC_Start_IT+0x2e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e00b      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x46>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_IC_Start_IT+0x3e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e003      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x46>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_TIM_IC_Start_IT+0x58>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e013      	b.n	8005734 <HAL_TIM_IC_Start_IT+0x80>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d104      	bne.n	800571c <HAL_TIM_IC_Start_IT+0x68>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e00b      	b.n	8005734 <HAL_TIM_IC_Start_IT+0x80>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b08      	cmp	r3, #8
 8005720:	d104      	bne.n	800572c <HAL_TIM_IC_Start_IT+0x78>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e003      	b.n	8005734 <HAL_TIM_IC_Start_IT+0x80>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005732:	b2db      	uxtb	r3, r3
 8005734:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	7bbb      	ldrb	r3, [r7, #14]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d102      	bne.n	8005742 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800573c:	7b7b      	ldrb	r3, [r7, #13]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0cc      	b.n	80058e0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_TIM_IC_Start_IT+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005754:	e013      	b.n	800577e <HAL_TIM_IC_Start_IT+0xca>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d104      	bne.n	8005766 <HAL_TIM_IC_Start_IT+0xb2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005764:	e00b      	b.n	800577e <HAL_TIM_IC_Start_IT+0xca>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d104      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0xc2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005774:	e003      	b.n	800577e <HAL_TIM_IC_Start_IT+0xca>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_TIM_IC_Start_IT+0xda>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800578c:	e013      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x102>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d104      	bne.n	800579e <HAL_TIM_IC_Start_IT+0xea>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800579c:	e00b      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x102>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_IC_Start_IT+0xfa>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ac:	e003      	b.n	80057b6 <HAL_TIM_IC_Start_IT+0x102>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d841      	bhi.n	8005840 <HAL_TIM_IC_Start_IT+0x18c>
 80057bc:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <HAL_TIM_IC_Start_IT+0x110>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	08005841 	.word	0x08005841
 80057cc:	08005841 	.word	0x08005841
 80057d0:	08005841 	.word	0x08005841
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	08005841 	.word	0x08005841
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005841 	.word	0x08005841
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	08005841 	.word	0x08005841
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005841 	.word	0x08005841
 80057f4:	0800582f 	.word	0x0800582f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0202 	orr.w	r2, r2, #2
 8005806:	60da      	str	r2, [r3, #12]
      break;
 8005808:	e01d      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0204 	orr.w	r2, r2, #4
 8005818:	60da      	str	r2, [r3, #12]
      break;
 800581a:	e014      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0208 	orr.w	r2, r2, #8
 800582a:	60da      	str	r2, [r3, #12]
      break;
 800582c:	e00b      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0210 	orr.w	r2, r2, #16
 800583c:	60da      	str	r2, [r3, #12]
      break;
 800583e:	e002      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
      break;
 8005844:	bf00      	nop
  }

  if (status == HAL_OK)
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d148      	bne.n	80058de <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2201      	movs	r2, #1
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f91b 	bl	8006a90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a22      	ldr	r2, [pc, #136]	@ (80058e8 <HAL_TIM_IC_Start_IT+0x234>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d022      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586c:	d01d      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1e      	ldr	r2, [pc, #120]	@ (80058ec <HAL_TIM_IC_Start_IT+0x238>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <HAL_TIM_IC_Start_IT+0x23c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <HAL_TIM_IC_Start_IT+0x240>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <HAL_TIM_IC_Start_IT+0x244>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <HAL_TIM_IC_Start_IT+0x248>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIM_IC_Start_IT+0x1f6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <HAL_TIM_IC_Start_IT+0x24c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d111      	bne.n	80058ce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d010      	beq.n	80058de <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	e007      	b.n	80058de <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40001800 	.word	0x40001800

08005904 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e097      	b.n	8005a48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fd fa8b 	bl	8002e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005948:	f023 0307 	bic.w	r3, r3, #7
 800594c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 fc7f 	bl	800625c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	4313      	orrs	r3, r2
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80059a4:	f023 030c 	bic.w	r3, r3, #12
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	4313      	orrs	r3, r2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	4313      	orrs	r3, r2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	4313      	orrs	r3, r2
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d110      	bne.n	8005aa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d102      	bne.n	8005a8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a86:	7b7b      	ldrb	r3, [r7, #13]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e069      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa0:	e031      	b.n	8005b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d110      	bne.n	8005aca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d102      	bne.n	8005ab4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aae:	7b3b      	ldrb	r3, [r7, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d001      	beq.n	8005ab8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e055      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ac8:	e01d      	b.n	8005b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d108      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad6:	7b7b      	ldrb	r3, [r7, #13]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d102      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005adc:	7b3b      	ldrb	r3, [r7, #12]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03e      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_TIM_Encoder_Start+0xc4>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d008      	beq.n	8005b24 <HAL_TIM_Encoder_Start+0xd4>
 8005b12:	e00f      	b.n	8005b34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 ffb7 	bl	8006a90 <TIM_CCxChannelCmd>
      break;
 8005b22:	e016      	b.n	8005b52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 ffaf 	bl	8006a90 <TIM_CCxChannelCmd>
      break;
 8005b32:	e00e      	b.n	8005b52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 ffa7 	bl	8006a90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	2104      	movs	r1, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 ffa0 	bl	8006a90 <TIM_CCxChannelCmd>
      break;
 8005b50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0202 	mvn.w	r2, #2
 8005ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc ffe6 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb2e 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb35 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0204 	mvn.w	r2, #4
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc ffc0 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fb08 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb0f 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0208 	mvn.w	r2, #8
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc ff9a 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fae2 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fae9 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d020      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc ff74 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fabc 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fac3 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0201 	mvn.w	r2, #1
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fc feb2 	bl	8002a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 ffc8 	bl	8006c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa94 	bl	8006248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0220 	mvn.w	r2, #32
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 ff9a 	bl	8006c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e088      	b.n	8005e7c <HAL_TIM_IC_ConfigChannel+0x130>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d88:	f000 fcbe 	bl	8006708 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 020c 	bic.w	r2, r2, #12
 8005d9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
 8005dae:	e060      	b.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d11c      	bne.n	8005df0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005dc6:	f000 fd42 	bl	800684e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005dd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6999      	ldr	r1, [r3, #24]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	021a      	lsls	r2, r3, #8
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	619a      	str	r2, [r3, #24]
 8005dee:	e040      	b.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11b      	bne.n	8005e2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e06:	f000 fd8f 	bl	8006928 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 020c 	bic.w	r2, r2, #12
 8005e18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	61da      	str	r2, [r3, #28]
 8005e2c:	e021      	b.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d11c      	bne.n	8005e6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e44:	f000 fdac 	bl	80069a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69d9      	ldr	r1, [r3, #28]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
 8005e6c:	e001      	b.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e0ae      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	f200 809f 	bhi.w	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005ff1 	.word	0x08005ff1
 8005ec0:	08005ff1 	.word	0x08005ff1
 8005ec4:	08005ff1 	.word	0x08005ff1
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005ff1 	.word	0x08005ff1
 8005ed0:	08005ff1 	.word	0x08005ff1
 8005ed4:	08005ff1 	.word	0x08005ff1
 8005ed8:	08005f6f 	.word	0x08005f6f
 8005edc:	08005ff1 	.word	0x08005ff1
 8005ee0:	08005ff1 	.word	0x08005ff1
 8005ee4:	08005ff1 	.word	0x08005ff1
 8005ee8:	08005faf 	.word	0x08005faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fa58 	bl	80063a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	619a      	str	r2, [r3, #24]
      break;
 8005f2a:	e064      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 faa8 	bl	8006488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	021a      	lsls	r2, r3, #8
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	619a      	str	r2, [r3, #24]
      break;
 8005f6c:	e043      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fafd 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0208 	orr.w	r2, r2, #8
 8005f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0204 	bic.w	r2, r2, #4
 8005f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69d9      	ldr	r1, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	61da      	str	r2, [r3, #28]
      break;
 8005fac:	e023      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb51 	bl	800665c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	61da      	str	r2, [r3, #28]
      break;
 8005fee:	e002      	b.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIM_ConfigClockSource+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e0b4      	b.n	800618e <HAL_TIM_ConfigClockSource+0x186>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800604a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800605c:	d03e      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0xd4>
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006062:	f200 8087 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	f000 8086 	beq.w	800617a <HAL_TIM_ConfigClockSource+0x172>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006072:	d87f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b70      	cmp	r3, #112	@ 0x70
 8006076:	d01a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0xa6>
 8006078:	2b70      	cmp	r3, #112	@ 0x70
 800607a:	d87b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b60      	cmp	r3, #96	@ 0x60
 800607e:	d050      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x11a>
 8006080:	2b60      	cmp	r3, #96	@ 0x60
 8006082:	d877      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b50      	cmp	r3, #80	@ 0x50
 8006086:	d03c      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0xfa>
 8006088:	2b50      	cmp	r3, #80	@ 0x50
 800608a:	d873      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b40      	cmp	r3, #64	@ 0x40
 800608e:	d058      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x13a>
 8006090:	2b40      	cmp	r3, #64	@ 0x40
 8006092:	d86f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d064      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b30      	cmp	r3, #48	@ 0x30
 800609a:	d86b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d060      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d867      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d05a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060ac:	e062      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060be:	f000 fcc7 	bl	8006a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
      break;
 80060da:	e04f      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ec:	f000 fcb0 	bl	8006a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060fe:	609a      	str	r2, [r3, #8]
      break;
 8006100:	e03c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fb6e 	bl	80067f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2150      	movs	r1, #80	@ 0x50
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc7d 	bl	8006a1a <TIM_ITRx_SetConfig>
      break;
 8006120:	e02c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 fbca 	bl	80068c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2160      	movs	r1, #96	@ 0x60
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fc6d 	bl	8006a1a <TIM_ITRx_SetConfig>
      break;
 8006140:	e01c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	461a      	mov	r2, r3
 8006150:	f000 fb4e 	bl	80067f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2140      	movs	r1, #64	@ 0x40
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc5d 	bl	8006a1a <TIM_ITRx_SetConfig>
      break;
 8006160:	e00c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fc54 	bl	8006a1a <TIM_ITRx_SetConfig>
      break;
 8006172:	e003      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e000      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800617a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d831      	bhi.n	8006210 <HAL_TIM_ReadCapturedValue+0x78>
 80061ac:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061e9 	.word	0x080061e9
 80061b8:	08006211 	.word	0x08006211
 80061bc:	08006211 	.word	0x08006211
 80061c0:	08006211 	.word	0x08006211
 80061c4:	080061f3 	.word	0x080061f3
 80061c8:	08006211 	.word	0x08006211
 80061cc:	08006211 	.word	0x08006211
 80061d0:	08006211 	.word	0x08006211
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006211 	.word	0x08006211
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006211 	.word	0x08006211
 80061e4:	08006207 	.word	0x08006207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	60fb      	str	r3, [r7, #12]

      break;
 80061f0:	e00f      	b.n	8006212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	60fb      	str	r3, [r7, #12]

      break;
 80061fa:	e00a      	b.n	8006212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	60fb      	str	r3, [r7, #12]

      break;
 8006204:	e005      	b.n	8006212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	60fb      	str	r3, [r7, #12]

      break;
 800620e:	e000      	b.n	8006212 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006210:	bf00      	nop
  }

  return tmpreg;
 8006212:	68fb      	ldr	r3, [r7, #12]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a43      	ldr	r2, [pc, #268]	@ (800637c <TIM_Base_SetConfig+0x120>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a40      	ldr	r2, [pc, #256]	@ (8006380 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3f      	ldr	r2, [pc, #252]	@ (8006384 <TIM_Base_SetConfig+0x128>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3e      	ldr	r2, [pc, #248]	@ (8006388 <TIM_Base_SetConfig+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3d      	ldr	r2, [pc, #244]	@ (800638c <TIM_Base_SetConfig+0x130>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a32      	ldr	r2, [pc, #200]	@ (800637c <TIM_Base_SetConfig+0x120>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02b      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062bc:	d027      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006380 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d023      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006384 <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01f      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006388 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01b      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	@ (800638c <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d017      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006390 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006394 <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00f      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a29      	ldr	r2, [pc, #164]	@ (8006398 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a28      	ldr	r2, [pc, #160]	@ (800639c <TIM_Base_SetConfig+0x140>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a27      	ldr	r2, [pc, #156]	@ (80063a0 <TIM_Base_SetConfig+0x144>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a26      	ldr	r2, [pc, #152]	@ (80063a4 <TIM_Base_SetConfig+0x148>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a0e      	ldr	r2, [pc, #56]	@ (800637c <TIM_Base_SetConfig+0x120>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_Base_SetConfig+0xf2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a10      	ldr	r2, [pc, #64]	@ (800638c <TIM_Base_SetConfig+0x130>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d103      	bne.n	8006356 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f043 0204 	orr.w	r2, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40001800 	.word	0x40001800
 80063a0:	40001c00 	.word	0x40001c00
 80063a4:	40002000 	.word	0x40002000

080063a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0201 	bic.w	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0302 	bic.w	r3, r3, #2
 80063f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a20      	ldr	r2, [pc, #128]	@ (8006480 <TIM_OC1_SetConfig+0xd8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC1_SetConfig+0x64>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1f      	ldr	r2, [pc, #124]	@ (8006484 <TIM_OC1_SetConfig+0xdc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d10c      	bne.n	8006426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0308 	bic.w	r3, r3, #8
 8006412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <TIM_OC1_SetConfig+0xd8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC1_SetConfig+0x8e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a14      	ldr	r2, [pc, #80]	@ (8006484 <TIM_OC1_SetConfig+0xdc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d111      	bne.n	800645a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800643c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40010000 	.word	0x40010000
 8006484:	40010400 	.word	0x40010400

08006488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f023 0210 	bic.w	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a22      	ldr	r2, [pc, #136]	@ (800656c <TIM_OC2_SetConfig+0xe4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC2_SetConfig+0x68>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a21      	ldr	r2, [pc, #132]	@ (8006570 <TIM_OC2_SetConfig+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10d      	bne.n	800650c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800650a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a17      	ldr	r2, [pc, #92]	@ (800656c <TIM_OC2_SetConfig+0xe4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x94>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d113      	bne.n	8006544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40010400 	.word	0x40010400

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a21      	ldr	r2, [pc, #132]	@ (8006654 <TIM_OC3_SetConfig+0xe0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC3_SetConfig+0x66>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a20      	ldr	r2, [pc, #128]	@ (8006658 <TIM_OC3_SetConfig+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10d      	bne.n	80065f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a16      	ldr	r2, [pc, #88]	@ (8006654 <TIM_OC3_SetConfig+0xe0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC3_SetConfig+0x92>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <TIM_OC3_SetConfig+0xe4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d113      	bne.n	800662e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800660c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400

0800665c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	031b      	lsls	r3, r3, #12
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <TIM_OC4_SetConfig+0xa4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC4_SetConfig+0x68>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <TIM_OC4_SetConfig+0xa8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d109      	bne.n	80066d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f023 0201 	bic.w	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a28      	ldr	r2, [pc, #160]	@ (80067d4 <TIM_TI1_SetConfig+0xcc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01b      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673c:	d017      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a25      	ldr	r2, [pc, #148]	@ (80067d8 <TIM_TI1_SetConfig+0xd0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a24      	ldr	r2, [pc, #144]	@ (80067dc <TIM_TI1_SetConfig+0xd4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a23      	ldr	r2, [pc, #140]	@ (80067e0 <TIM_TI1_SetConfig+0xd8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4a22      	ldr	r2, [pc, #136]	@ (80067e4 <TIM_TI1_SetConfig+0xdc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a21      	ldr	r2, [pc, #132]	@ (80067e8 <TIM_TI1_SetConfig+0xe0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_TI1_SetConfig+0x66>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <TIM_TI1_SetConfig+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <TIM_TI1_SetConfig+0x6a>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <TIM_TI1_SetConfig+0x6c>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	e003      	b.n	8006792 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f023 030a 	bic.w	r3, r3, #10
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f003 030a 	and.w	r3, r3, #10
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40001800 	.word	0x40001800

080067f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 030a 	bic.w	r3, r3, #10
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800684e:	b480      	push	{r7}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0210 	bic.w	r2, r3, #16
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800688c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	031b      	lsls	r3, r3, #12
 8006892:	b29b      	uxth	r3, r3
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0210 	bic.w	r2, r3, #16
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	031b      	lsls	r3, r3, #12
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006964:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006978:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	031b      	lsls	r3, r3, #12
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80069f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	031b      	lsls	r3, r3, #12
 80069f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b085      	sub	sp, #20
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f043 0307 	orr.w	r3, r3, #7
 8006a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	609a      	str	r2, [r3, #8]
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	021a      	lsls	r2, r3, #8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e05a      	b.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b40:	d01d      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d018      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a17      	ldr	r2, [pc, #92]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d10c      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	40010400 	.word	0x40010400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40001800 	.word	0x40001800

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e03d      	b.n	8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e042      	b.n	8006d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fc f93e 	bl	8002f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2224      	movs	r2, #36	@ 0x24
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fd1b 	bl	8007720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695a      	ldr	r2, [r3, #20]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d121      	bne.n	8006d9e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_UART_Transmit_IT+0x26>
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e01a      	b.n	8006da0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2221      	movs	r2, #33	@ 0x21
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d112      	bne.n	8006dec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_UART_Receive_IT+0x26>
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e00b      	b.n	8006dee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	461a      	mov	r2, r3
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fac8 	bl	8007378 <UART_Start_Receive_IT>
 8006de8:	4603      	mov	r3, r0
 8006dea:	e000      	b.n	8006dee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10f      	bne.n	8006e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_UART_IRQHandler+0x66>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fba4 	bl	80075a4 <UART_Receive_IT>
      return;
 8006e5c:	e273      	b.n	8007346 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80de 	beq.w	8007024 <HAL_UART_IRQHandler+0x22c>
 8006e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80d1 	beq.w	8007024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xae>
 8006e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9e:	f043 0201 	orr.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_UART_IRQHandler+0xd2>
 8006eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec2:	f043 0202 	orr.w	r2, r3, #2
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_UART_IRQHandler+0xf6>
 8006ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	f043 0204 	orr.w	r2, r3, #4
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d011      	beq.n	8006f1e <HAL_UART_IRQHandler+0x126>
 8006efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f043 0208 	orr.w	r2, r3, #8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 820a 	beq.w	800733c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_UART_IRQHandler+0x14e>
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb2f 	bl	80075a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b40      	cmp	r3, #64	@ 0x40
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <HAL_UART_IRQHandler+0x17a>
 8006f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d04f      	beq.n	8007012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa3a 	bl	80073ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d141      	bne.n	800700a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1d9      	bne.n	8006f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d013      	beq.n	8007002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	4a8a      	ldr	r2, [pc, #552]	@ (8007208 <HAL_UART_IRQHandler+0x410>)
 8006fe0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fd fa77 	bl	80044da <HAL_DMA_Abort_IT>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007000:	e00e      	b.n	8007020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9a2 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007008:	e00a      	b.n	8007020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f99e 	bl	800734c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	e006      	b.n	8007020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f99a 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800701e:	e18d      	b.n	800733c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007020:	bf00      	nop
    return;
 8007022:	e18b      	b.n	800733c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	2b01      	cmp	r3, #1
 800702a:	f040 8167 	bne.w	80072fc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8160 	beq.w	80072fc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8159 	beq.w	80072fc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60bb      	str	r3, [r7, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	f040 80ce 	bne.w	800720c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800707c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a9 	beq.w	80071d8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800708a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800708e:	429a      	cmp	r2, r3
 8007090:	f080 80a2 	bcs.w	80071d8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800709a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a6:	f000 8088 	beq.w	80071ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80070d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1d9      	bne.n	80070aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800711a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800711e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800712c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e1      	bne.n	80070f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3314      	adds	r3, #20
 8007138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800715c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e3      	bne.n	8007132 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800719c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800719e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e3      	bne.n	8007178 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd f920 	bl	80043fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8c5 	bl	8007360 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071d6:	e0b3      	b.n	8007340 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071e0:	429a      	cmp	r2, r3
 80071e2:	f040 80ad 	bne.w	8007340 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f0:	f040 80a6 	bne.w	8007340 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f8ad 	bl	8007360 <HAL_UARTEx_RxEventCallback>
      return;
 8007206:	e09b      	b.n	8007340 <HAL_UART_IRQHandler+0x548>
 8007208:	080074b3 	.word	0x080074b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808e 	beq.w	8007344 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8089 	beq.w	8007344 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007256:	647a      	str	r2, [r7, #68]	@ 0x44
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800725c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e3      	bne.n	8007232 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3314      	adds	r3, #20
 800728a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800728e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007290:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800729c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e3      	bne.n	800726a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80072d4:	61fa      	str	r2, [r7, #28]
 80072d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	69b9      	ldr	r1, [r7, #24]
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	617b      	str	r3, [r7, #20]
   return(result);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e3      	bne.n	80072b0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f833 	bl	8007360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072fa:	e023      	b.n	8007344 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <HAL_UART_IRQHandler+0x524>
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800730c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8dd 	bl	80074d4 <UART_Transmit_IT>
    return;
 800731a:	e014      	b.n	8007346 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <HAL_UART_IRQHandler+0x54e>
 8007328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800732c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f91d 	bl	8007574 <UART_EndTransmit_IT>
    return;
 800733a:	e004      	b.n	8007346 <HAL_UART_IRQHandler+0x54e>
    return;
 800733c:	bf00      	nop
 800733e:	e002      	b.n	8007346 <HAL_UART_IRQHandler+0x54e>
      return;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <HAL_UART_IRQHandler+0x54e>
      return;
 8007344:	bf00      	nop
  }
}
 8007346:	37e8      	adds	r7, #232	@ 0xe8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	88fa      	ldrh	r2, [r7, #6]
 8007396:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2222      	movs	r2, #34	@ 0x22
 80073a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0220 	orr.w	r2, r2, #32
 80073dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b095      	sub	sp, #84	@ 0x54
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800740a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007414:	643a      	str	r2, [r7, #64]	@ 0x40
 8007416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800741a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	61fb      	str	r3, [r7, #28]
   return(result);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800744e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007460:	2b01      	cmp	r3, #1
 8007462:	d119      	bne.n	8007498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	330c      	adds	r3, #12
 800746a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60bb      	str	r3, [r7, #8]
   return(result);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	647b      	str	r3, [r7, #68]	@ 0x44
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007484:	61ba      	str	r2, [r7, #24]
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074a6:	bf00      	nop
 80074a8:	3754      	adds	r7, #84	@ 0x54
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7ff ff40 	bl	800734c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b21      	cmp	r3, #33	@ 0x21
 80074e6:	d13e      	bne.n	8007566 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074f0:	d114      	bne.n	800751c <UART_Transmit_IT+0x48>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d110      	bne.n	800751c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	1c9a      	adds	r2, r3, #2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	621a      	str	r2, [r3, #32]
 800751a:	e008      	b.n	800752e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	1c59      	adds	r1, r3, #1
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6211      	str	r1, [r2, #32]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29b      	uxth	r3, r3
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4619      	mov	r1, r3
 800753c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10f      	bne.n	8007562 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007550:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007560:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007566:	2302      	movs	r3, #2
  }
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800758a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7fb f8b1 	bl	80026fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08c      	sub	sp, #48	@ 0x30
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b22      	cmp	r3, #34	@ 0x22
 80075be:	f040 80aa 	bne.w	8007716 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ca:	d115      	bne.n	80075f8 <UART_Receive_IT+0x54>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d111      	bne.n	80075f8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f0:	1c9a      	adds	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80075f6:	e024      	b.n	8007642 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007606:	d007      	beq.n	8007618 <UART_Receive_IT+0x74>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <UART_Receive_IT+0x82>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e008      	b.n	8007638 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007632:	b2da      	uxtb	r2, r3
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29b      	uxth	r3, r3
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	4619      	mov	r1, r3
 8007650:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007652:	2b00      	cmp	r3, #0
 8007654:	d15d      	bne.n	8007712 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0220 	bic.w	r2, r2, #32
 8007664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0201 	bic.w	r2, r2, #1
 8007684:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d135      	bne.n	8007708 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	613b      	str	r3, [r7, #16]
   return(result);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c2:	623a      	str	r2, [r7, #32]
 80076c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	69f9      	ldr	r1, [r7, #28]
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d10a      	bne.n	80076fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe2d 	bl	8007360 <HAL_UARTEx_RxEventCallback>
 8007706:	e002      	b.n	800770e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fb f817 	bl	800273c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	e002      	b.n	8007718 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e000      	b.n	8007718 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007716:	2302      	movs	r3, #2
  }
}
 8007718:	4618      	mov	r0, r3
 800771a:	3730      	adds	r7, #48	@ 0x30
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007724:	b0c0      	sub	sp, #256	@ 0x100
 8007726:	af00      	add	r7, sp, #0
 8007728:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	68d9      	ldr	r1, [r3, #12]
 800773e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	ea40 0301 	orr.w	r3, r0, r1
 8007748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	431a      	orrs	r2, r3
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	431a      	orrs	r2, r3
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	4313      	orrs	r3, r2
 8007768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007778:	f021 010c 	bic.w	r1, r1, #12
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007786:	430b      	orrs	r3, r1
 8007788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779a:	6999      	ldr	r1, [r3, #24]
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	ea40 0301 	orr.w	r3, r0, r1
 80077a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b8f      	ldr	r3, [pc, #572]	@ (80079ec <UART_SetConfig+0x2cc>)
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d005      	beq.n	80077c0 <UART_SetConfig+0xa0>
 80077b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b8d      	ldr	r3, [pc, #564]	@ (80079f0 <UART_SetConfig+0x2d0>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d104      	bne.n	80077ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077c0:	f7fd fcc0 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 80077c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077c8:	e003      	b.n	80077d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077ca:	f7fd fca7 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 80077ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077dc:	f040 810c 	bne.w	80079f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e4:	2200      	movs	r2, #0
 80077e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	1891      	adds	r1, r2, r2
 80077f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077fa:	415b      	adcs	r3, r3
 80077fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007802:	4621      	mov	r1, r4
 8007804:	eb12 0801 	adds.w	r8, r2, r1
 8007808:	4629      	mov	r1, r5
 800780a:	eb43 0901 	adc.w	r9, r3, r1
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800781a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800781e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007822:	4690      	mov	r8, r2
 8007824:	4699      	mov	r9, r3
 8007826:	4623      	mov	r3, r4
 8007828:	eb18 0303 	adds.w	r3, r8, r3
 800782c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007830:	462b      	mov	r3, r5
 8007832:	eb49 0303 	adc.w	r3, r9, r3
 8007836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800783a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007846:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800784a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800784e:	460b      	mov	r3, r1
 8007850:	18db      	adds	r3, r3, r3
 8007852:	653b      	str	r3, [r7, #80]	@ 0x50
 8007854:	4613      	mov	r3, r2
 8007856:	eb42 0303 	adc.w	r3, r2, r3
 800785a:	657b      	str	r3, [r7, #84]	@ 0x54
 800785c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007864:	f7f9 f916 	bl	8000a94 <__aeabi_uldivmod>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4b61      	ldr	r3, [pc, #388]	@ (80079f4 <UART_SetConfig+0x2d4>)
 800786e:	fba3 2302 	umull	r2, r3, r3, r2
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	011c      	lsls	r4, r3, #4
 8007876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787a:	2200      	movs	r2, #0
 800787c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007880:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	1891      	adds	r1, r2, r2
 800788e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007890:	415b      	adcs	r3, r3
 8007892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007898:	4641      	mov	r1, r8
 800789a:	eb12 0a01 	adds.w	sl, r2, r1
 800789e:	4649      	mov	r1, r9
 80078a0:	eb43 0b01 	adc.w	fp, r3, r1
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b8:	4692      	mov	sl, r2
 80078ba:	469b      	mov	fp, r3
 80078bc:	4643      	mov	r3, r8
 80078be:	eb1a 0303 	adds.w	r3, sl, r3
 80078c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078c6:	464b      	mov	r3, r9
 80078c8:	eb4b 0303 	adc.w	r3, fp, r3
 80078cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078e4:	460b      	mov	r3, r1
 80078e6:	18db      	adds	r3, r3, r3
 80078e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ea:	4613      	mov	r3, r2
 80078ec:	eb42 0303 	adc.w	r3, r2, r3
 80078f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078fa:	f7f9 f8cb 	bl	8000a94 <__aeabi_uldivmod>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4611      	mov	r1, r2
 8007904:	4b3b      	ldr	r3, [pc, #236]	@ (80079f4 <UART_SetConfig+0x2d4>)
 8007906:	fba3 2301 	umull	r2, r3, r3, r1
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	2264      	movs	r2, #100	@ 0x64
 800790e:	fb02 f303 	mul.w	r3, r2, r3
 8007912:	1acb      	subs	r3, r1, r3
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800791a:	4b36      	ldr	r3, [pc, #216]	@ (80079f4 <UART_SetConfig+0x2d4>)
 800791c:	fba3 2302 	umull	r2, r3, r3, r2
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007928:	441c      	add	r4, r3
 800792a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800792e:	2200      	movs	r2, #0
 8007930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007934:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	1891      	adds	r1, r2, r2
 8007942:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007944:	415b      	adcs	r3, r3
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800794c:	4641      	mov	r1, r8
 800794e:	1851      	adds	r1, r2, r1
 8007950:	6339      	str	r1, [r7, #48]	@ 0x30
 8007952:	4649      	mov	r1, r9
 8007954:	414b      	adcs	r3, r1
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007964:	4659      	mov	r1, fp
 8007966:	00cb      	lsls	r3, r1, #3
 8007968:	4651      	mov	r1, sl
 800796a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796e:	4651      	mov	r1, sl
 8007970:	00ca      	lsls	r2, r1, #3
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	4603      	mov	r3, r0
 8007978:	4642      	mov	r2, r8
 800797a:	189b      	adds	r3, r3, r2
 800797c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007980:	464b      	mov	r3, r9
 8007982:	460a      	mov	r2, r1
 8007984:	eb42 0303 	adc.w	r3, r2, r3
 8007988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007998:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800799c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079a0:	460b      	mov	r3, r1
 80079a2:	18db      	adds	r3, r3, r3
 80079a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079a6:	4613      	mov	r3, r2
 80079a8:	eb42 0303 	adc.w	r3, r2, r3
 80079ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079b6:	f7f9 f86d 	bl	8000a94 <__aeabi_uldivmod>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <UART_SetConfig+0x2d4>)
 80079c0:	fba3 1302 	umull	r1, r3, r3, r2
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	2164      	movs	r1, #100	@ 0x64
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	3332      	adds	r3, #50	@ 0x32
 80079d2:	4a08      	ldr	r2, [pc, #32]	@ (80079f4 <UART_SetConfig+0x2d4>)
 80079d4:	fba2 2303 	umull	r2, r3, r2, r3
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	f003 0207 	and.w	r2, r3, #7
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4422      	add	r2, r4
 80079e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079e8:	e106      	b.n	8007bf8 <UART_SetConfig+0x4d8>
 80079ea:	bf00      	nop
 80079ec:	40011000 	.word	0x40011000
 80079f0:	40011400 	.word	0x40011400
 80079f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	1891      	adds	r1, r2, r2
 8007a10:	6239      	str	r1, [r7, #32]
 8007a12:	415b      	adcs	r3, r3
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	1854      	adds	r4, r2, r1
 8007a1e:	4649      	mov	r1, r9
 8007a20:	eb43 0501 	adc.w	r5, r3, r1
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	00eb      	lsls	r3, r5, #3
 8007a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a32:	00e2      	lsls	r2, r4, #3
 8007a34:	4614      	mov	r4, r2
 8007a36:	461d      	mov	r5, r3
 8007a38:	4643      	mov	r3, r8
 8007a3a:	18e3      	adds	r3, r4, r3
 8007a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a40:	464b      	mov	r3, r9
 8007a42:	eb45 0303 	adc.w	r3, r5, r3
 8007a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a66:	4629      	mov	r1, r5
 8007a68:	008b      	lsls	r3, r1, #2
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a70:	4621      	mov	r1, r4
 8007a72:	008a      	lsls	r2, r1, #2
 8007a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a78:	f7f9 f80c 	bl	8000a94 <__aeabi_uldivmod>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4b60      	ldr	r3, [pc, #384]	@ (8007c04 <UART_SetConfig+0x4e4>)
 8007a82:	fba3 2302 	umull	r2, r3, r3, r2
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	011c      	lsls	r4, r3, #4
 8007a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	1891      	adds	r1, r2, r2
 8007aa2:	61b9      	str	r1, [r7, #24]
 8007aa4:	415b      	adcs	r3, r3
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aac:	4641      	mov	r1, r8
 8007aae:	1851      	adds	r1, r2, r1
 8007ab0:	6139      	str	r1, [r7, #16]
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	414b      	adcs	r3, r1
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ac4:	4659      	mov	r1, fp
 8007ac6:	00cb      	lsls	r3, r1, #3
 8007ac8:	4651      	mov	r1, sl
 8007aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ace:	4651      	mov	r1, sl
 8007ad0:	00ca      	lsls	r2, r1, #3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4642      	mov	r2, r8
 8007ada:	189b      	adds	r3, r3, r2
 8007adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	eb42 0303 	adc.w	r3, r2, r3
 8007ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007af6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b04:	4649      	mov	r1, r9
 8007b06:	008b      	lsls	r3, r1, #2
 8007b08:	4641      	mov	r1, r8
 8007b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0e:	4641      	mov	r1, r8
 8007b10:	008a      	lsls	r2, r1, #2
 8007b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b16:	f7f8 ffbd 	bl	8000a94 <__aeabi_uldivmod>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4b38      	ldr	r3, [pc, #224]	@ (8007c04 <UART_SetConfig+0x4e4>)
 8007b22:	fba3 2301 	umull	r2, r3, r3, r1
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2264      	movs	r2, #100	@ 0x64
 8007b2a:	fb02 f303 	mul.w	r3, r2, r3
 8007b2e:	1acb      	subs	r3, r1, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	3332      	adds	r3, #50	@ 0x32
 8007b34:	4a33      	ldr	r2, [pc, #204]	@ (8007c04 <UART_SetConfig+0x4e4>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b40:	441c      	add	r4, r3
 8007b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b46:	2200      	movs	r2, #0
 8007b48:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	1891      	adds	r1, r2, r2
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	415b      	adcs	r3, r3
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b60:	4641      	mov	r1, r8
 8007b62:	1851      	adds	r1, r2, r1
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	4649      	mov	r1, r9
 8007b68:	414b      	adcs	r3, r1
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b78:	4659      	mov	r1, fp
 8007b7a:	00cb      	lsls	r3, r1, #3
 8007b7c:	4651      	mov	r1, sl
 8007b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b82:	4651      	mov	r1, sl
 8007b84:	00ca      	lsls	r2, r1, #3
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	189b      	adds	r3, r3, r2
 8007b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b92:	464b      	mov	r3, r9
 8007b94:	460a      	mov	r2, r1
 8007b96:	eb42 0303 	adc.w	r3, r2, r3
 8007b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ba6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	008b      	lsls	r3, r1, #2
 8007bb8:	4641      	mov	r1, r8
 8007bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	008a      	lsls	r2, r1, #2
 8007bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bc6:	f7f8 ff65 	bl	8000a94 <__aeabi_uldivmod>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <UART_SetConfig+0x4e4>)
 8007bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	2164      	movs	r1, #100	@ 0x64
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	3332      	adds	r3, #50	@ 0x32
 8007be2:	4a08      	ldr	r2, [pc, #32]	@ (8007c04 <UART_SetConfig+0x4e4>)
 8007be4:	fba2 2303 	umull	r2, r3, r2, r3
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	f003 020f 	and.w	r2, r3, #15
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4422      	add	r2, r4
 8007bf6:	609a      	str	r2, [r3, #8]
}
 8007bf8:	bf00      	nop
 8007bfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c04:	51eb851f 	.word	0x51eb851f

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1b64      	subs	r4, r4, r5
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2600      	movs	r6, #0
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4d0b      	ldr	r5, [pc, #44]	@ (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f000 f826 	bl	8007c7c <_init>
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2600      	movs	r6, #0
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	08007ec4 	.word	0x08007ec4
 8007c54:	08007ec4 	.word	0x08007ec4
 8007c58:	08007ec4 	.word	0x08007ec4
 8007c5c:	08007ec8 	.word	0x08007ec8

08007c60 <memcpy>:
 8007c60:	440a      	add	r2, r1
 8007c62:	4291      	cmp	r1, r2
 8007c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c68:	d100      	bne.n	8007c6c <memcpy+0xc>
 8007c6a:	4770      	bx	lr
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c76:	4291      	cmp	r1, r2
 8007c78:	d1f9      	bne.n	8007c6e <memcpy+0xe>
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
