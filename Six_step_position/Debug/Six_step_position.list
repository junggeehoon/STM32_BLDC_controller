
Six_step_position.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b70  08005b70  00006b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00007024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00006b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08005ba0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007024  2**0
                  CONTENTS
 10 .bss          000001f8  20000024  20000024  00007024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00007024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb0b  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc6  00000000  00000000  00012b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00014728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091e  00000000  00000000  000152e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020006  00000000  00000000  00015bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfa8  00000000  00000000  00035c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caef0  00000000  00000000  00042bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010da9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003210  00000000  00000000  0010dae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00110cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b58 	.word	0x08005b58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08005b58 	.word	0x08005b58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b988 	b.w	8000908 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	468e      	mov	lr, r1
 8000618:	4604      	mov	r4, r0
 800061a:	4688      	mov	r8, r1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d14a      	bne.n	80006b6 <__udivmoddi4+0xa6>
 8000620:	428a      	cmp	r2, r1
 8000622:	4617      	mov	r7, r2
 8000624:	d962      	bls.n	80006ec <__udivmoddi4+0xdc>
 8000626:	fab2 f682 	clz	r6, r2
 800062a:	b14e      	cbz	r6, 8000640 <__udivmoddi4+0x30>
 800062c:	f1c6 0320 	rsb	r3, r6, #32
 8000630:	fa01 f806 	lsl.w	r8, r1, r6
 8000634:	fa20 f303 	lsr.w	r3, r0, r3
 8000638:	40b7      	lsls	r7, r6
 800063a:	ea43 0808 	orr.w	r8, r3, r8
 800063e:	40b4      	lsls	r4, r6
 8000640:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000644:	fa1f fc87 	uxth.w	ip, r7
 8000648:	fbb8 f1fe 	udiv	r1, r8, lr
 800064c:	0c23      	lsrs	r3, r4, #16
 800064e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000652:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000656:	fb01 f20c 	mul.w	r2, r1, ip
 800065a:	429a      	cmp	r2, r3
 800065c:	d909      	bls.n	8000672 <__udivmoddi4+0x62>
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	f101 30ff 	add.w	r0, r1, #4294967295
 8000664:	f080 80ea 	bcs.w	800083c <__udivmoddi4+0x22c>
 8000668:	429a      	cmp	r2, r3
 800066a:	f240 80e7 	bls.w	800083c <__udivmoddi4+0x22c>
 800066e:	3902      	subs	r1, #2
 8000670:	443b      	add	r3, r7
 8000672:	1a9a      	subs	r2, r3, r2
 8000674:	b2a3      	uxth	r3, r4
 8000676:	fbb2 f0fe 	udiv	r0, r2, lr
 800067a:	fb0e 2210 	mls	r2, lr, r0, r2
 800067e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000682:	fb00 fc0c 	mul.w	ip, r0, ip
 8000686:	459c      	cmp	ip, r3
 8000688:	d909      	bls.n	800069e <__udivmoddi4+0x8e>
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000690:	f080 80d6 	bcs.w	8000840 <__udivmoddi4+0x230>
 8000694:	459c      	cmp	ip, r3
 8000696:	f240 80d3 	bls.w	8000840 <__udivmoddi4+0x230>
 800069a:	443b      	add	r3, r7
 800069c:	3802      	subs	r0, #2
 800069e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006a2:	eba3 030c 	sub.w	r3, r3, ip
 80006a6:	2100      	movs	r1, #0
 80006a8:	b11d      	cbz	r5, 80006b2 <__udivmoddi4+0xa2>
 80006aa:	40f3      	lsrs	r3, r6
 80006ac:	2200      	movs	r2, #0
 80006ae:	e9c5 3200 	strd	r3, r2, [r5]
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d905      	bls.n	80006c6 <__udivmoddi4+0xb6>
 80006ba:	b10d      	cbz	r5, 80006c0 <__udivmoddi4+0xb0>
 80006bc:	e9c5 0100 	strd	r0, r1, [r5]
 80006c0:	2100      	movs	r1, #0
 80006c2:	4608      	mov	r0, r1
 80006c4:	e7f5      	b.n	80006b2 <__udivmoddi4+0xa2>
 80006c6:	fab3 f183 	clz	r1, r3
 80006ca:	2900      	cmp	r1, #0
 80006cc:	d146      	bne.n	800075c <__udivmoddi4+0x14c>
 80006ce:	4573      	cmp	r3, lr
 80006d0:	d302      	bcc.n	80006d8 <__udivmoddi4+0xc8>
 80006d2:	4282      	cmp	r2, r0
 80006d4:	f200 8105 	bhi.w	80008e2 <__udivmoddi4+0x2d2>
 80006d8:	1a84      	subs	r4, r0, r2
 80006da:	eb6e 0203 	sbc.w	r2, lr, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	4690      	mov	r8, r2
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d0e5      	beq.n	80006b2 <__udivmoddi4+0xa2>
 80006e6:	e9c5 4800 	strd	r4, r8, [r5]
 80006ea:	e7e2      	b.n	80006b2 <__udivmoddi4+0xa2>
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	f000 8090 	beq.w	8000812 <__udivmoddi4+0x202>
 80006f2:	fab2 f682 	clz	r6, r2
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	f040 80a4 	bne.w	8000844 <__udivmoddi4+0x234>
 80006fc:	1a8a      	subs	r2, r1, r2
 80006fe:	0c03      	lsrs	r3, r0, #16
 8000700:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000704:	b280      	uxth	r0, r0
 8000706:	b2bc      	uxth	r4, r7
 8000708:	2101      	movs	r1, #1
 800070a:	fbb2 fcfe 	udiv	ip, r2, lr
 800070e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000716:	fb04 f20c 	mul.w	r2, r4, ip
 800071a:	429a      	cmp	r2, r3
 800071c:	d907      	bls.n	800072e <__udivmoddi4+0x11e>
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000724:	d202      	bcs.n	800072c <__udivmoddi4+0x11c>
 8000726:	429a      	cmp	r2, r3
 8000728:	f200 80e0 	bhi.w	80008ec <__udivmoddi4+0x2dc>
 800072c:	46c4      	mov	ip, r8
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	fbb3 f2fe 	udiv	r2, r3, lr
 8000734:	fb0e 3312 	mls	r3, lr, r2, r3
 8000738:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800073c:	fb02 f404 	mul.w	r4, r2, r4
 8000740:	429c      	cmp	r4, r3
 8000742:	d907      	bls.n	8000754 <__udivmoddi4+0x144>
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	f102 30ff 	add.w	r0, r2, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x142>
 800074c:	429c      	cmp	r4, r3
 800074e:	f200 80ca 	bhi.w	80008e6 <__udivmoddi4+0x2d6>
 8000752:	4602      	mov	r2, r0
 8000754:	1b1b      	subs	r3, r3, r4
 8000756:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800075a:	e7a5      	b.n	80006a8 <__udivmoddi4+0x98>
 800075c:	f1c1 0620 	rsb	r6, r1, #32
 8000760:	408b      	lsls	r3, r1
 8000762:	fa22 f706 	lsr.w	r7, r2, r6
 8000766:	431f      	orrs	r7, r3
 8000768:	fa0e f401 	lsl.w	r4, lr, r1
 800076c:	fa20 f306 	lsr.w	r3, r0, r6
 8000770:	fa2e fe06 	lsr.w	lr, lr, r6
 8000774:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000778:	4323      	orrs	r3, r4
 800077a:	fa00 f801 	lsl.w	r8, r0, r1
 800077e:	fa1f fc87 	uxth.w	ip, r7
 8000782:	fbbe f0f9 	udiv	r0, lr, r9
 8000786:	0c1c      	lsrs	r4, r3, #16
 8000788:	fb09 ee10 	mls	lr, r9, r0, lr
 800078c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000790:	fb00 fe0c 	mul.w	lr, r0, ip
 8000794:	45a6      	cmp	lr, r4
 8000796:	fa02 f201 	lsl.w	r2, r2, r1
 800079a:	d909      	bls.n	80007b0 <__udivmoddi4+0x1a0>
 800079c:	193c      	adds	r4, r7, r4
 800079e:	f100 3aff 	add.w	sl, r0, #4294967295
 80007a2:	f080 809c 	bcs.w	80008de <__udivmoddi4+0x2ce>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f240 8099 	bls.w	80008de <__udivmoddi4+0x2ce>
 80007ac:	3802      	subs	r0, #2
 80007ae:	443c      	add	r4, r7
 80007b0:	eba4 040e 	sub.w	r4, r4, lr
 80007b4:	fa1f fe83 	uxth.w	lr, r3
 80007b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80007bc:	fb09 4413 	mls	r4, r9, r3, r4
 80007c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80007c8:	45a4      	cmp	ip, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x1ce>
 80007cc:	193c      	adds	r4, r7, r4
 80007ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80007d2:	f080 8082 	bcs.w	80008da <__udivmoddi4+0x2ca>
 80007d6:	45a4      	cmp	ip, r4
 80007d8:	d97f      	bls.n	80008da <__udivmoddi4+0x2ca>
 80007da:	3b02      	subs	r3, #2
 80007dc:	443c      	add	r4, r7
 80007de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007e2:	eba4 040c 	sub.w	r4, r4, ip
 80007e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80007ea:	4564      	cmp	r4, ip
 80007ec:	4673      	mov	r3, lr
 80007ee:	46e1      	mov	r9, ip
 80007f0:	d362      	bcc.n	80008b8 <__udivmoddi4+0x2a8>
 80007f2:	d05f      	beq.n	80008b4 <__udivmoddi4+0x2a4>
 80007f4:	b15d      	cbz	r5, 800080e <__udivmoddi4+0x1fe>
 80007f6:	ebb8 0203 	subs.w	r2, r8, r3
 80007fa:	eb64 0409 	sbc.w	r4, r4, r9
 80007fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000802:	fa22 f301 	lsr.w	r3, r2, r1
 8000806:	431e      	orrs	r6, r3
 8000808:	40cc      	lsrs	r4, r1
 800080a:	e9c5 6400 	strd	r6, r4, [r5]
 800080e:	2100      	movs	r1, #0
 8000810:	e74f      	b.n	80006b2 <__udivmoddi4+0xa2>
 8000812:	fbb1 fcf2 	udiv	ip, r1, r2
 8000816:	0c01      	lsrs	r1, r0, #16
 8000818:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800081c:	b280      	uxth	r0, r0
 800081e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000822:	463b      	mov	r3, r7
 8000824:	4638      	mov	r0, r7
 8000826:	463c      	mov	r4, r7
 8000828:	46b8      	mov	r8, r7
 800082a:	46be      	mov	lr, r7
 800082c:	2620      	movs	r6, #32
 800082e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000832:	eba2 0208 	sub.w	r2, r2, r8
 8000836:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800083a:	e766      	b.n	800070a <__udivmoddi4+0xfa>
 800083c:	4601      	mov	r1, r0
 800083e:	e718      	b.n	8000672 <__udivmoddi4+0x62>
 8000840:	4610      	mov	r0, r2
 8000842:	e72c      	b.n	800069e <__udivmoddi4+0x8e>
 8000844:	f1c6 0220 	rsb	r2, r6, #32
 8000848:	fa2e f302 	lsr.w	r3, lr, r2
 800084c:	40b7      	lsls	r7, r6
 800084e:	40b1      	lsls	r1, r6
 8000850:	fa20 f202 	lsr.w	r2, r0, r2
 8000854:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000858:	430a      	orrs	r2, r1
 800085a:	fbb3 f8fe 	udiv	r8, r3, lr
 800085e:	b2bc      	uxth	r4, r7
 8000860:	fb0e 3318 	mls	r3, lr, r8, r3
 8000864:	0c11      	lsrs	r1, r2, #16
 8000866:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800086a:	fb08 f904 	mul.w	r9, r8, r4
 800086e:	40b0      	lsls	r0, r6
 8000870:	4589      	cmp	r9, r1
 8000872:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000876:	b280      	uxth	r0, r0
 8000878:	d93e      	bls.n	80008f8 <__udivmoddi4+0x2e8>
 800087a:	1879      	adds	r1, r7, r1
 800087c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000880:	d201      	bcs.n	8000886 <__udivmoddi4+0x276>
 8000882:	4589      	cmp	r9, r1
 8000884:	d81f      	bhi.n	80008c6 <__udivmoddi4+0x2b6>
 8000886:	eba1 0109 	sub.w	r1, r1, r9
 800088a:	fbb1 f9fe 	udiv	r9, r1, lr
 800088e:	fb09 f804 	mul.w	r8, r9, r4
 8000892:	fb0e 1119 	mls	r1, lr, r9, r1
 8000896:	b292      	uxth	r2, r2
 8000898:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800089c:	4542      	cmp	r2, r8
 800089e:	d229      	bcs.n	80008f4 <__udivmoddi4+0x2e4>
 80008a0:	18ba      	adds	r2, r7, r2
 80008a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80008a6:	d2c4      	bcs.n	8000832 <__udivmoddi4+0x222>
 80008a8:	4542      	cmp	r2, r8
 80008aa:	d2c2      	bcs.n	8000832 <__udivmoddi4+0x222>
 80008ac:	f1a9 0102 	sub.w	r1, r9, #2
 80008b0:	443a      	add	r2, r7
 80008b2:	e7be      	b.n	8000832 <__udivmoddi4+0x222>
 80008b4:	45f0      	cmp	r8, lr
 80008b6:	d29d      	bcs.n	80007f4 <__udivmoddi4+0x1e4>
 80008b8:	ebbe 0302 	subs.w	r3, lr, r2
 80008bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008c0:	3801      	subs	r0, #1
 80008c2:	46e1      	mov	r9, ip
 80008c4:	e796      	b.n	80007f4 <__udivmoddi4+0x1e4>
 80008c6:	eba7 0909 	sub.w	r9, r7, r9
 80008ca:	4449      	add	r1, r9
 80008cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80008d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80008d4:	fb09 f804 	mul.w	r8, r9, r4
 80008d8:	e7db      	b.n	8000892 <__udivmoddi4+0x282>
 80008da:	4673      	mov	r3, lr
 80008dc:	e77f      	b.n	80007de <__udivmoddi4+0x1ce>
 80008de:	4650      	mov	r0, sl
 80008e0:	e766      	b.n	80007b0 <__udivmoddi4+0x1a0>
 80008e2:	4608      	mov	r0, r1
 80008e4:	e6fd      	b.n	80006e2 <__udivmoddi4+0xd2>
 80008e6:	443b      	add	r3, r7
 80008e8:	3a02      	subs	r2, #2
 80008ea:	e733      	b.n	8000754 <__udivmoddi4+0x144>
 80008ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f0:	443b      	add	r3, r7
 80008f2:	e71c      	b.n	800072e <__udivmoddi4+0x11e>
 80008f4:	4649      	mov	r1, r9
 80008f6:	e79c      	b.n	8000832 <__udivmoddi4+0x222>
 80008f8:	eba1 0109 	sub.w	r1, r1, r9
 80008fc:	46c4      	mov	ip, r8
 80008fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000902:	fb09 f804 	mul.w	r8, r9, r4
 8000906:	e7c4      	b.n	8000892 <__udivmoddi4+0x282>

08000908 <__aeabi_idiv0>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <current_pi_controller>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t current_pi_controller(void)
{
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
    // Error
    current_error = fabs(current_setpoint) - current_magnitude;
 8000912:	4b46      	ldr	r3, [pc, #280]	@ (8000a2c <current_pi_controller+0x120>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	eef0 7ae7 	vabs.f32	s15, s15
 800091c:	ee17 0a90 	vmov	r0, s15
 8000920:	f7ff fdb6 	bl	8000490 <__aeabi_f2d>
 8000924:	4604      	mov	r4, r0
 8000926:	460d      	mov	r5, r1
 8000928:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <current_pi_controller+0x124>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fdaf 	bl	8000490 <__aeabi_f2d>
 8000932:	4602      	mov	r2, r0
 8000934:	460b      	mov	r3, r1
 8000936:	4620      	mov	r0, r4
 8000938:	4629      	mov	r1, r5
 800093a:	f7ff fc49 	bl	80001d0 <__aeabi_dsub>
 800093e:	4602      	mov	r2, r0
 8000940:	460b      	mov	r3, r1
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fdfb 	bl	8000540 <__aeabi_d2f>
 800094a:	4603      	mov	r3, r0
 800094c:	4a39      	ldr	r2, [pc, #228]	@ (8000a34 <current_pi_controller+0x128>)
 800094e:	6013      	str	r3, [r2, #0]

    // Integral
    current_integral += current_error * ADC_DT;
 8000950:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <current_pi_controller+0x128>)
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000a38 <current_pi_controller+0x12c>
 800095a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800095e:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <current_pi_controller+0x130>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <current_pi_controller+0x130>)
 800096a:	edc3 7a00 	vstr	s15, [r3]

    // Integral anti-windup
    if (current_integral > 50) {
 800096e:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <current_pi_controller+0x130>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000a40 <current_pi_controller+0x134>
 8000978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000980:	dd03      	ble.n	800098a <current_pi_controller+0x7e>
    	current_integral = 50;
 8000982:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <current_pi_controller+0x130>)
 8000984:	4a2f      	ldr	r2, [pc, #188]	@ (8000a44 <current_pi_controller+0x138>)
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e00c      	b.n	80009a4 <current_pi_controller+0x98>
    } else if (current_integral < -50) {
 800098a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a3c <current_pi_controller+0x130>)
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000a48 <current_pi_controller+0x13c>
 8000994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	d502      	bpl.n	80009a4 <current_pi_controller+0x98>
    	current_integral = -50;
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <current_pi_controller+0x130>)
 80009a0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <current_pi_controller+0x140>)
 80009a2:	601a      	str	r2, [r3, #0]
    }

    // Calculate PI output
    pi_output = current_error * CURRENT_KP + current_integral * CURRENT_KI;
 80009a4:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <current_pi_controller+0x128>)
 80009a6:	ed93 7a00 	vldr	s14, [r3]
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <current_pi_controller+0x144>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <current_pi_controller+0x130>)
 80009b6:	edd3 6a00 	vldr	s13, [r3]
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <current_pi_controller+0x148>)
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <current_pi_controller+0x14c>)
 80009ca:	edc3 7a00 	vstr	s15, [r3]

    // Convert target voltage to PWM duty cycle
    float pid = (pi_output / V_BUS) * PWM_MAX_PULSE;
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <current_pi_controller+0x14c>)
 80009d0:	ed93 7a00 	vldr	s14, [r3]
 80009d4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80009d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009dc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a5c <current_pi_controller+0x150>
 80009e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e4:	edc7 7a01 	vstr	s15, [r7, #4]

    // Saturate
    if (pid > 600) {
 80009e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000a60 <current_pi_controller+0x154>
 80009f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	dd02      	ble.n	8000a00 <current_pi_controller+0xf4>
    	pid = 600;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <current_pi_controller+0x158>)
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	e009      	b.n	8000a14 <current_pi_controller+0x108>
    } else if (pid < 0.0f) {
 8000a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0c:	d502      	bpl.n	8000a14 <current_pi_controller+0x108>
    	pid = 0.0f;
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
    }

    return (uint16_t) pid;
 8000a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 3a90 	vmov	r3, s15
 8000a20:	b29b      	uxth	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001e4 	.word	0x200001e4
 8000a30:	200001e8 	.word	0x200001e8
 8000a34:	200001ec 	.word	0x200001ec
 8000a38:	380bcf65 	.word	0x380bcf65
 8000a3c:	200001f0 	.word	0x200001f0
 8000a40:	42480000 	.word	0x42480000
 8000a44:	42480000 	.word	0x42480000
 8000a48:	c2480000 	.word	0xc2480000
 8000a4c:	c2480000 	.word	0xc2480000
 8000a50:	20000004 	.word	0x20000004
 8000a54:	20000008 	.word	0x20000008
 8000a58:	200001f4 	.word	0x200001f4
 8000a5c:	44960000 	.word	0x44960000
 8000a60:	44160000 	.word	0x44160000
 8000a64:	44160000 	.word	0x44160000

08000a68 <velocity_pid_controller>:

float velocity_pid_controller(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
	// Error
	velocity_error = target_speed - speed_rpm;
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b60 <velocity_pid_controller+0xf8>)
 8000a70:	ed93 7a00 	vldr	s14, [r3]
 8000a74:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <velocity_pid_controller+0xfc>)
 8000a76:	edd3 7a00 	vldr	s15, [r3]
 8000a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b68 <velocity_pid_controller+0x100>)
 8000a80:	edc3 7a00 	vstr	s15, [r3]

	// P term
	float p_term = VELOCITY_KP * velocity_error;
 8000a84:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <velocity_pid_controller+0x104>)
 8000a86:	ed93 7a00 	vldr	s14, [r3]
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <velocity_pid_controller+0x100>)
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a94:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	velocity_integral += velocity_error * CONTROL_LOOP_DT;
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <velocity_pid_controller+0x100>)
 8000a9a:	edd3 7a00 	vldr	s15, [r3]
 8000a9e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000b70 <velocity_pid_controller+0x108>
 8000aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000ab2:	edc3 7a00 	vstr	s15, [r3]

	// Integral anti-windup
	if (velocity_integral > 100.0f) velocity_integral  = 100.0f;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000b78 <velocity_pid_controller+0x110>
 8000ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	dd02      	ble.n	8000ad0 <velocity_pid_controller+0x68>
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000acc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b7c <velocity_pid_controller+0x114>)
 8000ace:	601a      	str	r2, [r3, #0]
	if (velocity_integral < -100.0f) velocity_integral = -100.0f;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000b80 <velocity_pid_controller+0x118>
 8000ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d502      	bpl.n	8000aea <velocity_pid_controller+0x82>
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000ae6:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <velocity_pid_controller+0x11c>)
 8000ae8:	601a      	str	r2, [r3, #0]

	// I term
	float i_term = VELOCITY_KI * velocity_integral;
 8000aea:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <velocity_pid_controller+0x120>)
 8000aec:	ed93 7a00 	vldr	s14, [r3]
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <velocity_pid_controller+0x10c>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afa:	edc7 7a04 	vstr	s15, [r7, #16]

	float derivative = (velocity_error - previous_velocity_error) / CONTROL_LOOP_DT;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <velocity_pid_controller+0x100>)
 8000b00:	ed93 7a00 	vldr	s14, [r3]
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <velocity_pid_controller+0x124>)
 8000b06:	edd3 7a00 	vldr	s15, [r3]
 8000b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b0e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000b70 <velocity_pid_controller+0x108>
 8000b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b16:	edc7 7a03 	vstr	s15, [r7, #12]

	// D term
	float d_term = VELOCITY_KD * derivative;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <velocity_pid_controller+0x128>)
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b28:	edc7 7a02 	vstr	s15, [r7, #8]
	previous_velocity_error = velocity_error;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <velocity_pid_controller+0x100>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a16      	ldr	r2, [pc, #88]	@ (8000b8c <velocity_pid_controller+0x124>)
 8000b32:	6013      	str	r3, [r2, #0]

	float pid_output = p_term + i_term + d_term;
 8000b34:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b40:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b48:	edc7 7a01 	vstr	s15, [r7, #4]

	return pid_output;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	ee07 3a90 	vmov	s15, r3
}
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	200001f8 	.word	0x200001f8
 8000b64:	200001b0 	.word	0x200001b0
 8000b68:	200001fc 	.word	0x200001fc
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	3c23d70a 	.word	0x3c23d70a
 8000b74:	20000204 	.word	0x20000204
 8000b78:	42c80000 	.word	0x42c80000
 8000b7c:	42c80000 	.word	0x42c80000
 8000b80:	c2c80000 	.word	0xc2c80000
 8000b84:	c2c80000 	.word	0xc2c80000
 8000b88:	20000014 	.word	0x20000014
 8000b8c:	20000200 	.word	0x20000200
 8000b90:	20000010 	.word	0x20000010

08000b94 <convert_adc_to_current>:

    return pid_output;
}

void convert_adc_to_current(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
    // Calculate the signed difference from the calibrated zero-current ADC value
    int32_t adc_delta_a = (int32_t)adc_cur_a - (int32_t)current_a_offset_adc;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <convert_adc_to_current+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <convert_adc_to_current+0xa4>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	617b      	str	r3, [r7, #20]
    int32_t adc_delta_b = (int32_t)adc_cur_b - (int32_t)current_b_offset_adc;
 8000baa:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <convert_adc_to_current+0xa8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <convert_adc_to_current+0xac>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	613b      	str	r3, [r7, #16]
    int32_t adc_delta_c = (int32_t)adc_cur_c - (int32_t)current_c_offset_adc;
 8000bba:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <convert_adc_to_current+0xb0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <convert_adc_to_current+0xb4>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	60fb      	str	r3, [r7, #12]

    // Convert the ADC count difference directly to current
    // I = (ADC_delta / ADC_Resolution) * V_ref / (Gain * R_shunt)
    float volts_per_adc_count = ADC_VREF / ADC_RESOLUTION;
 8000bca:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <convert_adc_to_current+0xb8>)
 8000bcc:	60bb      	str	r3, [r7, #8]
    float conversion_factor = volts_per_adc_count / (AD8417_GAIN * SHUNT_RESISTOR);
 8000bce:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bd2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000c50 <convert_adc_to_current+0xbc>
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	edc7 7a01 	vstr	s15, [r7, #4]

    current_a = (float)adc_delta_a * conversion_factor;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <convert_adc_to_current+0xc0>)
 8000bf2:	edc3 7a00 	vstr	s15, [r3]
    current_b = (float)adc_delta_b * conversion_factor;
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <convert_adc_to_current+0xc4>)
 8000c0a:	edc3 7a00 	vstr	s15, [r3]
    current_c = (float)adc_delta_c * conversion_factor;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <convert_adc_to_current+0xc8>)
 8000c22:	edc3 7a00 	vstr	s15, [r3]
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200001cc 	.word	0x200001cc
 8000c38:	200001dc 	.word	0x200001dc
 8000c3c:	200001c8 	.word	0x200001c8
 8000c40:	200001de 	.word	0x200001de
 8000c44:	200001c4 	.word	0x200001c4
 8000c48:	200001e0 	.word	0x200001e0
 8000c4c:	3a533333 	.word	0x3a533333
 8000c50:	3d75c290 	.word	0x3d75c290
 8000c54:	200001d0 	.word	0x200001d0
 8000c58:	200001d4 	.word	0x200001d4
 8000c5c:	200001d8 	.word	0x200001d8

08000c60 <calibrate_current_sensors>:

void calibrate_current_sensors(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
    uint32_t offset_a_sum = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    uint32_t offset_b_sum = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
    uint32_t offset_c_sum = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

    HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	483a      	ldr	r0, [pc, #232]	@ (8000d64 <calibrate_current_sensors+0x104>)
 8000c7a:	f002 fcf9 	bl	8003670 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f001 fa3e 	bl	8002100 <HAL_Delay>

    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	e049      	b.n	8000d1e <calibrate_current_sensors+0xbe>
    {
        // Read Phase C (ADC1_IN3)
        ADC_ChannelConfTypeDef sConfig = {0};
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
        sConfig.Channel = ADC_CHANNEL_3;
 8000c96:	2303      	movs	r3, #3
 8000c98:	603b      	str	r3, [r7, #0]
        sConfig.Rank = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4831      	ldr	r0, [pc, #196]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000ca4:	f001 fd60 	bl	8002768 <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 8000ca8:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000caa:	f001 fa91 	bl	80021d0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8000cae:	210a      	movs	r1, #10
 8000cb0:	482d      	ldr	r0, [pc, #180]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cb2:	f001 fb92 	bl	80023da <HAL_ADC_PollForConversion>
        offset_c_sum += HAL_ADC_GetValue(&hadc1);
 8000cb6:	482c      	ldr	r0, [pc, #176]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cb8:	f001 fd2a 	bl	8002710 <HAL_ADC_GetValue>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	617b      	str	r3, [r7, #20]

        // Read Phase B (ADC1_IN14)
        sConfig.Channel = ADC_CHANNEL_14;
 8000cc4:	230e      	movs	r3, #14
 8000cc6:	603b      	str	r3, [r7, #0]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4826      	ldr	r0, [pc, #152]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cce:	f001 fd4b 	bl	8002768 <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 8000cd2:	4825      	ldr	r0, [pc, #148]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cd4:	f001 fa7c 	bl	80021d0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8000cd8:	210a      	movs	r1, #10
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cdc:	f001 fb7d 	bl	80023da <HAL_ADC_PollForConversion>
        offset_b_sum += HAL_ADC_GetValue(&hadc1);
 8000ce0:	4821      	ldr	r0, [pc, #132]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000ce2:	f001 fd15 	bl	8002710 <HAL_ADC_GetValue>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]

        // Read Phase A (ADC1_IN15)
        sConfig.Channel = ADC_CHANNEL_15;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	603b      	str	r3, [r7, #0]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481c      	ldr	r0, [pc, #112]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cf8:	f001 fd36 	bl	8002768 <HAL_ADC_ConfigChannel>
        HAL_ADC_Start(&hadc1);
 8000cfc:	481a      	ldr	r0, [pc, #104]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000cfe:	f001 fa67 	bl	80021d0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8000d02:	210a      	movs	r1, #10
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000d06:	f001 fb68 	bl	80023da <HAL_ADC_PollForConversion>
        offset_a_sum += HAL_ADC_GetValue(&hadc1);
 8000d0a:	4817      	ldr	r0, [pc, #92]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000d0c:	f001 fd00 	bl	8002710 <HAL_ADC_GetValue>
 8000d10:	4602      	mov	r2, r0
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4413      	add	r3, r2
 8000d16:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d24:	dbb1      	blt.n	8000c8a <calibrate_current_sensors+0x2a>
    }
    HAL_ADC_Stop(&hadc1);
 8000d26:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <calibrate_current_sensors+0x108>)
 8000d28:	f001 fb24 	bl	8002374 <HAL_ADC_Stop>

    // Calculate the average offset
    current_a_offset_adc = offset_a_sum / CALIBRATION_SAMPLES;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <calibrate_current_sensors+0x10c>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	09db      	lsrs	r3, r3, #7
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <calibrate_current_sensors+0x110>)
 8000d3a:	801a      	strh	r2, [r3, #0]
    current_b_offset_adc = offset_b_sum / CALIBRATION_SAMPLES;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <calibrate_current_sensors+0x10c>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	09db      	lsrs	r3, r3, #7
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <calibrate_current_sensors+0x114>)
 8000d4a:	801a      	strh	r2, [r3, #0]
    current_c_offset_adc = offset_c_sum / CALIBRATION_SAMPLES;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <calibrate_current_sensors+0x10c>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	09db      	lsrs	r3, r3, #7
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <calibrate_current_sensors+0x118>)
 8000d5a:	801a      	strh	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020800 	.word	0x40020800
 8000d68:	20000040 	.word	0x20000040
 8000d6c:	10624dd3 	.word	0x10624dd3
 8000d70:	200001dc 	.word	0x200001dc
 8000d74:	200001de 	.word	0x200001de
 8000d78:	200001e0 	.word	0x200001e0

08000d7c <calculate_speed_from_capture>:


void calculate_speed_from_capture(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
    static uint32_t last_valid_period_tick = 0;
    float pulse_period_s = latest_pulse_period_s; // Read the shared variable once
 8000d82:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <calculate_speed_from_capture+0xd8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	617b      	str	r3, [r7, #20]

    // If the period is changing, a new pulse has arrived. Reset the timeout.
    if (pulse_period_s > 0.0f) {
 8000d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	dd08      	ble.n	8000da8 <calculate_speed_from_capture+0x2c>
        last_valid_period_tick = HAL_GetTick();
 8000d96:	f001 f9a7 	bl	80020e8 <HAL_GetTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e58 <calculate_speed_from_capture+0xdc>)
 8000d9e:	6013      	str	r3, [r2, #0]
        latest_pulse_period_s = 0.0f; // Consume the value
 8000da0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e54 <calculate_speed_from_capture+0xd8>)
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
    }

    // If no new pulse for 100ms, assume stopped
    if (HAL_GetTick() - last_valid_period_tick > 100) {
 8000da8:	f001 f99e 	bl	80020e8 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <calculate_speed_from_capture+0xdc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b64      	cmp	r3, #100	@ 0x64
 8000db6:	d907      	bls.n	8000dc8 <calculate_speed_from_capture+0x4c>
        speed_rpm = 0.0f;
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <calculate_speed_from_capture+0xe0>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
        is_first_capture = 1;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <calculate_speed_from_capture+0xe4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
        return; // Exit early
 8000dc6:	e042      	b.n	8000e4e <calculate_speed_from_capture+0xd2>
    }

    // Only calculate speed if we have a valid, new period
    if (pulse_period_s > 0.0f)
 8000dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	dd3b      	ble.n	8000e4e <calculate_speed_from_capture+0xd2>
    {
        float speed_rps = (1.0f / (ENCODER_PPR * 4.0f)) / pulse_period_s;
 8000dd6:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000e64 <calculate_speed_from_capture+0xe8>
 8000dda:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de2:	edc7 7a04 	vstr	s15, [r7, #16]
        int8_t direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? -1 : 1;
 8000de6:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <calculate_speed_from_capture+0xec>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d102      	bne.n	8000dfa <calculate_speed_from_capture+0x7e>
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e000      	b.n	8000dfc <calculate_speed_from_capture+0x80>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
        float new_speed_rpm = speed_rps * 60.0f * (float)direction;
 8000dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e02:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000e6c <calculate_speed_from_capture+0xf0>
 8000e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1a:	edc7 7a02 	vstr	s15, [r7, #8]

        const float alpha = 0.90f;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <calculate_speed_from_capture+0xf4>)
 8000e20:	607b      	str	r3, [r7, #4]
        speed_rpm = alpha * speed_rpm + (1.0f - alpha) * new_speed_rpm;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <calculate_speed_from_capture+0xe0>)
 8000e24:	ed93 7a00 	vldr	s14, [r3]
 8000e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <calculate_speed_from_capture+0xe0>)
 8000e4a:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001b4 	.word	0x200001b4
 8000e58:	20000210 	.word	0x20000210
 8000e5c:	200001b0 	.word	0x200001b0
 8000e60:	20000000 	.word	0x20000000
 8000e64:	38800000 	.word	0x38800000
 8000e68:	200000d0 	.word	0x200000d0
 8000e6c:	42700000 	.word	0x42700000
 8000e70:	3f666666 	.word	0x3f666666

08000e74 <update_angle_from_encoder>:

void update_angle_from_encoder(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
    static uint32_t last_encoder_count = 0;
    uint32_t current_encoder_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <update_angle_from_encoder+0x54>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	607b      	str	r3, [r7, #4]

    int32_t diff = (int32_t)(current_encoder_count - last_encoder_count);
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <update_angle_from_encoder+0x58>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	603b      	str	r3, [r7, #0]

    // Update angle in degrees
    angle_degrees += 360.0f * (float)diff / (ENCODER_PPR * 4.0f);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e96:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000ed0 <update_angle_from_encoder+0x5c>
 8000e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000ed4 <update_angle_from_encoder+0x60>
 8000ea2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <update_angle_from_encoder+0x64>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <update_angle_from_encoder+0x64>)
 8000eb2:	edc3 7a00 	vstr	s15, [r3]
//    angle_degrees = fmodf(angle_degrees, 360.0f);
//    if (angle_degrees < 0.0f) {
//        angle_degrees += 360.0f;
//    }

    last_encoder_count = current_encoder_count;
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <update_angle_from_encoder+0x58>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	20000214 	.word	0x20000214
 8000ed0:	43b40000 	.word	0x43b40000
 8000ed4:	46800000 	.word	0x46800000
 8000ed8:	200001ac 	.word	0x200001ac

08000edc <read_hall_sensors>:


uint8_t read_hall_sensors(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t hall_state = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	hall_state = HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin);	// Read Hall A (MSB)
 8000ee6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eea:	4812      	ldr	r0, [pc, #72]	@ (8000f34 <read_hall_sensors+0x58>)
 8000eec:	f002 fba8 	bl	8003640 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
	hall_state <<= 1;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
	hall_state |= HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin);	// Read Hall B
 8000efa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000efe:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <read_hall_sensors+0x58>)
 8000f00:	f002 fb9e 	bl	8003640 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	71fb      	strb	r3, [r7, #7]
	hall_state <<= 1;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
	hall_state |= HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin);	// Read Hall C (LSB)
 8000f14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <read_hall_sensors+0x58>)
 8000f1a:	f002 fb91 	bl	8003640 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	71fb      	strb	r3, [r7, #7]

	return hall_state;	// A -> B -> C
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020800 	.word	0x40020800

08000f38 <stopMotor>:

void stopMotor(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	481b      	ldr	r0, [pc, #108]	@ (8000fac <stopMotor+0x74>)
 8000f40:	f003 fa1e 	bl	8004380 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f44:	2104      	movs	r1, #4
 8000f46:	4819      	ldr	r0, [pc, #100]	@ (8000fac <stopMotor+0x74>)
 8000f48:	f003 fa1a 	bl	8004380 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4817      	ldr	r0, [pc, #92]	@ (8000fac <stopMotor+0x74>)
 8000f50:	f003 fa16 	bl	8004380 <HAL_TIM_PWM_Stop>

    HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5a:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <stopMotor+0x78>)
 8000f5c:	f002 fb88 	bl	8003670 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <stopMotor+0x78>)
 8000f68:	f002 fb82 	bl	8003670 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f72:	480f      	ldr	r0, [pc, #60]	@ (8000fb0 <stopMotor+0x78>)
 8000f74:	f002 fb7c 	bl	8003670 <HAL_GPIO_WritePin>

    current_integral = 0;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <stopMotor+0x7c>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    velocity_integral = 0;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <stopMotor+0x80>)
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
    angle_integral = 0;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <stopMotor+0x84>)
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

    velocity_error = 0.0f;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <stopMotor+0x88>)
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
    previous_velocity_error = 0.0f;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <stopMotor+0x8c>)
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    velocity_integral = 0.0f;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <stopMotor+0x80>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000088 	.word	0x20000088
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	20000208 	.word	0x20000208
 8000fc0:	200001fc 	.word	0x200001fc
 8000fc4:	20000200 	.word	0x20000200

08000fc8 <SetPhase_PWM>:
 * @brief Turns the High-Side ON (with PWM) and the Low-Side OFF.
 * @param phase: The motor phase (PHASE_A, PHASE_B, or PHASE_C).
 * @param pwm_duty: The PWM duty cycle value.
 */
void SetPhase_PWM(BldcPhase phase, uint16_t pwm_duty)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
    switch(phase)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d01c      	beq.n	8001018 <SetPhase_PWM+0x50>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	dc25      	bgt.n	800102e <SetPhase_PWM+0x66>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <SetPhase_PWM+0x24>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d00b      	beq.n	8001002 <SetPhase_PWM+0x3a>
        case PHASE_C:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_duty);
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
            break;
    }
}
 8000fea:	e020      	b.n	800102e <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <SetPhase_PWM+0x70>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	88ba      	ldrh	r2, [r7, #4]
 8000ff2:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffa:	4810      	ldr	r0, [pc, #64]	@ (800103c <SetPhase_PWM+0x74>)
 8000ffc:	f002 fb38 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 8001000:	e015      	b.n	800102e <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_duty);
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <SetPhase_PWM+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	88ba      	ldrh	r2, [r7, #4]
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001010:	480a      	ldr	r0, [pc, #40]	@ (800103c <SetPhase_PWM+0x74>)
 8001012:	f002 fb2d 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 8001016:	e00a      	b.n	800102e <SetPhase_PWM+0x66>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_duty);
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <SetPhase_PWM+0x70>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	88ba      	ldrh	r2, [r7, #4]
 800101e:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <SetPhase_PWM+0x74>)
 8001028:	f002 fb22 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 800102c:	bf00      	nop
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000088 	.word	0x20000088
 800103c:	40020400 	.word	0x40020400

08001040 <SetPhase_GND>:
/**
 * @brief Turns the High-Side OFF and the Low-Side ON.
 * @param phase: The motor phase.
 */
void SetPhase_GND(BldcPhase phase)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
    switch(phase)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d01c      	beq.n	800108a <SetPhase_GND+0x4a>
 8001050:	2b02      	cmp	r3, #2
 8001052:	dc25      	bgt.n	80010a0 <SetPhase_GND+0x60>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <SetPhase_GND+0x1e>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d00b      	beq.n	8001074 <SetPhase_GND+0x34>
        case PHASE_C:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
            break;
    }
}
 800105c:	e020      	b.n	80010a0 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <SetPhase_GND+0x68>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106c:	480f      	ldr	r0, [pc, #60]	@ (80010ac <SetPhase_GND+0x6c>)
 800106e:	f002 faff 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 8001072:	e015      	b.n	80010a0 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <SetPhase_GND+0x68>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	480a      	ldr	r0, [pc, #40]	@ (80010ac <SetPhase_GND+0x6c>)
 8001084:	f002 faf4 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 8001088:	e00a      	b.n	80010a0 <SetPhase_GND+0x60>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <SetPhase_GND+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <SetPhase_GND+0x6c>)
 800109a:	f002 fae9 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 800109e:	bf00      	nop
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000088 	.word	0x20000088
 80010ac:	40020400 	.word	0x40020400

080010b0 <SetPhase_FLOAT>:
 * @brief Disconnects a phase (High-Z).
 * @note Turns BOTH the High-Side and Low-Side OFF.
 * @param phase: The motor phase (PHASE_A, PHASE_B, or PHASE_C).
 */
void SetPhase_FLOAT(BldcPhase phase)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    switch(phase)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d014      	beq.n	80010ea <SetPhase_FLOAT+0x3a>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dc19      	bgt.n	80010f8 <SetPhase_FLOAT+0x48>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <SetPhase_FLOAT+0x1e>
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d007      	beq.n	80010dc <SetPhase_FLOAT+0x2c>
            break;
        case PHASE_C:
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
            break;
    }
}
 80010cc:	e014      	b.n	80010f8 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL1_EN1_GPIO_Port, INL1_EN1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d4:	480a      	ldr	r0, [pc, #40]	@ (8001100 <SetPhase_FLOAT+0x50>)
 80010d6:	f002 facb 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 80010da:	e00d      	b.n	80010f8 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL2_EN2_GPIO_Port, INL2_EN2_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <SetPhase_FLOAT+0x50>)
 80010e4:	f002 fac4 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 80010e8:	e006      	b.n	80010f8 <SetPhase_FLOAT+0x48>
            HAL_GPIO_WritePin(INL3_EN3_GPIO_Port, INL3_EN3_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4803      	ldr	r0, [pc, #12]	@ (8001100 <SetPhase_FLOAT+0x50>)
 80010f2:	f002 fabd 	bl	8003670 <HAL_GPIO_WritePin>
            break;
 80010f6:	bf00      	nop
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020400 	.word	0x40020400

08001104 <sixStepCommutation>:

void sixStepCommutation(uint8_t sector, uint16_t pwm_duty_cycle) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
	switch (sector) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b01      	subs	r3, #1
 8001118:	2b05      	cmp	r3, #5
 800111a:	d857      	bhi.n	80011cc <sixStepCommutation+0xc8>
 800111c:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <sixStepCommutation+0x20>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	0800113d 	.word	0x0800113d
 8001128:	08001155 	.word	0x08001155
 800112c:	0800116d 	.word	0x0800116d
 8001130:	08001185 	.word	0x08001185
 8001134:	0800119d 	.word	0x0800119d
 8001138:	080011b5 	.word	0x080011b5
		case SECTOR_1: // Hall state: 5
			SetPhase_PWM(PHASE_B, pwm_duty_cycle);
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	4619      	mov	r1, r3
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ff41 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_C);
 8001146:	2002      	movs	r0, #2
 8001148:	f7ff ff7a 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_A);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ffaf 	bl	80010b0 <SetPhase_FLOAT>
			break;
 8001152:	e045      	b.n	80011e0 <sixStepCommutation+0xdc>

		case SECTOR_2: // Hall state: 4
			SetPhase_PWM(PHASE_B, pwm_duty_cycle);
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff ff35 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_A);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff ff6e 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_C);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ffa3 	bl	80010b0 <SetPhase_FLOAT>
			break;
 800116a:	e039      	b.n	80011e0 <sixStepCommutation+0xdc>

		case SECTOR_3: // Hall state: 6
			SetPhase_PWM(PHASE_C, pwm_duty_cycle);
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	4619      	mov	r1, r3
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff ff29 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_A);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ff62 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_B);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ff97 	bl	80010b0 <SetPhase_FLOAT>
			break;
 8001182:	e02d      	b.n	80011e0 <sixStepCommutation+0xdc>

		case SECTOR_4: // Hall state: 2
			SetPhase_PWM(PHASE_C, pwm_duty_cycle);
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff ff1d 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_B);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff56 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_A);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff8b 	bl	80010b0 <SetPhase_FLOAT>
			break;
 800119a:	e021      	b.n	80011e0 <sixStepCommutation+0xdc>

		case SECTOR_5: // Hall state: 3
			SetPhase_PWM(PHASE_A, pwm_duty_cycle);
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	4619      	mov	r1, r3
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff11 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_B);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff4a 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_C);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f7ff ff7f 	bl	80010b0 <SetPhase_FLOAT>
			break;
 80011b2:	e015      	b.n	80011e0 <sixStepCommutation+0xdc>

		case SECTOR_6: // Hall state: 1
			SetPhase_PWM(PHASE_A, pwm_duty_cycle);
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	4619      	mov	r1, r3
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ff05 	bl	8000fc8 <SetPhase_PWM>
			SetPhase_GND(PHASE_C);
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff ff3e 	bl	8001040 <SetPhase_GND>
			SetPhase_FLOAT(PHASE_B);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff73 	bl	80010b0 <SetPhase_FLOAT>
			break;
 80011ca:	e009      	b.n	80011e0 <sixStepCommutation+0xdc>

		default:
			SetPhase_FLOAT(PHASE_A);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff6f 	bl	80010b0 <SetPhase_FLOAT>
			SetPhase_FLOAT(PHASE_B);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff ff6c 	bl	80010b0 <SetPhase_FLOAT>
			SetPhase_FLOAT(PHASE_C);
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff69 	bl	80010b0 <SetPhase_FLOAT>
			break;
 80011de:	bf00      	nop
	}
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <getActivePhaseCurrent>:

void getActivePhaseCurrent(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	switch (sector) {
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <getActivePhaseCurrent+0x78>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d829      	bhi.n	800124a <getActivePhaseCurrent+0x62>
 80011f6:	a201      	add	r2, pc, #4	@ (adr r2, 80011fc <getActivePhaseCurrent+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	08001239 	.word	0x08001239
 8001200:	08001215 	.word	0x08001215
 8001204:	08001215 	.word	0x08001215
 8001208:	08001227 	.word	0x08001227
 800120c:	08001227 	.word	0x08001227
 8001210:	08001239 	.word	0x08001239
			case SECTOR_2:
			case SECTOR_3:
				current_magnitude = fabs(current_a);
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <getActivePhaseCurrent+0x7c>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <getActivePhaseCurrent+0x80>)
 8001220:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001224:	e016      	b.n	8001254 <getActivePhaseCurrent+0x6c>

			case SECTOR_4:
			case SECTOR_5:
				current_magnitude = fabs(current_b);
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <getActivePhaseCurrent+0x84>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eef0 7ae7 	vabs.f32	s15, s15
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <getActivePhaseCurrent+0x80>)
 8001232:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001236:	e00d      	b.n	8001254 <getActivePhaseCurrent+0x6c>

			case SECTOR_1:
			case SECTOR_6:
				current_magnitude = fabs(current_c);
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <getActivePhaseCurrent+0x88>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eef0 7ae7 	vabs.f32	s15, s15
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <getActivePhaseCurrent+0x80>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001248:	e004      	b.n	8001254 <getActivePhaseCurrent+0x6c>

			default:
				current_magnitude = 0.0f;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <getActivePhaseCurrent+0x80>)
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
				break;
 8001252:	bf00      	nop
		}
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200001a8 	.word	0x200001a8
 8001264:	200001d0 	.word	0x200001d0
 8001268:	200001e8 	.word	0x200001e8
 800126c:	200001d4 	.word	0x200001d4
 8001270:	200001d8 	.word	0x200001d8

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fecf 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f869 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 fb3d 	bl	8001900 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001286:	f000 f961 	bl	800154c <MX_TIM1_Init>
  MX_TIM2_Init();
 800128a:	f000 fa27 	bl	80016dc <MX_TIM2_Init>
  MX_ADC1_Init();
 800128e:	f000 f8c9 	bl	8001424 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001292:	f000 fa77 	bl	8001784 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001296:	f000 fae5 	bl	8001864 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  calibrate_current_sensors();
 800129a:	f7ff fce1 	bl	8000c60 <calibrate_current_sensors>

  // Enable main driver.
  HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <main+0xb8>)
 80012a6:	f002 f9e3 	bl	8003670 <HAL_GPIO_WritePin>

  // Read initial hall state and set initial commutation
  uint8_t initial_hall_state = read_hall_sensors();
 80012aa:	f7ff fe17 	bl	8000edc <read_hall_sensors>
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  sector = hall_to_sector_map_CW[initial_hall_state & 0x07];
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <main+0xbc>)
 80012ba:	5cd2      	ldrb	r2, [r2, r3]
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <main+0xc0>)
 80012be:	701a      	strb	r2, [r3, #0]
  sixStepCommutation(sector, 0);
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <main+0xc0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff1c 	bl	8001104 <sixStepCommutation>

  // Start timer1
  HAL_TIM_Base_Start(&htim1);
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <main+0xc4>)
 80012ce:	f002 fe5d 	bl	8003f8c <HAL_TIM_Base_Start>

  // Start three phase PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012d2:	2100      	movs	r1, #0
 80012d4:	4818      	ldr	r0, [pc, #96]	@ (8001338 <main+0xc4>)
 80012d6:	f002 ff8b 	bl	80041f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012da:	2104      	movs	r1, #4
 80012dc:	4816      	ldr	r0, [pc, #88]	@ (8001338 <main+0xc4>)
 80012de:	f002 ff87 	bl	80041f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012e2:	2108      	movs	r1, #8
 80012e4:	4814      	ldr	r0, [pc, #80]	@ (8001338 <main+0xc4>)
 80012e6:	f002 ff83 	bl	80041f0 <HAL_TIM_PWM_Start>

  // Start ADC interrupt timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012ea:	210c      	movs	r1, #12
 80012ec:	4812      	ldr	r0, [pc, #72]	@ (8001338 <main+0xc4>)
 80012ee:	f002 ff7f 	bl	80041f0 <HAL_TIM_PWM_Start>

  // ADC injected mode with interrupt
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80012f2:	4812      	ldr	r0, [pc, #72]	@ (800133c <main+0xc8>)
 80012f4:	f001 fc56 	bl	8002ba4 <HAL_ADCEx_InjectedStart_IT>

  // Start Timer2 as Encoder mode
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012f8:	213c      	movs	r1, #60	@ 0x3c
 80012fa:	4811      	ldr	r0, [pc, #68]	@ (8001340 <main+0xcc>)
 80012fc:	f003 fad8 	bl	80048b0 <HAL_TIM_Encoder_Start>

  // Start Timer3 for input capture timer
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	4810      	ldr	r0, [pc, #64]	@ (8001344 <main+0xd0>)
 8001304:	f003 f906 	bl	8004514 <HAL_TIM_IC_Start_IT>

  // Start Timer4 for velocity loop
  HAL_TIM_Base_Start_IT(&htim4);
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <main+0xd4>)
 800130a:	f002 fea7 	bl	800405c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(FAULT_GPIO_Port, FAULT_Pin) == GPIO_PIN_RESET) {
 800130e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001312:	480e      	ldr	r0, [pc, #56]	@ (800134c <main+0xd8>)
 8001314:	f002 f994 	bl	8003640 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f7      	bne.n	800130e <main+0x9a>
		  motor_fault = 1;
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <main+0xdc>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
		  stopMotor();
 8001324:	f7ff fe08 	bl	8000f38 <stopMotor>
	  if (HAL_GPIO_ReadPin(FAULT_GPIO_Port, FAULT_Pin) == GPIO_PIN_RESET) {
 8001328:	e7f1      	b.n	800130e <main+0x9a>
 800132a:	bf00      	nop
 800132c:	40020800 	.word	0x40020800
 8001330:	08005b70 	.word	0x08005b70
 8001334:	200001a8 	.word	0x200001a8
 8001338:	20000088 	.word	0x20000088
 800133c:	20000040 	.word	0x20000040
 8001340:	200000d0 	.word	0x200000d0
 8001344:	20000118 	.word	0x20000118
 8001348:	20000160 	.word	0x20000160
 800134c:	40020400 	.word	0x40020400
 8001350:	200001a9 	.word	0x200001a9

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	@ 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fbcc 	bl	8005b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <SystemClock_Config+0xc8>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	4a26      	ldr	r2, [pc, #152]	@ (800141c <SystemClock_Config+0xc8>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	@ 0x40
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <SystemClock_Config+0xc8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <SystemClock_Config+0xcc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <SystemClock_Config+0xcc>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <SystemClock_Config+0xcc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c4:	2308      	movs	r3, #8
 80013c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013c8:	2348      	movs	r3, #72	@ 0x48
 80013ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 f963 	bl	80036a4 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e4:	f000 fbf6 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2302      	movs	r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2102      	movs	r1, #2
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fbc5 	bl	8003b94 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001410:	f000 fbe0 	bl	8001bd4 <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3750      	adds	r7, #80	@ 0x50
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	@ 0x30
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2220      	movs	r2, #32
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fb5e 	bl	8005b00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001444:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001446:	4a3f      	ldr	r2, [pc, #252]	@ (8001544 <MX_ADC1_Init+0x120>)
 8001448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800144a:	4b3d      	ldr	r3, [pc, #244]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800144c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001450:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001458:	4b39      	ldr	r3, [pc, #228]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001460:	2200      	movs	r2, #0
 8001462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146c:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001472:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001474:	4a34      	ldr	r2, [pc, #208]	@ (8001548 <MX_ADC1_Init+0x124>)
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001478:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800147e:	4b30      	ldr	r3, [pc, #192]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001480:	2201      	movs	r2, #1
 8001482:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001484:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800148e:	2201      	movs	r2, #1
 8001490:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001492:	482b      	ldr	r0, [pc, #172]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001494:	f000 fe58 	bl	8002148 <HAL_ADC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800149e:	f000 fb99 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014a2:	230f      	movs	r3, #15
 80014a4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014aa:	2301      	movs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	@ (8001540 <MX_ADC1_Init+0x11c>)
 80014b6:	f001 f957 	bl	8002768 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80014c0:	f000 fb88 	bl	8001bd4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80014cc:	2303      	movs	r3, #3
 80014ce:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014d0:	2302      	movs	r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80014d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_ADC1_Init+0x11c>)
 80014f0:	f001 fc62 	bl	8002db8 <HAL_ADCEx_InjectedConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80014fa:	f000 fb6b 	bl	8001bd4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80014fe:	230e      	movs	r3, #14
 8001500:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_ADC1_Init+0x11c>)
 800150c:	f001 fc54 	bl	8002db8 <HAL_ADCEx_InjectedConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001516:	f000 fb5d 	bl	8001bd4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800151a:	230f      	movs	r3, #15
 800151c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800151e:	2303      	movs	r3, #3
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <MX_ADC1_Init+0x11c>)
 8001528:	f001 fc46 	bl	8002db8 <HAL_ADCEx_InjectedConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001532:	f000 fb4f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	@ 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000040 	.word	0x20000040
 8001544:	40012000 	.word	0x40012000
 8001548:	0f000001 	.word	0x0f000001

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b096      	sub	sp, #88	@ 0x58
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2220      	movs	r2, #32
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fabb 	bl	8005b00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158a:	4b52      	ldr	r3, [pc, #328]	@ (80016d4 <MX_TIM1_Init+0x188>)
 800158c:	4a52      	ldr	r2, [pc, #328]	@ (80016d8 <MX_TIM1_Init+0x18c>)
 800158e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001590:	4b50      	ldr	r3, [pc, #320]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001596:	4b4f      	ldr	r3, [pc, #316]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001598:	2220      	movs	r2, #32
 800159a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1200-1;
 800159c:	4b4d      	ldr	r3, [pc, #308]	@ (80016d4 <MX_TIM1_Init+0x188>)
 800159e:	f240 42af 	movw	r2, #1199	@ 0x4af
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b4b      	ldr	r3, [pc, #300]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b48      	ldr	r3, [pc, #288]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b6:	4847      	ldr	r0, [pc, #284]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015b8:	f002 fc98 	bl	8003eec <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015c2:	f000 fb07 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015d0:	4619      	mov	r1, r3
 80015d2:	4840      	ldr	r0, [pc, #256]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015d4:	f003 fc48 	bl	8004e68 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015de:	f000 faf9 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e2:	483c      	ldr	r0, [pc, #240]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80015e4:	f002 fdaa 	bl	800413c <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015ee:	f000 faf1 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80015f2:	2370      	movs	r3, #112	@ 0x70
 80015f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015fe:	4619      	mov	r1, r3
 8001600:	4834      	ldr	r0, [pc, #208]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001602:	f004 f99b 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800160c:	f000 fae2 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001610:	2360      	movs	r3, #96	@ 0x60
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	4827      	ldr	r0, [pc, #156]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001636:	f003 fb55 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001640:	f000 fac8 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	2204      	movs	r2, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4821      	ldr	r0, [pc, #132]	@ (80016d4 <MX_TIM1_Init+0x188>)
 800164e:	f003 fb49 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001658:	f000 fabc 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800165c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001660:	2208      	movs	r2, #8
 8001662:	4619      	mov	r1, r3
 8001664:	481b      	ldr	r0, [pc, #108]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001666:	f003 fb3d 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001670:	f000 fab0 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8001674:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800167a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167e:	220c      	movs	r2, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <MX_TIM1_Init+0x188>)
 8001684:	f003 fb2e 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800168e:	f000 faa1 	bl	8001bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80016b6:	f004 f9bd 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80016c0:	f000 fa88 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <MX_TIM1_Init+0x188>)
 80016c6:	f000 fbe5 	bl	8001e94 <HAL_TIM_MspPostInit>

}
 80016ca:	bf00      	nop
 80016cc:	3758      	adds	r7, #88	@ 0x58
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000088 	.word	0x20000088
 80016d8:	40010000 	.word	0x40010000

080016dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2224      	movs	r2, #36	@ 0x24
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fa08 	bl	8005b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <MX_TIM2_Init+0xa4>)
 80016fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <MX_TIM2_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_TIM2_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <MX_TIM2_Init+0xa4>)
 800170e:	f04f 32ff 	mov.w	r2, #4294967295
 8001712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_TIM2_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <MX_TIM2_Init+0xa4>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001720:	2303      	movs	r3, #3
 8001722:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <MX_TIM2_Init+0xa4>)
 800174c:	f003 f80a 	bl	8004764 <HAL_TIM_Encoder_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001756:	f000 fa3d 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <MX_TIM2_Init+0xa4>)
 8001768:	f004 f8e8 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001772:	f000 fa2f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	@ 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000d0 	.word	0x200000d0

08001784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0318 	add.w	r3, r7, #24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001860 <MX_TIM3_Init+0xdc>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80017b4:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017b6:	2247      	movs	r2, #71	@ 0x47
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b24      	ldr	r3, [pc, #144]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4821      	ldr	r0, [pc, #132]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017d6:	f002 fb89 	bl	8003eec <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80017e0:	f000 f9f8 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0318 	add.w	r3, r7, #24
 80017ee:	4619      	mov	r1, r3
 80017f0:	481a      	ldr	r0, [pc, #104]	@ (800185c <MX_TIM3_Init+0xd8>)
 80017f2:	f003 fb39 	bl	8004e68 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017fc:	f000 f9ea 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001800:	4816      	ldr	r0, [pc, #88]	@ (800185c <MX_TIM3_Init+0xd8>)
 8001802:	f002 fe2d 	bl	8004460 <HAL_TIM_IC_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800180c:	f000 f9e2 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	@ (800185c <MX_TIM3_Init+0xd8>)
 8001820:	f004 f88c 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800182a:	f000 f9d3 	bl	8001bd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001832:	2301      	movs	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_TIM3_Init+0xd8>)
 8001846:	f003 f9b1 	bl	8004bac <HAL_TIM_IC_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001850:	f000 f9c0 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000118 	.word	0x20000118
 8001860:	40000400 	.word	0x40000400

08001864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_TIM4_Init+0x94>)
 8001882:	4a1e      	ldr	r2, [pc, #120]	@ (80018fc <MX_TIM4_Init+0x98>)
 8001884:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_TIM4_Init+0x94>)
 8001888:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800188c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_TIM4_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_TIM4_Init+0x94>)
 8001896:	2263      	movs	r2, #99	@ 0x63
 8001898:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_TIM4_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_TIM4_Init+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018a6:	4814      	ldr	r0, [pc, #80]	@ (80018f8 <MX_TIM4_Init+0x94>)
 80018a8:	f002 fb20 	bl	8003eec <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80018b2:	f000 f98f 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4619      	mov	r1, r3
 80018c2:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <MX_TIM4_Init+0x94>)
 80018c4:	f003 fad0 	bl	8004e68 <HAL_TIM_ConfigClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 f981 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <MX_TIM4_Init+0x94>)
 80018e0:	f004 f82c 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018ea:	f000 f973 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000160 	.word	0x20000160
 80018fc:	40000800 	.word	0x40000800

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <MX_GPIO_Init+0xfc>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a37      	ldr	r2, [pc, #220]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a30      	ldr	r2, [pc, #192]	@ (80019fc <MX_GPIO_Init+0xfc>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <MX_GPIO_Init+0xfc>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_EN3_GPIO_Port, DRIVE_EN3_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001970:	4823      	ldr	r0, [pc, #140]	@ (8001a00 <MX_GPIO_Init+0x100>)
 8001972:	f001 fe7d 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INL1_EN1_Pin|INL2_EN2_Pin|INL3_EN3_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800197c:	4821      	ldr	r0, [pc, #132]	@ (8001a04 <MX_GPIO_Init+0x104>)
 800197e:	f001 fe77 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRIVE_EN3_Pin */
  GPIO_InitStruct.Pin = DRIVE_EN3_Pin;
 8001982:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVE_EN3_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	4819      	ldr	r0, [pc, #100]	@ (8001a00 <MX_GPIO_Init+0x100>)
 800199c:	f001 fcb4 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <MX_GPIO_Init+0x104>)
 80019b6:	f001 fca7 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : INL1_EN1_Pin INL2_EN2_Pin INL3_EN3_Pin */
  GPIO_InitStruct.Pin = INL1_EN1_Pin|INL2_EN2_Pin|INL3_EN3_Pin;
 80019ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MX_GPIO_Init+0x104>)
 80019d4:	f001 fc98 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 80019d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4619      	mov	r1, r3
 80019ec:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <MX_GPIO_Init+0x100>)
 80019ee:	f001 fc8b 	bl	8003308 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020400 	.word	0x40020400

08001a08 <HAL_ADCEx_InjectedConvCpltCallback>:

float test_current = 0.0f;

// ADC call back
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	if (motor_fault || motor_stop) {
 8001a10:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_ADCEx_InjectedConvCpltCallback+0xa8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_ADCEx_InjectedConvCpltCallback+0x1e>
		stopMotor();
 8001a20:	f7ff fa8a 	bl	8000f38 <stopMotor>
		return;
 8001a24:	e03e      	b.n	8001aa4 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>
	}

	uint8_t hall_state = read_hall_sensors();
 8001a26:	f7ff fa59 	bl	8000edc <read_hall_sensors>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]

	if (direction == CW)
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_ADCEx_InjectedConvCpltCallback+0x3e>
	    sector = hall_to_sector_map_CW[hall_state & 0x07];
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8001a3e:	5cd2      	ldrb	r2, [r2, r3]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e006      	b.n	8001a54 <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	else
	    sector = hall_to_sector_map_CCW[hall_state & 0x07];
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <HAL_ADCEx_InjectedConvCpltCallback+0xb8>)
 8001a4e:	5cd2      	ldrb	r2, [r2, r3]
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8001a52:	701a      	strb	r2, [r3, #0]

	adc_cur_c = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1); // CH3 (PA3)
 8001a54:	2101      	movs	r1, #1
 8001a56:	481b      	ldr	r0, [pc, #108]	@ (8001ac4 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8001a58:	f001 f976 	bl	8002d48 <HAL_ADCEx_InjectedGetValue>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001a60:	6013      	str	r3, [r2, #0]
	adc_cur_b = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2); // CH14 (PC4)
 8001a62:	2102      	movs	r1, #2
 8001a64:	4817      	ldr	r0, [pc, #92]	@ (8001ac4 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8001a66:	f001 f96f 	bl	8002d48 <HAL_ADCEx_InjectedGetValue>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001a6e:	6013      	str	r3, [r2, #0]
	adc_cur_a = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3); // CH15 (PC5)
 8001a70:	2103      	movs	r1, #3
 8001a72:	4814      	ldr	r0, [pc, #80]	@ (8001ac4 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8001a74:	f001 f968 	bl	8002d48 <HAL_ADCEx_InjectedGetValue>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4a15      	ldr	r2, [pc, #84]	@ (8001ad0 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001a7c:	6013      	str	r3, [r2, #0]
	convert_adc_to_current();
 8001a7e:	f7ff f889 	bl	8000b94 <convert_adc_to_current>

	getActivePhaseCurrent();
 8001a82:	f7ff fbb1 	bl	80011e8 <getActivePhaseCurrent>

	pwm_duty = current_pi_controller();
 8001a86:	f7fe ff41 	bl	800090c <current_pi_controller>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 8001a90:	801a      	strh	r2, [r3, #0]

	sixStepCommutation(sector, pwm_duty);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 8001a98:	8812      	ldrh	r2, [r2, #0]
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb30 	bl	8001104 <sixStepCommutation>
}
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001a9 	.word	0x200001a9
 8001ab0:	2000020f 	.word	0x2000020f
 8001ab4:	2000020e 	.word	0x2000020e
 8001ab8:	08005b70 	.word	0x08005b70
 8001abc:	200001a8 	.word	0x200001a8
 8001ac0:	08005b78 	.word	0x08005b78
 8001ac4:	20000040 	.word	0x20000040
 8001ac8:	200001c4 	.word	0x200001c4
 8001acc:	200001c8 	.word	0x200001c8
 8001ad0:	200001cc 	.word	0x200001cc
 8001ad4:	2000020c 	.word	0x2000020c

08001ad8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d123      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
    calculate_speed_from_capture();
 8001aea:	f7ff f947 	bl	8000d7c <calculate_speed_from_capture>
    update_angle_from_encoder();
 8001aee:	f7ff f9c1 	bl	8000e74 <update_angle_from_encoder>

//    target_speed = position_pid_controller();

    float new_current_setpoint = velocity_pid_controller();
 8001af2:	f7fe ffb9 	bl	8000a68 <velocity_pid_controller>
 8001af6:	ed87 0a03 	vstr	s0, [r7, #12]

    if (new_current_setpoint > 0) {
 8001afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	dd03      	ble.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0x38>
        direction = CW;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e009      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x4c>
    } else if (new_current_setpoint < 0) {
 8001b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d502      	bpl.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x4c>
        direction = CCW;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
    }

    __disable_irq();
    current_setpoint = new_current_setpoint;
 8001b28:	4a06      	ldr	r2, [pc, #24]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b2e:	b662      	cpsie	i
}
 8001b30:	bf00      	nop
    __enable_irq();
  }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	2000020e 	.word	0x2000020e
 8001b44:	200001e4 	.word	0x200001e4

08001b48 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12a      	bne.n	8001bb0 <HAL_TIM_IC_CaptureCallback+0x68>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7f1b      	ldrb	r3, [r3, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d126      	bne.n	8001bb0 <HAL_TIM_IC_CaptureCallback+0x68>
  {
    ic_capture2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f003 fa47 	bl	8004ff8 <HAL_TIM_ReadCapturedValue>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x74>)
 8001b6e:	6013      	str	r3, [r2, #0]
    capture_diff = ic_capture2 - ic_capture1;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x74>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001b7c:	6013      	str	r3, [r2, #0]
    ic_capture1 = ic_capture2;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x74>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001b84:	6013      	str	r3, [r2, #0]

    if (!is_first_capture)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10c      	bne.n	8001baa <HAL_TIM_IC_CaptureCallback+0x62>
    {
      latest_pulse_period_s = (float)capture_diff / CAPTURE_TIMER_CLK_FREQ;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001bcc <HAL_TIM_IC_CaptureCallback+0x84>
 8001ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
    }
    is_first_capture = 0;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	200001bc 	.word	0x200001bc
 8001bc0:	200001b8 	.word	0x200001b8
 8001bc4:	200001c0 	.word	0x200001c0
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	49742400 	.word	0x49742400
 8001bd0:	200001b4 	.word	0x200001b4

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <Error_Handler+0x8>

08001be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	@ (8001cf0 <HAL_ADC_MspInit+0xc0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d149      	bne.n	8001ce6 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a26      	ldr	r2, [pc, #152]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_ADC_MspInit+0xc4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001caa:	2303      	movs	r3, #3
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480f      	ldr	r0, [pc, #60]	@ (8001cf8 <HAL_ADC_MspInit+0xc8>)
 8001cba:	f001 fb25 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cbe:	2330      	movs	r3, #48	@ 0x30
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480a      	ldr	r0, [pc, #40]	@ (8001cfc <HAL_ADC_MspInit+0xcc>)
 8001cd2:	f001 fb19 	bl	8003308 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2012      	movs	r0, #18
 8001cdc:	f001 fadd 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ce0:	2012      	movs	r0, #18
 8001ce2:	f001 faf6 	bl	80032d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020800 	.word	0x40020800

08001d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	@ (8001df4 <HAL_TIM_Base_MspInit+0xf4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a33      	ldr	r2, [pc, #204]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d3e:	e054      	b.n	8001dea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	@ (8001dfc <HAL_TIM_Base_MspInit+0xfc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d134      	bne.n	8001db4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a29      	ldr	r2, [pc, #164]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d82:	2340      	movs	r3, #64	@ 0x40
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4818      	ldr	r0, [pc, #96]	@ (8001e00 <HAL_TIM_Base_MspInit+0x100>)
 8001d9e:	f001 fab3 	bl	8003308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	201d      	movs	r0, #29
 8001da8:	f001 fa77 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dac:	201d      	movs	r0, #29
 8001dae:	f001 fa90 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8001db2:	e01a      	b.n	8001dea <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_TIM_Base_MspInit+0x104>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d115      	bne.n	8001dea <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	201e      	movs	r0, #30
 8001de0:	f001 fa5b 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001de4:	201e      	movs	r0, #30
 8001de6:	f001 fa74 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40000800 	.word	0x40000800

08001e08 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e28:	d12b      	bne.n	8001e82 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e62:	2303      	movs	r3, #3
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e7e:	f001 fa43 	bl	8003308 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000

08001e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_TIM_MspPostInit+0x68>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d11e      	bne.n	8001ef4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_TIM_MspPostInit+0x6c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ed2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <HAL_TIM_MspPostInit+0x70>)
 8001ef0:	f001 fa0a 	bl	8003308 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <MemManage_Handler+0x4>

08001f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 f8af 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <ADC_IRQHandler+0x10>)
 8001f6e:	f000 fabf 	bl	80024f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000040 	.word	0x20000040

08001f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <TIM3_IRQHandler+0x10>)
 8001f82:	f002 fd23 	bl	80049cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000118 	.word	0x20000118

08001f90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <TIM4_IRQHandler+0x10>)
 8001f96:	f002 fd19 	bl	80049cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000160 	.word	0x20000160

08001fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002000 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fcc:	f7ff ffea 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	@ (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f003 fd8b 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7ff f93b 	bl	8001274 <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800200c:	08005ba0 	.word	0x08005ba0
  ldr r2, =_sbss
 8002010:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002014:	2000021c 	.word	0x2000021c

08002018 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <CAN1_RX0_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <HAL_Init+0x40>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_Init+0x40>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a07      	ldr	r2, [pc, #28]	@ (800205c <HAL_Init+0x40>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f001 f91d 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	200f      	movs	r0, #15
 800204c:	f000 f808 	bl	8002060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fdc6 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x54>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_InitTick+0x58>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f001 f935 	bl	80032ee <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00e      	b.n	80020ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b0f      	cmp	r3, #15
 8002092:	d80a      	bhi.n	80020aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f001 f8fd 	bl	800329a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_InitTick+0x5c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000018 	.word	0x20000018
 80020b8:	20000020 	.word	0x20000020
 80020bc:	2000001c 	.word	0x2000001c

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000020 	.word	0x20000020
 80020e4:	20000218 	.word	0x20000218

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000218 	.word	0x20000218

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff ffee 	bl	80020e8 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffde 	bl	80020e8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000020 	.word	0x20000020

08002148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e033      	b.n	80021c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fd62 	bl	8001c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800218e:	f023 0302 	bic.w	r3, r3, #2
 8002192:	f043 0202 	orr.w	r2, r3, #2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fc06 	bl	80029ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021b6:	e001      	b.n	80021bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_Start+0x1a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0b2      	b.n	8002350 <HAL_ADC_Start+0x180>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d018      	beq.n	8002232 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002210:	4b52      	ldr	r3, [pc, #328]	@ (800235c <HAL_ADC_Start+0x18c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_ADC_Start+0x190>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9a      	lsrs	r2, r3, #18
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002224:	e002      	b.n	800222c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d17a      	bne.n	8002336 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800226a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800227e:	d106      	bne.n	800228e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	f023 0206 	bic.w	r2, r3, #6
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
 800228c:	e002      	b.n	8002294 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229c:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <HAL_ADC_Start+0x194>)
 800229e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022a8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12a      	bne.n	800230c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <HAL_ADC_Start+0x198>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d015      	beq.n	80022ec <HAL_ADC_Start+0x11c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a29      	ldr	r2, [pc, #164]	@ (800236c <HAL_ADC_Start+0x19c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_Start+0x106>
 80022ca:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_ADC_Start+0x194>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a25      	ldr	r2, [pc, #148]	@ (8002370 <HAL_ADC_Start+0x1a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d136      	bne.n	800234e <HAL_ADC_Start+0x17e>
 80022e0:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_ADC_Start+0x194>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d130      	bne.n	800234e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d129      	bne.n	800234e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	e020      	b.n	800234e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a15      	ldr	r2, [pc, #84]	@ (8002368 <HAL_ADC_Start+0x198>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d11b      	bne.n	800234e <HAL_ADC_Start+0x17e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d114      	bne.n	800234e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e00b      	b.n	800234e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20000018 	.word	0x20000018
 8002360:	431bde83 	.word	0x431bde83
 8002364:	40012300 	.word	0x40012300
 8002368:	40012000 	.word	0x40012000
 800236c:	40012100 	.word	0x40012100
 8002370:	40012200 	.word	0x40012200

08002374 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Stop+0x16>
 8002386:	2302      	movs	r3, #2
 8002388:	e021      	b.n	80023ce <HAL_ADC_Stop+0x5a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f6:	d113      	bne.n	8002420 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e063      	b.n	80024e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff fe62 	bl	80020e8 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002426:	e021      	b.n	800246c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d01d      	beq.n	800246c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_ADC_PollForConversion+0x6c>
 8002436:	f7ff fe57 	bl	80020e8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d212      	bcs.n	800246c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d00b      	beq.n	800246c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0204 	orr.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03d      	b.n	80024e8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d1d6      	bne.n	8002428 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0212 	mvn.w	r2, #18
 8002482:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d123      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11f      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d111      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d049      	beq.n	80025ba <HAL_ADC_IRQHandler+0xca>
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d046      	beq.n	80025ba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12b      	bne.n	80025aa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d127      	bne.n	80025aa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002572:	2b00      	cmp	r3, #0
 8002574:	d119      	bne.n	80025aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0220 	bic.w	r2, r2, #32
 8002584:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8bd 	bl	800272a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0212 	mvn.w	r2, #18
 80025b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d057      	beq.n	8002680 <HAL_ADC_IRQHandler+0x190>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d054      	beq.n	8002680 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d139      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12b      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d124      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11d      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d119      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800264a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff f9c9 	bl	8001a08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 020c 	mvn.w	r2, #12
 800267e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x1d6>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d014      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10d      	bne.n	80026c6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f841 	bl	800273e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0201 	mvn.w	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026d4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <HAL_ADC_IRQHandler+0x218>
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f06f 0220 	mvn.w	r2, #32
 80026f6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f82a 	bl	8002752 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0220 	mvn.w	r2, #32
 8002706:	601a      	str	r2, [r3, #0]
  }
}
 8002708:	bf00      	nop
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e105      	b.n	8002990 <HAL_ADC_ConfigChannel+0x228>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b09      	cmp	r3, #9
 8002792:	d925      	bls.n	80027e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68d9      	ldr	r1, [r3, #12]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	3b1e      	subs	r3, #30
 80027aa:	2207      	movs	r2, #7
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43da      	mvns	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	400a      	ands	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68d9      	ldr	r1, [r3, #12]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	4603      	mov	r3, r0
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4403      	add	r3, r0
 80027d2:	3b1e      	subs	r3, #30
 80027d4:	409a      	lsls	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	e022      	b.n	8002826 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	2207      	movs	r2, #7
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	400a      	ands	r2, r1
 8002802:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4618      	mov	r0, r3
 8002816:	4603      	mov	r3, r0
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4403      	add	r3, r0
 800281c:	409a      	lsls	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b06      	cmp	r3, #6
 800282c:	d824      	bhi.n	8002878 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3b05      	subs	r3, #5
 8002840:	221f      	movs	r2, #31
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3b05      	subs	r3, #5
 800286a:	fa00 f203 	lsl.w	r2, r0, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	635a      	str	r2, [r3, #52]	@ 0x34
 8002876:	e04c      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d824      	bhi.n	80028ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b23      	subs	r3, #35	@ 0x23
 8002892:	221f      	movs	r2, #31
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43da      	mvns	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	400a      	ands	r2, r1
 80028a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b23      	subs	r3, #35	@ 0x23
 80028bc:	fa00 f203 	lsl.w	r2, r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c8:	e023      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	3b41      	subs	r3, #65	@ 0x41
 80028dc:	221f      	movs	r2, #31
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	3b41      	subs	r3, #65	@ 0x41
 8002906:	fa00 f203 	lsl.w	r2, r0, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_ADC_ConfigChannel+0x234>)
 8002914:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_ADC_ConfigChannel+0x238>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d109      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1cc>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b12      	cmp	r3, #18
 8002926:	d105      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_ADC_ConfigChannel+0x238>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d123      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x21e>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d003      	beq.n	800294e <HAL_ADC_ConfigChannel+0x1e6>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b11      	cmp	r3, #17
 800294c:	d11b      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b10      	cmp	r3, #16
 8002960:	d111      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_ADC_ConfigChannel+0x240>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0c9a      	lsrs	r2, r3, #18
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002978:	e002      	b.n	8002980 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40012300 	.word	0x40012300
 80029a0:	40012000 	.word	0x40012000
 80029a4:	20000018 	.word	0x20000018
 80029a8:	431bde83 	.word	0x431bde83

080029ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b4:	4b79      	ldr	r3, [pc, #484]	@ (8002b9c <ADC_Init+0x1f0>)
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	4a58      	ldr	r2, [pc, #352]	@ (8002ba0 <ADC_Init+0x1f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	e00f      	b.n	8002aaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0202 	bic.w	r2, r2, #2
 8002ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
 8002ac4:	005a      	lsls	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002af6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	3b01      	subs	r3, #1
 8002b04:	035a      	lsls	r2, r3, #13
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	e007      	b.n	8002b20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	051a      	lsls	r2, r3, #20
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b62:	025a      	lsls	r2, r3, #9
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	029a      	lsls	r2, r3, #10
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	0f000001 	.word	0x0f000001

08002ba4 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADCEx_InjectedStart_IT+0x22>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0b2      	b.n	8002d2c <HAL_ADCEx_InjectedStart_IT+0x188>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d018      	beq.n	8002c0e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bec:	4b52      	ldr	r3, [pc, #328]	@ (8002d38 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_ADCEx_InjectedStart_IT+0x198>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0c9a      	lsrs	r2, r3, #18
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c00:	e002      	b.n	8002c08 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d17a      	bne.n	8002d12 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f06f 0204 	mvn.w	r2, #4
 8002c52:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c62:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8002c66:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d124      	bne.n	8002cbe <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d041      	beq.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d03e      	beq.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e035      	b.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a15      	ldr	r2, [pc, #84]	@ (8002d44 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d11a      	bne.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d017      	beq.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d014      	beq.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e00b      	b.n	8002d2a <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000018 	.word	0x20000018
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	40012300 	.word	0x40012300
 8002d44:	40012000 	.word	0x40012000

08002d48 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0204 	mvn.w	r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d81f      	bhi.n	8002da8 <HAL_ADCEx_InjectedGetValue+0x60>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d9f 	.word	0x08002d9f
 8002d74:	08002d95 	.word	0x08002d95
 8002d78:	08002d8b 	.word	0x08002d8b
 8002d7c:	08002d81 	.word	0x08002d81
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d86:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002d88:	e00f      	b.n	8002daa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002d92:	e00a      	b.n	8002daa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002d9c:	e005      	b.n	8002daa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002da6:	e000      	b.n	8002daa <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8002da8:	bf00      	nop
  }
  return tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e17d      	b.n	80030cc <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b09      	cmp	r3, #9
 8002dde:	d925      	bls.n	8002e2c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	2207      	movs	r2, #7
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68d9      	ldr	r1, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4403      	add	r3, r0
 8002e1e:	3b1e      	subs	r3, #30
 8002e20:	409a      	lsls	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	e022      	b.n	8002e72 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	2207      	movs	r2, #7
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6919      	ldr	r1, [r3, #16]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4403      	add	r3, r0
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	051a      	lsls	r2, r3, #20
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3303      	adds	r3, #3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	221f      	movs	r2, #31
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3303      	adds	r3, #3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a74      	ldr	r2, [pc, #464]	@ (80030d8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	e00f      	b.n	8002f70 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002f6e:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7d5b      	ldrb	r3, [r3, #21]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e007      	b.n	8002f9a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f98:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	7d1b      	ldrb	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e007      	b.n	8002fc4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d02e      	beq.n	800302a <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d840      	bhi.n	8003052 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d002      	beq.n	8002fda <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d014      	beq.n	8003002 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002fd8:	e03b      	b.n	8003052 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002fe8:	f023 030f 	bic.w	r3, r3, #15
 8002fec:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6959      	ldr	r1, [r3, #20]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]
      break;
 8003000:	e03b      	b.n	800307a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003010:	f023 030f 	bic.w	r3, r3, #15
 8003014:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6999      	ldr	r1, [r3, #24]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e027      	b.n	800307a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003038:	f023 030f 	bic.w	r3, r3, #15
 800303c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
      break;
 8003050:	e013      	b.n	800307a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003060:	f023 030f 	bic.w	r3, r3, #15
 8003064:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a19      	ldr	r1, [r3, #32]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	621a      	str	r2, [r3, #32]
      break;
 8003078:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307a:	4b18      	ldr	r3, [pc, #96]	@ (80030dc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800307c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d109      	bne.n	800309c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b12      	cmp	r3, #18
 800308e:	d105      	bne.n	800309c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0f      	ldr	r2, [pc, #60]	@ (80030e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d003      	beq.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b11      	cmp	r3, #17
 80030b4:	d105      	bne.n	80030c2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	000f0001 	.word	0x000f0001
 80030dc:	40012300 	.word	0x40012300
 80030e0:	40012000 	.word	0x40012000

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	@ (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	@ (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	@ 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff29 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff3e 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff31 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffa2 	bl	8003240 <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e16b      	b.n	80035fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 815a 	bne.w	80035f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80b4 	beq.w	80035f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b60      	ldr	r3, [pc, #384]	@ (8003614 <HAL_GPIO_Init+0x30c>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	4a5f      	ldr	r2, [pc, #380]	@ (8003614 <HAL_GPIO_Init+0x30c>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800349c:	6453      	str	r3, [r2, #68]	@ 0x44
 800349e:	4b5d      	ldr	r3, [pc, #372]	@ (8003614 <HAL_GPIO_Init+0x30c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003618 <HAL_GPIO_Init+0x310>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a52      	ldr	r2, [pc, #328]	@ (800361c <HAL_GPIO_Init+0x314>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02b      	beq.n	800352e <HAL_GPIO_Init+0x226>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a51      	ldr	r2, [pc, #324]	@ (8003620 <HAL_GPIO_Init+0x318>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d025      	beq.n	800352a <HAL_GPIO_Init+0x222>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a50      	ldr	r2, [pc, #320]	@ (8003624 <HAL_GPIO_Init+0x31c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01f      	beq.n	8003526 <HAL_GPIO_Init+0x21e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003628 <HAL_GPIO_Init+0x320>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d019      	beq.n	8003522 <HAL_GPIO_Init+0x21a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4e      	ldr	r2, [pc, #312]	@ (800362c <HAL_GPIO_Init+0x324>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0x216>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003630 <HAL_GPIO_Init+0x328>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00d      	beq.n	800351a <HAL_GPIO_Init+0x212>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4c      	ldr	r2, [pc, #304]	@ (8003634 <HAL_GPIO_Init+0x32c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <HAL_GPIO_Init+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4b      	ldr	r2, [pc, #300]	@ (8003638 <HAL_GPIO_Init+0x330>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_GPIO_Init+0x20a>
 800350e:	2307      	movs	r3, #7
 8003510:	e00e      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003512:	2308      	movs	r3, #8
 8003514:	e00c      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003516:	2306      	movs	r3, #6
 8003518:	e00a      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800351a:	2305      	movs	r3, #5
 800351c:	e008      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800351e:	2304      	movs	r3, #4
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003522:	2303      	movs	r3, #3
 8003524:	e004      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003526:	2302      	movs	r3, #2
 8003528:	e002      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800352e:	2300      	movs	r3, #0
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	f002 0203 	and.w	r2, r2, #3
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	4093      	lsls	r3, r2
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003540:	4935      	ldr	r1, [pc, #212]	@ (8003618 <HAL_GPIO_Init+0x310>)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	3302      	adds	r3, #2
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b3b      	ldr	r3, [pc, #236]	@ (800363c <HAL_GPIO_Init+0x334>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a32      	ldr	r2, [pc, #200]	@ (800363c <HAL_GPIO_Init+0x334>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b30      	ldr	r3, [pc, #192]	@ (800363c <HAL_GPIO_Init+0x334>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a27      	ldr	r2, [pc, #156]	@ (800363c <HAL_GPIO_Init+0x334>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a2:	4b26      	ldr	r3, [pc, #152]	@ (800363c <HAL_GPIO_Init+0x334>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c6:	4a1d      	ldr	r2, [pc, #116]	@ (800363c <HAL_GPIO_Init+0x334>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <HAL_GPIO_Init+0x334>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f0:	4a12      	ldr	r2, [pc, #72]	@ (800363c <HAL_GPIO_Init+0x334>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3301      	adds	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	f67f ae90 	bls.w	8003324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40013800 	.word	0x40013800
 800361c:	40020000 	.word	0x40020000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800
 8003628:	40020c00 	.word	0x40020c00
 800362c:	40021000 	.word	0x40021000
 8003630:	40021400 	.word	0x40021400
 8003634:	40021800 	.word	0x40021800
 8003638:	40021c00 	.word	0x40021c00
 800363c:	40013c00 	.word	0x40013c00

08003640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800368c:	e003      	b.n	8003696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e267      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036c2:	4b88      	ldr	r3, [pc, #544]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b85      	ldr	r3, [pc, #532]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b82      	ldr	r3, [pc, #520]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b7e      	ldr	r3, [pc, #504]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e242      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b70      	ldr	r3, [pc, #448]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b69      	ldr	r3, [pc, #420]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a68      	ldr	r2, [pc, #416]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b66      	ldr	r3, [pc, #408]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fcc4 	bl	80020e8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fcc0 	bl	80020e8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e207      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5b      	ldr	r3, [pc, #364]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fcb0 	bl	80020e8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fcac 	bl	80020e8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f3      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b51      	ldr	r3, [pc, #324]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ba:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b44      	ldr	r3, [pc, #272]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1c7      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4937      	ldr	r1, [pc, #220]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe fc65 	bl	80020e8 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003822:	f7fe fc61 	bl	80020e8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1a8      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4925      	ldr	r1, [pc, #148]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fc44 	bl	80020e8 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003864:	f7fe fc40 	bl	80020e8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e187      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <HAL_RCC_OscConfig+0x248>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe fc24 	bl	80020e8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fc20 	bl	80020e8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e167      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e01b      	b.n	80038fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_RCC_OscConfig+0x248>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe fc0d 	bl	80020e8 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e00e      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe fc09 	bl	80020e8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d907      	bls.n	80038f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e150      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470000 	.word	0x42470000
 80038ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b88      	ldr	r3, [pc, #544]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8097 	beq.w	8003a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b81      	ldr	r3, [pc, #516]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	4a7c      	ldr	r2, [pc, #496]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	@ 0x40
 800392a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b77      	ldr	r3, [pc, #476]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b74      	ldr	r3, [pc, #464]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe fbc9 	bl	80020e8 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe fbc5 	bl	80020e8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e10c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x2ea>
 8003980:	4b64      	ldr	r3, [pc, #400]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	@ 0x70
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b5f      	ldr	r3, [pc, #380]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 80039b0:	4b58      	ldr	r3, [pc, #352]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b4:	4a57      	ldr	r2, [pc, #348]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80039bc:	4b55      	ldr	r3, [pc, #340]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a54      	ldr	r2, [pc, #336]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe fb8a 	bl	80020e8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fe fb86 	bl	80020e8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0cb      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fe fb74 	bl	80020e8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe fb70 	bl	80020e8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0b5      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ee      	bne.n	8003a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	4a38      	ldr	r2, [pc, #224]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a1 	beq.w	8003b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a42:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d05c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d141      	bne.n	8003ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fb44 	bl	80020e8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fb40 	bl	80020e8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e087      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	491b      	ldr	r1, [pc, #108]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fb19 	bl	80020e8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fe fb15 	bl	80020e8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e05c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x416>
 8003ad8:	e054      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fb02 	bl	80020e8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fafe 	bl	80020e8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e045      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cc      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b68      	ldr	r3, [pc, #416]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90c      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e067      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4934      	ldr	r1, [pc, #208]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fe fa30 	bl	80020e8 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe fa2c 	bl	80020e8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d20c      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d06:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe f990 	bl	8002060 <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	08005b80 	.word	0x08005b80
 8003d58:	20000018 	.word	0x20000018
 8003d5c:	2000001c 	.word	0x2000001c

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b090      	sub	sp, #64	@ 0x40
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80a1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e09b      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b53      	ldr	r3, [pc, #332]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d98:	e09b      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b53      	ldr	r3, [pc, #332]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d9e:	e098      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003daa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	fb03 f201 	mul.w	r2, r3, r1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a43      	ldr	r2, [pc, #268]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dda:	fba0 1202 	umull	r1, r2, r0, r2
 8003dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de0:	460a      	mov	r2, r1
 8003de2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	2200      	movs	r2, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003dfa:	f7fc fbf1 	bl	80005e0 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e06:	e053      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	617a      	str	r2, [r7, #20]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e1a:	f04f 0b00 	mov.w	fp, #0
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0159      	lsls	r1, r3, #5
 8003e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e30:	0150      	lsls	r0, r2, #5
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	ebb2 080a 	subs.w	r8, r2, sl
 8003e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e52:	ebb2 0408 	subs.w	r4, r2, r8
 8003e56:	eb63 0509 	sbc.w	r5, r3, r9
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	00eb      	lsls	r3, r5, #3
 8003e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	eb14 030a 	adds.w	r3, r4, sl
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	eb45 030b 	adc.w	r3, r5, fp
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea4:	f7fc fb9c 	bl	80005e0 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ec0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ece:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3740      	adds	r7, #64	@ 0x40
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	017d7840 	.word	0x017d7840

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd fef4 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f001 f8c6 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e046      	b.n	8004032 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <HAL_TIM_Base_Start+0xb4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d01d      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_TIM_Base_Start+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_TIM_Base_Start+0xbc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_TIM_Base_Start+0xc0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_TIM_Base_Start+0xc4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <HAL_TIM_Base_Start+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_Base_Start+0x70>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <HAL_TIM_Base_Start+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d010      	beq.n	8004030 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e007      	b.n	8004030 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e04e      	b.n	8004112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <HAL_TIM_Base_Start_IT+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_TIM_Base_Start_IT+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_TIM_Base_Start_IT+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_TIM_Base_Start_IT+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_TIM_Base_Start_IT+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x80>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_TIM_Base_Start_IT+0xdc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d010      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e007      	b.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800

0800413c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e041      	b.n	80041d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f839 	bl	80041da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 ff9e 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_TIM_PWM_Start+0x24>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e022      	b.n	800425a <HAL_TIM_PWM_Start+0x6a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d109      	bne.n	800422e <HAL_TIM_PWM_Start+0x3e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e015      	b.n	800425a <HAL_TIM_PWM_Start+0x6a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d109      	bne.n	8004248 <HAL_TIM_PWM_Start+0x58>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e008      	b.n	800425a <HAL_TIM_PWM_Start+0x6a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07c      	b.n	800435c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0x82>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004270:	e013      	b.n	800429a <HAL_TIM_PWM_Start+0xaa>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start+0x92>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004280:	e00b      	b.n	800429a <HAL_TIM_PWM_Start+0xaa>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start+0xa2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004290:	e003      	b.n	800429a <HAL_TIM_PWM_Start+0xaa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2201      	movs	r2, #1
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fb24 	bl	80058f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <HAL_TIM_PWM_Start+0x174>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_PWM_Start+0xcc>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <HAL_TIM_PWM_Start+0x178>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_PWM_Start+0xd0>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_TIM_PWM_Start+0xd2>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_TIM_PWM_Start+0x174>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d01d      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1f      	ldr	r2, [pc, #124]	@ (800436c <HAL_TIM_PWM_Start+0x17c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <HAL_TIM_PWM_Start+0x180>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1c      	ldr	r2, [pc, #112]	@ (8004374 <HAL_TIM_PWM_Start+0x184>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <HAL_TIM_PWM_Start+0x178>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <HAL_TIM_PWM_Start+0x188>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_PWM_Start+0x136>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <HAL_TIM_PWM_Start+0x18c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d111      	bne.n	800434a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d010      	beq.n	800435a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	e007      	b.n	800435a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40014000 	.word	0x40014000
 800437c:	40001800 	.word	0x40001800

08004380 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f001 faac 	bl	80058f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2e      	ldr	r2, [pc, #184]	@ (8004458 <HAL_TIM_PWM_Stop+0xd8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIM_PWM_Stop+0x2c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <HAL_TIM_PWM_Stop+0xdc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <HAL_TIM_PWM_Stop+0x30>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_TIM_PWM_Stop+0x32>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d017      	beq.n	80043e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <HAL_TIM_PWM_Stop+0x66>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_PWM_Stop+0x66>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_TIM_PWM_Stop+0x96>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <HAL_TIM_PWM_Stop+0x96>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Stop+0xa6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004424:	e013      	b.n	800444e <HAL_TIM_PWM_Stop+0xce>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Stop+0xb6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Stop+0xce>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Stop+0xc6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004444:	e003      	b.n	800444e <HAL_TIM_PWM_Stop+0xce>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e041      	b.n	80044f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f839 	bl	80044fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fe0c 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_TIM_IC_Start_IT+0x1e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e013      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d104      	bne.n	8004542 <HAL_TIM_IC_Start_IT+0x2e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e00b      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d104      	bne.n	8004552 <HAL_TIM_IC_Start_IT+0x3e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e003      	b.n	800455a <HAL_TIM_IC_Start_IT+0x46>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_TIM_IC_Start_IT+0x58>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e013      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d104      	bne.n	800457c <HAL_TIM_IC_Start_IT+0x68>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e00b      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d104      	bne.n	800458c <HAL_TIM_IC_Start_IT+0x78>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e003      	b.n	8004594 <HAL_TIM_IC_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004592:	b2db      	uxtb	r3, r3
 8004594:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0cc      	b.n	8004740 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_IC_Start_IT+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b4:	e013      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0xb2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0xc2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d4:	e003      	b.n	80045de <HAL_TIM_IC_Start_IT+0xca>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_IC_Start_IT+0xda>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ec:	e013      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_IC_Start_IT+0xea>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d104      	bne.n	800460e <HAL_TIM_IC_Start_IT+0xfa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800460c:	e003      	b.n	8004616 <HAL_TIM_IC_Start_IT+0x102>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d841      	bhi.n	80046a0 <HAL_TIM_IC_Start_IT+0x18c>
 800461c:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <HAL_TIM_IC_Start_IT+0x110>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004659 	.word	0x08004659
 8004628:	080046a1 	.word	0x080046a1
 800462c:	080046a1 	.word	0x080046a1
 8004630:	080046a1 	.word	0x080046a1
 8004634:	0800466b 	.word	0x0800466b
 8004638:	080046a1 	.word	0x080046a1
 800463c:	080046a1 	.word	0x080046a1
 8004640:	080046a1 	.word	0x080046a1
 8004644:	0800467d 	.word	0x0800467d
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046a1 	.word	0x080046a1
 8004654:	0800468f 	.word	0x0800468f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0202 	orr.w	r2, r2, #2
 8004666:	60da      	str	r2, [r3, #12]
      break;
 8004668:	e01d      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0204 	orr.w	r2, r2, #4
 8004678:	60da      	str	r2, [r3, #12]
      break;
 800467a:	e014      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0208 	orr.w	r2, r2, #8
 800468a:	60da      	str	r2, [r3, #12]
      break;
 800468c:	e00b      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0210 	orr.w	r2, r2, #16
 800469c:	60da      	str	r2, [r3, #12]
      break;
 800469e:	e002      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d148      	bne.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2201      	movs	r2, #1
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f91b 	bl	80058f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	@ (8004748 <HAL_TIM_IC_Start_IT+0x234>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d01d      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	@ (800474c <HAL_TIM_IC_Start_IT+0x238>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d018      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_TIM_IC_Start_IT+0x23c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_TIM_IC_Start_IT+0x240>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <HAL_TIM_IC_Start_IT+0x244>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a18      	ldr	r2, [pc, #96]	@ (800475c <HAL_TIM_IC_Start_IT+0x248>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIM_IC_Start_IT+0x1f6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a16      	ldr	r2, [pc, #88]	@ (8004760 <HAL_TIM_IC_Start_IT+0x24c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d111      	bne.n	800472e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d010      	beq.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472c:	e007      	b.n	800473e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e097      	b.n	80048a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fd fb3b 	bl	8001e08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 fc7f 	bl	80050bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	4313      	orrs	r3, r2
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004804:	f023 030c 	bic.w	r3, r3, #12
 8004808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4313      	orrs	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	031b      	lsls	r3, r3, #12
 8004834:	4313      	orrs	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4313      	orrs	r3, r2
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048e6:	7b7b      	ldrb	r3, [r7, #13]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e069      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004900:	e031      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d110      	bne.n	800492a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800490e:	7b3b      	ldrb	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e055      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004928:	e01d      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d108      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800493c:	7b3b      	ldrb	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e03e      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_Encoder_Start+0xc4>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d008      	beq.n	8004984 <HAL_TIM_Encoder_Start+0xd4>
 8004972:	e00f      	b.n	8004994 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 ffb7 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 8004982:	e016      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	2104      	movs	r1, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f000 ffaf 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 8004992:	e00e      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ffa7 	bl	80058f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	2104      	movs	r1, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ffa0 	bl	80058f0 <TIM_CCxChannelCmd>
      break;
 80049b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d020      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01b      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0202 	mvn.w	r2, #2
 8004a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd f896 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fb2e 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fb35 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d020      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0204 	mvn.w	r2, #4
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd f870 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fb08 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb0f 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0208 	mvn.w	r2, #8
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd f84a 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fae2 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fae9 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0210 	mvn.w	r2, #16
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd f824 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fabc 	bl	8005080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fac3 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0201 	mvn.w	r2, #1
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc ffd0 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 ffc8 	bl	8005aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa94 	bl	80050a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0220 	mvn.w	r2, #32
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 ff9a 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_IC_ConfigChannel+0x1e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e088      	b.n	8004cdc <HAL_TIM_IC_ConfigChannel+0x130>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004be8:	f000 fcbe 	bl	8005568 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 020c 	bic.w	r2, r2, #12
 8004bfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6999      	ldr	r1, [r3, #24]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	619a      	str	r2, [r3, #24]
 8004c0e:	e060      	b.n	8004cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d11c      	bne.n	8004c50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c26:	f000 fd42 	bl	80056ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	021a      	lsls	r2, r3, #8
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	619a      	str	r2, [r3, #24]
 8004c4e:	e040      	b.n	8004cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11b      	bne.n	8004c8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c66:	f000 fd8f 	bl	8005788 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 020c 	bic.w	r2, r2, #12
 8004c78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	61da      	str	r2, [r3, #28]
 8004c8c:	e021      	b.n	8004cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b0c      	cmp	r3, #12
 8004c92:	d11c      	bne.n	8004cce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ca4:	f000 fdac 	bl	8005800 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69d9      	ldr	r1, [r3, #28]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
 8004ccc:	e001      	b.n	8004cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e0ae      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	f200 809f 	bhi.w	8004e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d12:	a201      	add	r2, pc, #4	@ (adr r2, 8004d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004e51 	.word	0x08004e51
 8004d20:	08004e51 	.word	0x08004e51
 8004d24:	08004e51 	.word	0x08004e51
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004e51 	.word	0x08004e51
 8004d30:	08004e51 	.word	0x08004e51
 8004d34:	08004e51 	.word	0x08004e51
 8004d38:	08004dcf 	.word	0x08004dcf
 8004d3c:	08004e51 	.word	0x08004e51
 8004d40:	08004e51 	.word	0x08004e51
 8004d44:	08004e51 	.word	0x08004e51
 8004d48:	08004e0f 	.word	0x08004e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fa58 	bl	8005208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6999      	ldr	r1, [r3, #24]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
      break;
 8004d8a:	e064      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 faa8 	bl	80052e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
      break;
 8004dcc:	e043      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fafd 	bl	80053d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0208 	orr.w	r2, r2, #8
 8004de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0204 	bic.w	r2, r2, #4
 8004df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69d9      	ldr	r1, [r3, #28]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	61da      	str	r2, [r3, #28]
      break;
 8004e0c:	e023      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fb51 	bl	80054bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	61da      	str	r2, [r3, #28]
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIM_ConfigClockSource+0x1c>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0b4      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ebc:	d03e      	beq.n	8004f3c <HAL_TIM_ConfigClockSource+0xd4>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	f200 8087 	bhi.w	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	f000 8086 	beq.w	8004fda <HAL_TIM_ConfigClockSource+0x172>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	d87f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b70      	cmp	r3, #112	@ 0x70
 8004ed6:	d01a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xa6>
 8004ed8:	2b70      	cmp	r3, #112	@ 0x70
 8004eda:	d87b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b60      	cmp	r3, #96	@ 0x60
 8004ede:	d050      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d877      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b50      	cmp	r3, #80	@ 0x50
 8004ee6:	d03c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xfa>
 8004ee8:	2b50      	cmp	r3, #80	@ 0x50
 8004eea:	d873      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d058      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d86f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b30      	cmp	r3, #48	@ 0x30
 8004ef6:	d064      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	2b30      	cmp	r3, #48	@ 0x30
 8004efa:	d86b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d060      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d867      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d05a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	e062      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f1e:	f000 fcc7 	bl	80058b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
      break;
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	f000 fcb0 	bl	80058b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f5e:	609a      	str	r2, [r3, #8]
      break;
 8004f60:	e03c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fb6e 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2150      	movs	r1, #80	@ 0x50
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fc7d 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8004f80:	e02c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fbca 	bl	8005728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2160      	movs	r1, #96	@ 0x60
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fc6d 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e01c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fb4e 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2140      	movs	r1, #64	@ 0x40
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fc5d 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fc54 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e003      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e000      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d831      	bhi.n	8005070 <HAL_TIM_ReadCapturedValue+0x78>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <HAL_TIM_ReadCapturedValue+0x1c>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005049 	.word	0x08005049
 8005018:	08005071 	.word	0x08005071
 800501c:	08005071 	.word	0x08005071
 8005020:	08005071 	.word	0x08005071
 8005024:	08005053 	.word	0x08005053
 8005028:	08005071 	.word	0x08005071
 800502c:	08005071 	.word	0x08005071
 8005030:	08005071 	.word	0x08005071
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005071 	.word	0x08005071
 800503c:	08005071 	.word	0x08005071
 8005040:	08005071 	.word	0x08005071
 8005044:	08005067 	.word	0x08005067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	60fb      	str	r3, [r7, #12]

      break;
 8005050:	e00f      	b.n	8005072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	60fb      	str	r3, [r7, #12]

      break;
 800505a:	e00a      	b.n	8005072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	60fb      	str	r3, [r7, #12]

      break;
 8005064:	e005      	b.n	8005072 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	60fb      	str	r3, [r7, #12]

      break;
 800506e:	e000      	b.n	8005072 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005070:	bf00      	nop
  }

  return tmpreg;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a43      	ldr	r2, [pc, #268]	@ (80051dc <TIM_Base_SetConfig+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a40      	ldr	r2, [pc, #256]	@ (80051e0 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3f      	ldr	r2, [pc, #252]	@ (80051e4 <TIM_Base_SetConfig+0x128>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3e      	ldr	r2, [pc, #248]	@ (80051e8 <TIM_Base_SetConfig+0x12c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3d      	ldr	r2, [pc, #244]	@ (80051ec <TIM_Base_SetConfig+0x130>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a32      	ldr	r2, [pc, #200]	@ (80051dc <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d027      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <TIM_Base_SetConfig+0x124>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d023      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2e      	ldr	r2, [pc, #184]	@ (80051e4 <TIM_Base_SetConfig+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <TIM_Base_SetConfig+0x12c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <TIM_Base_SetConfig+0x130>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d017      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <TIM_Base_SetConfig+0x134>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <TIM_Base_SetConfig+0x138>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <TIM_Base_SetConfig+0x13c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <TIM_Base_SetConfig+0x140>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a27      	ldr	r2, [pc, #156]	@ (8005200 <TIM_Base_SetConfig+0x144>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a26      	ldr	r2, [pc, #152]	@ (8005204 <TIM_Base_SetConfig+0x148>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d108      	bne.n	8005180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a0e      	ldr	r2, [pc, #56]	@ (80051dc <TIM_Base_SetConfig+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0xf2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a10      	ldr	r2, [pc, #64]	@ (80051ec <TIM_Base_SetConfig+0x130>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d103      	bne.n	80051b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	40001800 	.word	0x40001800
 8005200:	40001c00 	.word	0x40001c00
 8005204:	40002000 	.word	0x40002000

08005208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f023 0201 	bic.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0302 	bic.w	r3, r3, #2
 8005250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a20      	ldr	r2, [pc, #128]	@ (80052e0 <TIM_OC1_SetConfig+0xd8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC1_SetConfig+0x64>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1f      	ldr	r2, [pc, #124]	@ (80052e4 <TIM_OC1_SetConfig+0xdc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0308 	bic.w	r3, r3, #8
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <TIM_OC1_SetConfig+0xd8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_OC1_SetConfig+0x8e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a14      	ldr	r2, [pc, #80]	@ (80052e4 <TIM_OC1_SetConfig+0xdc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d111      	bne.n	80052ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	621a      	str	r2, [r3, #32]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400

080052e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f023 0210 	bic.w	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0320 	bic.w	r3, r3, #32
 8005332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a22      	ldr	r2, [pc, #136]	@ (80053cc <TIM_OC2_SetConfig+0xe4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC2_SetConfig+0x68>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <TIM_OC2_SetConfig+0xe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d10d      	bne.n	800536c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800536a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a17      	ldr	r2, [pc, #92]	@ (80053cc <TIM_OC2_SetConfig+0xe4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC2_SetConfig+0x94>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <TIM_OC2_SetConfig+0xe8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d113      	bne.n	80053a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010400 	.word	0x40010400

080053d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800541c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <TIM_OC3_SetConfig+0xe0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_OC3_SetConfig+0x66>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <TIM_OC3_SetConfig+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10d      	bne.n	8005456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a16      	ldr	r2, [pc, #88]	@ (80054b4 <TIM_OC3_SetConfig+0xe0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x92>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <TIM_OC3_SetConfig+0xe4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d113      	bne.n	800548e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400

080054bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	031b      	lsls	r3, r3, #12
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	@ (8005560 <TIM_OC4_SetConfig+0xa4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC4_SetConfig+0x68>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <TIM_OC4_SetConfig+0xa8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d109      	bne.n	8005538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800552a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f023 0201 	bic.w	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a28      	ldr	r2, [pc, #160]	@ (8005634 <TIM_TI1_SetConfig+0xcc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01b      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559c:	d017      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a25      	ldr	r2, [pc, #148]	@ (8005638 <TIM_TI1_SetConfig+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a24      	ldr	r2, [pc, #144]	@ (800563c <TIM_TI1_SetConfig+0xd4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a23      	ldr	r2, [pc, #140]	@ (8005640 <TIM_TI1_SetConfig+0xd8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <TIM_TI1_SetConfig+0xdc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a21      	ldr	r2, [pc, #132]	@ (8005648 <TIM_TI1_SetConfig+0xe0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_TI1_SetConfig+0x66>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a20      	ldr	r2, [pc, #128]	@ (800564c <TIM_TI1_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <TIM_TI1_SetConfig+0x6a>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <TIM_TI1_SetConfig+0x6c>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0303 	bic.w	r3, r3, #3
 80055de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e003      	b.n	80055f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f023 030a 	bic.w	r3, r3, #10
 800560c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f003 030a 	and.w	r3, r3, #10
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40001800 	.word	0x40001800

08005650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 030a 	bic.w	r3, r3, #10
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b087      	sub	sp, #28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0210 	bic.w	r2, r3, #16
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005700:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0210 	bic.w	r2, r3, #16
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	031b      	lsls	r3, r3, #12
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005764:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f023 0303 	bic.w	r3, r3, #3
 80057b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	031b      	lsls	r3, r3, #12
 8005844:	b29b      	uxth	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005852:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	031b      	lsls	r3, r3, #12
 8005858:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	f043 0307 	orr.w	r3, r3, #7
 800589c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e05a      	b.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a21      	ldr	r2, [pc, #132]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d022      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a0:	d01d      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10c      	bne.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40010400 	.word	0x40010400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40001800 	.word	0x40001800

08005a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e03d      	b.n	8005acc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <memset>:
 8005b00:	4402      	add	r2, r0
 8005b02:	4603      	mov	r3, r0
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d100      	bne.n	8005b0a <memset+0xa>
 8005b08:	4770      	bx	lr
 8005b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0e:	e7f9      	b.n	8005b04 <memset+0x4>

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	@ (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	@ (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	@ (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	@ (8005b54 <__libc_init_array+0x44>)
 8005b24:	f000 f818 	bl	8005b58 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08005b98 	.word	0x08005b98
 8005b4c:	08005b98 	.word	0x08005b98
 8005b50:	08005b98 	.word	0x08005b98
 8005b54:	08005b9c 	.word	0x08005b9c

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr
